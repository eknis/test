/*!
* GREE Chat
* (c) GREE, Inc.
*
* @author Toru Furuya @toru_furuya
* */
/**
 * UUID.js: The RFC-compliant UUID generator for JavaScript.
 *
 * @fileOverview
 * @author  LiosK
 * @version v3.3.0
 * @license The MIT License: Copyright (c) 2010-2016 LiosK.
 */

/** @constructor */
var UUID;

UUID = (function(overwrittenUUID) {
"use strict";

// Core Component {{{

/** @lends UUID */
function UUID() {}

/**
 * The simplest function to get an UUID string.
 * @returns {string} A version 4 UUID string.
 */
UUID.generate = function() {
  var rand = UUID._getRandomInt, hex = UUID._hexAligner;
  return  hex(rand(32), 8)          // time_low
        + "-"
        + hex(rand(16), 4)          // time_mid
        + "-"
        + hex(0x4000 | rand(12), 4) // time_hi_and_version
        + "-"
        + hex(0x8000 | rand(14), 4) // clock_seq_hi_and_reserved clock_seq_low
        + "-"
        + hex(rand(48), 12);        // node
};

/**
 * Returns an unsigned x-bit random integer.
 * @param {int} x A positive integer ranging from 0 to 53, inclusive.
 * @returns {int} An unsigned x-bit random integer (0 <= f(x) < 2^x).
 */
UUID._getRandomInt = function(x) {
  if (x <   0) return NaN;
  if (x <= 30) return (0 | Math.random() * (1 <<      x));
  if (x <= 53) return (0 | Math.random() * (1 <<     30))
                    + (0 | Math.random() * (1 << x - 30)) * (1 << 30);
  return NaN;
};

/**
 * Returns a function that converts an integer to a zero-filled string.
 * @param {int} radix
 * @returns {function(num&#44; length)}
 */
UUID._getIntAligner = function(radix) {
  return function(num, length) {
    var str = num.toString(radix), i = length - str.length, z = "0";
    for (; i > 0; i >>>= 1, z += z) { if (i & 1) { str = z + str; } }
    return str;
  };
};

UUID._hexAligner = UUID._getIntAligner(16);

// }}}

// UUID Object Component {{{

/**
 * Names of each UUID field.
 * @type string[]
 * @constant
 * @since 3.0
 */
UUID.FIELD_NAMES = ["timeLow", "timeMid", "timeHiAndVersion",
                    "clockSeqHiAndReserved", "clockSeqLow", "node"];

/**
 * Sizes of each UUID field.
 * @type int[]
 * @constant
 * @since 3.0
 */
UUID.FIELD_SIZES = [32, 16, 16, 8, 8, 48];

/**
 * Generates a version 4 {@link UUID}.
 * @returns {UUID} A version 4 {@link UUID} object.
 * @since 3.0
 */
UUID.genV4 = function() {
  var rand = UUID._getRandomInt;
  return new UUID()._init(rand(32), rand(16), // time_low time_mid
                          0x4000 | rand(12),  // time_hi_and_version
                          0x80   | rand(6),   // clock_seq_hi_and_reserved
                          rand(8), rand(48)); // clock_seq_low node
};

/**
 * Converts hexadecimal UUID string to an {@link UUID} object.
 * @param {string} strId UUID hexadecimal string representation ("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx").
 * @returns {UUID} {@link UUID} object or null.
 * @since 3.0
 */
UUID.parse = function(strId) {
  var r, p = /^\s*(urn:uuid:|\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(\})?\s*$/i;
  if (r = p.exec(strId)) {
    var l = r[1] || "", t = r[8] || "";
    if (((l + t) === "") ||
        (l === "{" && t === "}") ||
        (l.toLowerCase() === "urn:uuid:" && t === "")) {
      return new UUID()._init(parseInt(r[2], 16), parseInt(r[3], 16),
                              parseInt(r[4], 16), parseInt(r[5], 16),
                              parseInt(r[6], 16), parseInt(r[7], 16));
    }
  }
  return null;
};

/**
 * Initializes {@link UUID} object.
 * @param {uint32} [timeLow=0] time_low field (octet 0-3).
 * @param {uint16} [timeMid=0] time_mid field (octet 4-5).
 * @param {uint16} [timeHiAndVersion=0] time_hi_and_version field (octet 6-7).
 * @param {uint8} [clockSeqHiAndReserved=0] clock_seq_hi_and_reserved field (octet 8).
 * @param {uint8} [clockSeqLow=0] clock_seq_low field (octet 9).
 * @param {uint48} [node=0] node field (octet 10-15).
 * @returns {UUID} this.
 */
UUID.prototype._init = function() {
  var names = UUID.FIELD_NAMES, sizes = UUID.FIELD_SIZES;
  var bin = UUID._binAligner, hex = UUID._hexAligner;

  /**
   * List of UUID field values (as integer values).
   * @type int[]
   */
  this.intFields = new Array(6);

  /**
   * List of UUID field values (as binary bit string values).
   * @type string[]
   */
  this.bitFields = new Array(6);

  /**
   * List of UUID field values (as hexadecimal string values).
   * @type string[]
   */
  this.hexFields = new Array(6);

  for (var i = 0; i < 6; i++) {
    var intValue = parseInt(arguments[i] || 0);
    this.intFields[i] = this.intFields[names[i]] = intValue;
    this.bitFields[i] = this.bitFields[names[i]] = bin(intValue, sizes[i]);
    this.hexFields[i] = this.hexFields[names[i]] = hex(intValue, sizes[i] / 4);
  }

  /**
   * UUID version number defined in RFC 4122.
   * @type int
   */
  this.version = (this.intFields.timeHiAndVersion >> 12) & 0xF;

  /**
   * 128-bit binary bit string representation.
   * @type string
   */
  this.bitString = this.bitFields.join("");

  /**
   * Non-delimited hexadecimal string representation ("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx").
   * @type string
   * @since v3.3.0
   */
  this.hexNoDelim = this.hexFields.join("");

  /**
   * UUID hexadecimal string representation ("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx").
   * @type string
   */
  this.hexString = this.hexFields[0] + "-" + this.hexFields[1] + "-" + this.hexFields[2]
                 + "-" + this.hexFields[3] + this.hexFields[4] + "-" + this.hexFields[5];

  /**
   * UUID string representation as a URN ("urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx").
   * @type string
   */
  this.urn = "urn:uuid:" + this.hexString;

  return this;
};

UUID._binAligner = UUID._getIntAligner(2);

/**
 * Returns UUID string representation.
 * @returns {string} {@link UUID#hexString}.
 */
UUID.prototype.toString = function() { return this.hexString; };

/**
 * Tests if two {@link UUID} objects are equal.
 * @param {UUID} uuid
 * @returns {bool} True if two {@link UUID} objects are equal.
 */
UUID.prototype.equals = function(uuid) {
  if (!(uuid instanceof UUID)) { return false; }
  for (var i = 0; i < 6; i++) {
    if (this.intFields[i] !== uuid.intFields[i]) { return false; }
  }
  return true;
};

// }}}

// UUID Version 1 Component {{{

/**
 * Generates a version 1 {@link UUID}.
 * @returns {UUID} A version 1 {@link UUID} object.
 * @since 3.0
 */
UUID.genV1 = function() {
  var now = new Date().getTime(), st = UUID._state;
  if (now != st.timestamp) {
    if (now < st.timestamp) { st.sequence++; }
    st.timestamp = now;
    st.tick = UUID._getRandomInt(4);
  } else if (Math.random() < UUID._tsRatio && st.tick < 9984) {
    // advance the timestamp fraction at a probability
    // to compensate for the low timestamp resolution
    st.tick += 1 + UUID._getRandomInt(4);
  } else {
    st.sequence++;
  }

  // format time fields
  var tf = UUID._getTimeFieldValues(st.timestamp);
  var tl = tf.low + st.tick;
  var thav = (tf.hi & 0xFFF) | 0x1000;  // set version '0001'

  // format clock sequence
  st.sequence &= 0x3FFF;
  var cshar = (st.sequence >>> 8) | 0x80; // set variant '10'
  var csl = st.sequence & 0xFF;

  return new UUID()._init(tl, tf.mid, thav, cshar, csl, st.node);
};

/**
 * Re-initializes version 1 UUID state.
 * @since 3.0
 */
UUID.resetState = function() {
  UUID._state = new UUID._state.constructor();
};

/**
 * Probability to advance the timestamp fraction: the ratio of tick movements to sequence increments.
 * @type float
 */
UUID._tsRatio = 1 / 4;

/**
 * Persistent state for UUID version 1.
 * @type UUIDState
 */
UUID._state = new function UUIDState() {
  var rand = UUID._getRandomInt;
  this.timestamp = 0;
  this.sequence = rand(14);
  this.node = (rand(8) | 1) * 0x10000000000 + rand(40); // set multicast bit '1'
  this.tick = rand(4);  // timestamp fraction smaller than a millisecond
};

/**
 * @param {Date|int} time ECMAScript Date Object or milliseconds from 1970-01-01.
 * @returns {object}
 */
UUID._getTimeFieldValues = function(time) {
  var ts = time - Date.UTC(1582, 9, 15);
  var hm = ((ts / 0x100000000) * 10000) & 0xFFFFFFF;
  return  { low: ((ts & 0xFFFFFFF) * 10000) % 0x100000000,
            mid: hm & 0xFFFF, hi: hm >>> 16, timestamp: ts };
};

// }}}

// Misc. Component {{{

/**
 * Reinstalls {@link UUID.generate} method to emulate the interface of UUID.js version 2.x.
 * @since 3.1
 * @deprecated Version 2.x. compatible interface is not recommended.
 */
UUID.makeBackwardCompatible = function() {
  var f = UUID.generate;
  UUID.generate = function(o) {
    return (o && o.version == 1) ? UUID.genV1().hexString : f.call(UUID);
  };
  UUID.makeBackwardCompatible = function() {};
};

/**
 * Preserves the value of 'UUID' global variable set before the load of UUID.js.
 * @since 3.2
 * @type object
 */
UUID.overwrittenUUID = overwrittenUUID;

// }}}

return UUID;

})(UUID);

// vim: et ts=2 sw=2 fdm=marker fmr&

/*!
 * EventEmitter v4.2.11 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */

;(function () {
    'use strict';

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */
    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var exports = this;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }

        return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
        return function aliasClosure() {
            return this[name].apply(this, arguments);
        };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;

        // Return a concatenated array of all matching events if
        // the selector is a regular expression.
        if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        }
        else {
            response = events[evt] || (events[evt] = []);
        }

        return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;

        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }

        return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;

        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }

        return response || listeners;
    };

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = typeof listener === 'object';
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }

        return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);

                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }

        return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of its properties to this method
        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    }
                    else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        }
        else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt;
        var events = this._getEvents();
        var key;

        // Remove different things depending on the state of evt
        if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
        }
        else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        }
        else {
            // Remove all listeners in all events
            delete this._events;
        }

        return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
        var listenersMap = this.getListenersAsObject(evt);
        var listeners;
        var listener;
        var i;
        var key;
        var response;

        for (key in listenersMap) {
            if (listenersMap.hasOwnProperty(key)) {
                listeners = listenersMap[key].slice(0);
                i = listeners.length;

                while (i--) {
                    // If the listener returns true then it shall be removed from the event
                    // The function is executed either with a basic call or an apply if there is an args array
                    listener = listeners[i];

                    if (listener.once === true) {
                        this.removeListener(evt, listener.listener);
                    }

                    response = listener.listener.apply(this, args || []);

                    if (response === this._getOnceReturnValue()) {
                        this.removeListener(evt, listener.listener);
                    }
                }
            }
        }

        return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
        }
        else {
            return true;
        }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
        exports.EventEmitter = originalGlobalValue;
        return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (typeof define === 'function' && define.amd) {
        define(function () {
            return EventEmitter;
        });
    }
    else if (typeof module === 'object' && module.exports){
        module.exports = EventEmitter;
    }
    else {
        exports.EventEmitter = EventEmitter;
    }
}.call(this));

(function (global) {
        "use strict";
        var klass = function () {
                this._succ = this._fail = this._next = this._id = null;
                this._tail = this;
        };

        var prop = klass.prototype;

        function DeferredStop (message) {
                this.message = message;
        }

        prop.next = function (func) {
                var q = new Deferred();
                q._succ = func;
                return this._add(q);
        };
        prop.error = function (func) {
                var q = new Deferred();
                q._fail = func;
                return this._add(q);
        };
        prop._add = function (queue) {
                this._tail._next = queue;
                this._tail = queue;
                return this;
        };
        prop.call = function (arg) {
                var received;
                var queue = this;
                while (queue && !queue._succ) {
                        queue = queue._next;
                }
                if (!(queue instanceof Deferred)) {
                        return;
                }
                received = queue._succ(arg);
                if (queue._fail_flag) {
                        return;
                } else if (received instanceof DeferredStop) {
                        return queue.fail(received);
                } else if (received instanceof Deferred) {
                        if (!received._fail_flag) {
                                Deferred._insert(queue, received);
                        } else {
                                while (queue && !queue._fail) {
                                        queue = queue._next;
                                }
                                return queue.fail(received._fail_arg);
                        }
                } else if (queue._next instanceof Deferred) {
                        queue._next.call(received);
                }
        };
        prop.fail = function (arg) {
                var result, err,
                        queue = this;
                while (queue && !queue._fail) {
                        queue = queue._next;
                }
                this._fail_flag = true;
                this._fail_arg = arg;
                if (queue instanceof Deferred) {
                        result = queue._fail(arg);
                        queue.call(result);
                } else if (arg instanceof Error) {
                        throw arg;
                }
        };
        klass._insert = function(queue, ins) {
                if (queue._next instanceof Deferred) {
                        ins._next = queue._next;
                }
                queue._next = ins;
        };
        klass.stop = function (message) {
                return new DeferredStop(message);
        };
        klass.next = function(func) {
                var q = new Deferred().next(func);
                q._id = setTimeout(function() { q.call(); }, 0);
                return q;
        };
        klass.parallel = function(arg) {
                var p = new Deferred();
                if (!arg) {
                        Deferred.next(function () { p.call(); });
                        return p;
                }
                var ret = (arg instanceof Array) ? [] : {};
                var progress = 0;
                for (var prop in arg) {
                        if (arg.hasOwnProperty(prop)) {
                                /*jshint loopfunc:true */
                                (function(queue, name) {
                                        if (typeof queue === 'function') {
                                                queue = Deferred.next(queue);
                                        }
                                        queue.next(function(arg) {
                                                progress--;
                                                ret[name] = arg;
                                                if (progress === 0) {
                                                        p.call(ret);
                                                }
                                        })
                                        .error(function(err) { p.fail(err); });
                                        if (typeof queue._id === 'number') {
                                                clearTimeout(queue._id);
                                        }
                                        queue._id = setTimeout(function() {
                                                queue.call();
                                        }, 0);
                                        progress++;
                                }(arg[prop], prop));
                        }
                }
                if (!progress) {
                        Deferred.next(function () { p.call(); });
                }
                return p;
        };

        global['Deferred'] = klass;
        global['DeferredStop'] = DeferredStop;
})(this);

/**
 * eventsource.js
 * Available under MIT License (MIT)
 * https://github.com/Yaffle/EventSource/
 */

/*jslint indent: 2, vars: true, plusplus: true */
/*global setTimeout, clearTimeout */

(function (global) {
  "use strict";

  function Map() {
    this.data = {};
  }

  Map.prototype = {
    get: function (key) {
      return this.data[key + "~"];
    },
    set: function (key, value) {
      this.data[key + "~"] = value;
    },
    "delete": function (key) {
      delete this.data[key + "~"];
    }
  };

  function EventTarget() {
    this.listeners = new Map();
  }

  function throwError(e) {
    setTimeout(function () {
      throw e;
    }, 0);
  }

  EventTarget.prototype = {
    dispatchEvent: function (event) {
      event.target = this;
      var type = String(event.type);
      var listeners = this.listeners;
      var typeListeners = listeners.get(type);
      if (!typeListeners) {
        return;
      }
      var length = typeListeners.length;
      var i = -1;
      var listener = null;
      while (++i < length) {
        listener = typeListeners[i];
        try {
          listener.call(this, event);
        } catch (e) {
          throwError(e);
        }
      }
    },
    addEventListener: function (type, callback) {
      type = String(type);
      var listeners = this.listeners;
      var typeListeners = listeners.get(type);
      if (!typeListeners) {
        typeListeners = [];
        listeners.set(type, typeListeners);
      }
      var i = typeListeners.length;
      while (--i >= 0) {
        if (typeListeners[i] === callback) {
          return;
        }
      }
      typeListeners.push(callback);
    },
    removeEventListener: function (type, callback) {
      type = String(type);
      var listeners = this.listeners;
      var typeListeners = listeners.get(type);
      if (!typeListeners) {
        return;
      }
      var length = typeListeners.length;
      var filtered = [];
      var i = -1;
      while (++i < length) {
        if (typeListeners[i] !== callback) {
          filtered.push(typeListeners[i]);
        }
      }
      if (filtered.length === 0) {
        listeners["delete"](type);
      } else {
        listeners.set(type, filtered);
      }
    }
  };

  function Event(type) {
    this.type = type;
    this.target = null;
  }

  function MessageEvent(type, options) {
    Event.call(this, type);
    this.data = options.data;
    this.lastEventId = options.lastEventId;
  }

  MessageEvent.prototype = Event.prototype;

  var XHR = global.XMLHttpRequest;
  var XDR = global.XDomainRequest;
  var isCORSSupported = Boolean(XHR && ((new XHR()).withCredentials !== undefined));
  var isXHR = isCORSSupported;
  var Transport = isCORSSupported ? XHR : XDR;
  var WAITING = -1;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSED = 2;
  var AFTER_CR = 3;
  var FIELD_START = 4;
  var FIELD = 5;
  var VALUE_START = 6;
  var VALUE = 7;
  var contentTypeRegExp = /^text\/event\-stream;?(\s*charset\=utf\-8)?$/i;

  var MINIMUM_DURATION = 1000;
  var MAXIMUM_DURATION = 18000000;

  function getDuration(value, def) {
    var n = Number(value) || def;
    return (n < MINIMUM_DURATION ? MINIMUM_DURATION : (n > MAXIMUM_DURATION ? MAXIMUM_DURATION : n));
  }

  function fire(that, f, event) {
    try {
      if (typeof f === "function") {
        f.call(that, event);
      }
    } catch (e) {
      throwError(e);
    }
  }

  function EventSource(url, options) {
    url = String(url);

    var withCredentials = Boolean(isCORSSupported && options && options.withCredentials);
    var initialRetry = getDuration(options ? options.retry : NaN, 1000);
    var heartbeatTimeout = getDuration(options ? options.heartbeatTimeout : NaN, 45000);
    var lastEventId = (options && options.lastEventId && String(options.lastEventId)) || "";
    var that = this;
    var retry = initialRetry;
    var wasActivity = false;
    var xhr = new Transport();
    // FIXME: temporary code for Cobit authentication
    var header = options ? options.header ? options.header : {} : {};
    var timeout = 0;
    var timeout0 = 0;
    var charOffset = 0;
    var currentState = WAITING;
    var dataBuffer = [];
    var lastEventIdBuffer = "";
    var eventTypeBuffer = "";
    var onTimeout = null;

    var state = FIELD_START;
    var field = "";
    var value = "";

    options = null;

    function close() {
      currentState = CLOSED;
      if (xhr !== null) {
        xhr.abort();
        xhr = null;
      }
      if (timeout !== 0) {
        clearTimeout(timeout);
        timeout = 0;
      }
      if (timeout0 !== 0) {
        clearTimeout(timeout0);
        timeout0 = 0;
      }
      that.readyState = CLOSED;
    }

    function onProgress(isLoadEnd) {
      var responseText = currentState === OPEN || currentState === CONNECTING ? xhr.responseText || "" : "";
      var event = null;
      var isWrongStatusCodeOrContentType = false;

      if (currentState === CONNECTING) {
        var status = 0;
        var statusText = "";
        var contentType = "";
        if (isXHR) {
          try {
            status = Number(xhr.status || 0);
            statusText = String(xhr.statusText || "");
            contentType = String(xhr.getResponseHeader("Content-Type") || "");
          } catch (error) {
            // https://bugs.webkit.org/show_bug.cgi?id=29121
            status = 0;
            // FF < 14, WebKit
            // https://bugs.webkit.org/show_bug.cgi?id=29658
            // https://bugs.webkit.org/show_bug.cgi?id=77854
          }
        } else {
          status = 200;
          contentType = xhr.contentType;
        }
        if (status === 200 && contentTypeRegExp.test(contentType)) {
          currentState = OPEN;
          wasActivity = true;
          retry = initialRetry;
          that.readyState = OPEN;
          event = new Event("open");
          that.dispatchEvent(event);
          fire(that, that.onopen, event);
          if (currentState === CLOSED) {
            return;
          }
        } else {
          if (status !== 0) {
            var message = "EventSource's response has a status " + status + " " + statusText.replace(/\s+/g, "") + ". Reconnecting.";
            //http://www.w3.org/TR/eventsource/#processing-model
            if ([305, 401, 407, 302, 303, 307, 500, 502, 503, 504].indexOf(xhr.status) === -1) {
              if (status !== 200) {
                message = "EventSource's response has a status " + status + " " + statusText.replace(/\s+/g, " ") + " that is not 200. Aborting the connection.";
              } else {
                message = "EventSource's response has a Content-Type specifying an unsupported type: " + contentType.replace(/\s+/g, " ") + ". Aborting the connection.";
              }
              isWrongStatusCodeOrContentType = true;
            }
            setTimeout(function () {
              throw new Error(message);
            });
          }
        }
      }

      if (currentState === OPEN) {
        if (responseText.length > charOffset) {
          wasActivity = true;
        }
        var i = charOffset - 1;
        var length = responseText.length;
        var c = "\n";
        while (++i < length) {
          c = responseText[i];
          if (state === AFTER_CR && c === "\n") {
            state = FIELD_START;
          } else {
            if (state === AFTER_CR) {
              state = FIELD_START;
            }
            if (c === "\r" || c === "\n") {
              if (field === "data") {
                dataBuffer.push(value);
              } else if (field === "id") {
                lastEventIdBuffer = value;
              } else if (field === "event") {
                eventTypeBuffer = value;
              } else if (field === "retry") {
                initialRetry = getDuration(value, initialRetry);
                retry = initialRetry;
              } else if (field === "heartbeatTimeout") {//!
                heartbeatTimeout = getDuration(value, heartbeatTimeout);
                if (timeout !== 0) {
                  clearTimeout(timeout);
                  timeout = setTimeout(onTimeout, heartbeatTimeout);
                }
              }
              value = "";
              field = "";
              if (state === FIELD_START) {
                if (dataBuffer.length !== 0) {
                  lastEventId = lastEventIdBuffer;
                  if (eventTypeBuffer === "") {
                    eventTypeBuffer = "message";
                  }
                  event = new MessageEvent(eventTypeBuffer, {
                    data: dataBuffer.join("\n"),
                    lastEventId: lastEventIdBuffer
                  });
                  that.dispatchEvent(event);
                  if (eventTypeBuffer === "message") {
                    fire(that, that.onmessage, event);
                  }
                  if (currentState === CLOSED) {
                    return;
                  }
                }
                dataBuffer.length = 0;
                eventTypeBuffer = "";
              }
              state = c === "\r" ? AFTER_CR : FIELD_START;
            } else {
              if (state === FIELD_START) {
                state = FIELD;
              }
              if (state === FIELD) {
                if (c === ":") {
                  state = VALUE_START;
                } else {
                  field += c;
                }
              } else if (state === VALUE_START) {
                if (c !== " ") {
                  value += c;
                }
                state = VALUE;
              } else if (state === VALUE) {
                value += c;
              }
            }
          }
        }
        charOffset = length;
      }

      if ((currentState === OPEN || currentState === CONNECTING) &&
          (isLoadEnd || isWrongStatusCodeOrContentType || (charOffset > 1024 * 1024) || (timeout === 0 && !wasActivity))) {
        currentState = WAITING;
        xhr.abort();
        if (timeout !== 0) {
          clearTimeout(timeout);
          timeout = 0;
        }
        if (retry > initialRetry * 16) {
          retry = initialRetry * 16;
        }
        if (retry > MAXIMUM_DURATION) {
          retry = MAXIMUM_DURATION;
        }
        if (isWrongStatusCodeOrContentType) {
            close();
        } else {
            timeout = setTimeout(onTimeout, retry);
        }
        retry = retry * 2 + 1;

        that.readyState = CONNECTING;
        event = new Event("error");
        that.dispatchEvent(event);
        fire(that, that.onerror, event);
      } else {
        if (timeout === 0) {
          wasActivity = false;
          timeout = setTimeout(onTimeout, heartbeatTimeout);
        }
      }
    }

    function onProgress2() {
      onProgress(false);
    }

    function onLoadEnd() {
      onProgress(true);
    }

    if (isXHR) {
      // workaround for Opera issue with "progress" events
      timeout0 = setTimeout(function f() {
        if (xhr.readyState === 3) {
          onProgress2();
        }
        timeout0 = setTimeout(f, 500);
      }, 0);
    }

    onTimeout = function () {
      timeout = 0;
      if (currentState !== WAITING) {
        onProgress(false);
        return;
      }
      // loading indicator in Safari, Chrome < 14, Firefox
      // https://bugzilla.mozilla.org/show_bug.cgi?id=736723
      if (isXHR && (xhr.sendAsBinary !== undefined || xhr.onloadend === undefined) && global.document && global.document.readyState && global.document.readyState !== "complete") {
        timeout = setTimeout(onTimeout, 4);
        return;
      }
      // XDomainRequest#abort removes onprogress, onerror, onload

      xhr.onload = xhr.onerror = onLoadEnd;

      if (isXHR) {
        // improper fix to match Firefox behaviour, but it is better than just ignore abort
        // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596
        // https://bugzilla.mozilla.org/show_bug.cgi?id=880200
        // https://code.google.com/p/chromium/issues/detail?id=153570
        xhr.onabort = onLoadEnd;

        // Firefox 3.5 - 3.6 - ? < 9.0
        // onprogress is not fired sometimes or delayed
        xhr.onreadystatechange = onProgress2;
      }

      xhr.onprogress = onProgress2;

      wasActivity = false;
      timeout = setTimeout(onTimeout, heartbeatTimeout);

      charOffset = 0;
      currentState = CONNECTING;
      dataBuffer.length = 0;
      eventTypeBuffer = "";
      lastEventIdBuffer = lastEventId;
      value = "";
      field = "";
      state = FIELD_START;

      var s = url.slice(0, 5);
      if (s !== "data:" && s !== "blob:") {
        s = url + ((url.indexOf("?", 0) === -1 ? "?" : "&") + "lastEventId=" + encodeURIComponent(lastEventId) + "&r=" + String(Math.random() + 1).slice(2));
      } else {
        s = url;
      }
      xhr.open("GET", s, true);

      if (isXHR) {
        // withCredentials should be set after "open" for Safari and Chrome (< 19 ?)
        xhr.withCredentials = withCredentials;

        xhr.responseType = "text";

        // Request header field Cache-Control is not allowed by Access-Control-Allow-Headers.
        // "Cache-control: no-cache" are not honored in Chrome and Firefox
        // https://bugzilla.mozilla.org/show_bug.cgi?id=428916
        //xhr.setRequestHeader("Cache-Control", "no-cache");
        xhr.setRequestHeader("Accept", "text/event-stream");
        // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.
        //xhr.setRequestHeader("Last-Event-ID", lastEventId);

        // FIXME: temporary code for Cobit authentication
        Object.keys(header).forEach(function (key) {
            xhr.setRequestHeader(key, header[key]);
        });
      }

      xhr.send(null);
    };

    EventTarget.call(this);
    this.close = close;
    this.url = url;
    this.readyState = CONNECTING;
    this.withCredentials = withCredentials;

    this.onopen = null;
    this.onmessage = null;
    this.onerror = null;

    onTimeout();
  }

  function F() {
    this.CONNECTING = CONNECTING;
    this.OPEN = OPEN;
    this.CLOSED = CLOSED;
  }
  F.prototype = EventTarget.prototype;

  EventSource.prototype = new F();
  F.call(EventSource);

  if (Transport) {
    // Why replace a native EventSource ?
    // https://bugzilla.mozilla.org/show_bug.cgi?id=444328
    // https://bugzilla.mozilla.org/show_bug.cgi?id=831392
    // https://code.google.com/p/chromium/issues/detail?id=260144
    // https://code.google.com/p/chromium/issues/detail?id=225654
    // ...
    global.NativeEventSource = global.EventSource;
    global.EventSource = EventSource;
  }

}(this));

/**
 * https://github.com/cho45/micro-location.js
 * (c) cho45 http://cho45.github.com/mit-license
 */
// immutable object, should not assign a value to properties
function Location () { this.init.apply(this, arguments) }
Location.prototype = {
	init : function (protocol, host, hostname, port, pathname, search, hash) {
		this.protocol  = protocol;
		this.host      = host;
		this.hostname  = hostname;
		this.port      = port || "";
		this.pathname  = pathname || "";
		this.search    = search || "";
		this.hash      = hash || "";
		if (protocol) {
			with (this) this.href = protocol + '//' + host + pathname + search + hash;
		} else
		if (host) {
			with (this) this.href = '//' + host + pathname + search + hash;
		} else {
			with (this) this.href = pathname + search + hash;
		}
	},

	params : function (name) {
		if (!this._params) {
			var params = {};

			var pairs = this.search.substring(1).split(/[;&]/);
			for (var i = 0, len = pairs.length; i < len; i++) {
				if (!pairs[i]) continue;
				var pair = pairs[i].split(/=/);
				var key  = decodeURIComponent(pair[0].replace(/\+/g, '%20'));
				var val  = decodeURIComponent(pair[1].replace(/\+/g, '%20'));

				if (!params[key]) params[key] = [];
				params[key].push(val);
			}

			this._params = params;
		}

		switch (typeof name) {
			case "undefined": return this._params;
			case "object"   : return this.build(name);
		}
		return this._params[name] ? this._params[name][0] : null;
	},

	build : function (params) {
		if (!params) params = this._params;

		var ret = new Location();
		var _search = this.search;
		if (params) {
			var search = [];
			for (var key in params) if (params.hasOwnProperty(key)) {
				var val = params[key];
				switch (typeof val) {
					case "object":
						for (var i = 0, len = val.length; i < len; i++) {
							search.push(encodeURIComponent(key) + '=' + encodeURIComponent(val[i]));
						}
						break;
					default:
						search.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));
				}
			}
			_search = '?' + search.join('&');
		}

		with (this) ret.init.apply(ret, [
			protocol,
			host,
			hostname,
			port,
			pathname,
			_search,
			hash
		]);
		return ret;
	}
};
Location.regexp = new RegExp('^(?:(https?:)//(([^:/]+)(:[^/]+)?))?([^#?]*)(\\?[^#]*)?(#.*)?$');
Location.parse = function (string) {
	var matched = String(string).match(this.regexp);
	var ret = new Location();
	ret.init.apply(ret, matched.slice(1));
	return ret;
};

this.Location = Location;

var Blix = (function() {

    var self = {};

    /**
     * initialize property
     */
    self.initialize = function () {
        self.requestTable = {};
        self.requestCount = 0;
        self.loadingStartTimeout && clearTimeout(self.loadingStartTimeout);
        self.loadingStopTimeout && clearTimeout(self.loadingStopTimeout);
        self.loadingStartTimeout = undefined;
        self.loadingStopTimeout = undefined;
        self.eventEmitter = new EventEmitter();
    };
    self.initialize();

    /**
     * main function
     */
    self.ajax = function (options) {
        // check network connection
        if (!self.isOnline()) {
            self.eventEmitter.emitEvent('offline');
            return;
        }

        if (typeof options['crossDomain'] === 'undefined') {
            options['crossDomain'] = /^([\w-]+:)?\/\/([^\/]+)/.test(options.url) && RegExp.$2 != window.location.host;
        }

        var timeout = options['timeout'];
        options['timeout'] = function () {
            if (timeout) {
                timeout.apply(this, arguments);
            }
            self.eventEmitter.emitEvent('timeout');
        };

        var currentCount =  ++self.requestCount;
        var success = options['success'];
        options['success'] = function () {
            delete self.requestTable[currentCount];
            self.loadingStop();
            if (success) {
                success.apply(this, arguments);
            }
        };

        var accessObject = self.isWorkerSupport()
            ? new self.WorkerAccess(options)
            : new self.XHRAccess(options)
        ;

        self.loadingStart();

        accessObject['requestCount'] = currentCount;
        self.requestTable[currentCount] = accessObject;
    };

    /**
     * stop all request
     */
    self.stop = function () {
        Object.keys(self.requestTable).forEach(function (key) {
            self.requestTable[key].abort(self.requestTable[key]);
        });
    };

    /**
     * send all request
     */
    self.retry = function () {
        // 二重送信はサーバ側管理する
        Object.keys(self.requestTable).forEach(function (key) {
            self.requestTable[key].send(self.requestTable[key]);
        });
    };

    /**
     * clear request table
     */
    self.abort = function () {
        self.requestTable = {};
        self.requestCount = 0;
    };

    /**
     * trigger loadingStart / loadingStop event
     */
    self.loadingStart = function () {
        if (Object.keys(self.requestTable).length !== 0) {
            return;
        }
        if (self.loadingStartTimeout) {
            return;
        }
        self.loadingStartTimeout = setTimeout(function () {
            self.eventEmitter.emitEvent('loadingStart');
        }, 300);
    };
    self.loadingStop = function () {
        self.loadingStopTimeout && clearTimeout(self.loadingStopTimeout);
        self.loadingStopTimeout = setTimeout(function () {
            self.eventEmitter.emitEvent('loadingStop');
            self.loadingStopTimeout = undefined;
        }, 300);
    };

    /**
     * check whether connection is online or offline
     */
    (function () {
        var isAndroid2 = navigator.userAgent.match(/Android\s+2/i);
        var isPhantomJS = navigator.userAgent.match(/PhantomJS/i);
        if (!isAndroid2 && !isPhantomJS) {
            self.isOnline = function () {
                return navigator.onLine;
            };
            return;
        }

        var onLine = true;
        var timeout = 0;
        self.isOnline = function () {
            if (timeout) {
                return onLine;
            }
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', location.href, false);
            try {
                xhr.send();
                onLine = true;
            } catch (e) {
                onLine = false;
            }
            timeout = setTimeout(function () {
                timeout = 0;
            }, 5000);
            return onLine;
        };
    })();

    /**
     * event listener
     */
    self.addListener = function (name, handler) {
        self.eventEmitter.addListener(name, handler);
    };
    self.removeListener = function (name, handler) {
        self.eventEmitter.removeListener(name, handler);
    };

    self.isWorkerSupport = function () {
        return false;  //ajaxのsuccess時に結果とxhrオブジェクトを共に返したいがworkerだと難しいので
        //return !!(window.Worker && typeof(Blob) === typeof(Function));
    };

    return self;
})();

/**
 * ajax-like function
 */
Blix.XHRAccess = function (options) {
    this.options = options;
    this.xhr = this.send();
};
Blix.XHRAccess.prototype.send = function () {
    return Blix.ajaxStart(this.options);
};
Blix.XHRAccess.prototype.abort = function () {
    this.xhr.abort();
};

/**
 * ajax-like function with WebWorker
 */
Blix.WorkerAccess = function (options) {
    this.worker = new Worker(Blix.WorkerAccess.getBlobURL());
    this.options = options;
    this.send();
};

Blix.WorkerAccess.blobURL = undefined;
Blix.WorkerAccess.getBlobURL = function () {
    if (this.blobURL) {
        return this.blobURL;
    }
    var blob = new Blob(
        ['onmessage = ' + Blix.WorkerAccess.inWorker.toString() + ';var ajaxStart = ' + Blix.ajaxStart.toString() + ';var Blix = {};Blix.param = ' + Blix.param.toString()],
        {type:"text/javascript"}
    );
    var myUrl = window.webkitURL || window.URL;
    this.blobURL = myUrl.createObjectURL(blob);
    return this.blobURL;
};

Blix.WorkerAccess.prototype.send = function () {
    var options = this.options;
    this.worker.onmessage = function (evn) {
        if (!options[evn.data.type]) {
            return;
        }
        options[evn.data.type](evn.data.response);
    };

    var message = this.filterObject(options, function (key) {
        return 'function' !== typeof options[key];
    });
    if (!/^https?:\/\//.test(message.url)) {
        message.url = location.origin + message.url;
    }
    this.worker.postMessage(message);
};
Blix.WorkerAccess.prototype.filterObject = function (options, filter) {
    var result = {};
    Object.keys(options).filter(filter).forEach(function (key) {
        result[key] = options[key];
    });
    return result;
};
Blix.WorkerAccess.prototype.abort = function () {
    this.worker.terminate();
};
/**
 * WebWorker internal functions
 */
Blix.WorkerAccess.inWorker = function (evn) {
    var options = evn.data;
    ['success', 'timeout'].forEach(function (name) {
        options[name] = function (res) {
            postMessage({
                'response' : res,
                'type' : name
            });
        };
    });
    ajaxStart(options);
};

/**
 * XHR connect function
 */
Blix.ajaxStart = function (options) {
    var
        xhr = new XMLHttpRequest(),
        url = options["url"],
        success = options.success || function() {},
        timeout = options.timeout || function() {},
        error = options.error || function() {},
        type = options.type || 'GET',
        withCredentials = options.withCredentials || false,
        header = options.header || {},
        ctype = options.ctype || (( type === 'POST' ) ? 'application/x-www-form-urlencoded' : ''),
        crossDomain = options.crossDomain || false,
        data = options.data || '',
        // default timeout setting(ignore zero)
        timeoutLimit = ('timeout_limit' in options ? options.timeout_limit : 3000) || 1,
        timerId
    ;

    // Convert data if not already a string
    if (type.toLowerCase() === "get" && data && typeof data !== 'string' && data !== '') {
        data = Blix.param(data);

        if (url.indexOf("?") === -1) {
            url += "?" + data;
        } else {
            url += "&" + data;
        }
    }
    data = JSON.stringify(data);

    xhr.onreadystatechange = function () {
        if (xhr.readyState !== 4) {
            return;
        }
        timerId && clearTimeout(timerId);
        var response;
        if ( xhr.status >= 200 && xhr.status < 300 ) {
            response = xhr.responseText;
            if (xhr.getResponseHeader('Content-Type') === 'application/json') {
                try {
                    response = JSON.parse(response);
                } catch (e) {}
            }
            success(response, xhr);
        } else {
            error(xhr);
        }
    };

    xhr.open(type, url);

    if ('timeout' in xhr) {
        xhr.timeout = timeoutLimit;
        xhr.ontimeout = function() {
            //clear context(for worker)
            timeout(xhr);
        };
    } else {
        timerId = setTimeout(function () {
            xhr.abort();
            delete xhr.onreadystatechange;
            timeout(xhr);
        }, timeoutLimit);
    }
    if (ctype) {
        xhr.setRequestHeader('Content-Type', ctype);
    }
    if (withCredentials) {
        xhr.withCredentials = true;
    }
    Object.keys(header).forEach(function (key) {
        xhr.setRequestHeader(key, header[key]);
    });
    if (!crossDomain) {
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    }
    xhr.send(data);

    return xhr;
};

/**
 * Serialize a set of key/values into a query string
 */
Blix.param = function (data) {
    data = Object.keys(data).map(function (key, value) {
        value = data[key] == null ? '' : data[key];
        return [encodeURIComponent(key), encodeURIComponent(value)].join('=');
    }).join("&");
    return data;
};

/*
 * @param {Object} options server options
 * @param {String} options.proxyUrl CORS proxy iframe url(require)
 * @param {String} options.apiUrl SSE(server sent event) server url
 * @param {Function} callback initialize done
 * */
var Jinn = function (options, callback) {
    // Cross Domain Request support?
    var isXDomainSupport = Jinn.isXDomainSupport;
    if (Jinn.debug) {
        isXDomainSupport = false;
    }
    if (isXDomainSupport) {
        // withCredentials is not supported(iframe version)
        options['withCredentials'] = false;
        var blix = Jinn.XHRSender();
        // not support webworker
        if (!window.Worker || typeof(Blob) !== typeof(Function)) {
            // native or polyfill EventSource
            var es;
            var isSafe = Jinn.checkSafeUA(navigator.userAgent);
            es = isSafe ? new NativeEventSource(options.apiUrl, options) : new EventSource(options.apiUrl, options);
            callback(es, blix);
            return;
        }
        var ee = Jinn.makeWorkerEmitter(options);
        callback(ee, blix);
        return;
    }
    Jinn.makeIframeConnection(options, function (receiver, sender) {
        callback(receiver, sender);
    });
};

Jinn.checkSafeUA = function (ua) {
    if (!window.NativeEventSource) {
        return false;
    }
    var chrome = ua.match(/Chrome\/(\d+)/);
    if (chrome) {
        var version = chrome.pop()|0;
        if (version >= 36) {
            return true;
        }
    } else {
        var iOS = ua.match(/i(Phone|Pad|Pod);.+?OS ([\d_]+)/);
        if (iOS) {
            if ((iOS.pop() || '').match(/^([789]|\d\d+)_/)) {
                return true;
            }
        }
    }
    return false;
};

Jinn.requestCount = 0;

Jinn.isXDomainSupport = 'withCredentials' in new XMLHttpRequest();
Jinn.isXDomainSupport = Jinn.isXDomainSupport || 'undefined' !== typeof XDomainRequest;
// Android 2系はXHRをStreamingで受け取るときに4KBのPaddingを付加する必要があるため、iframe経由での通信を強制する
// （security上の理由からX-Padding-Lengthはiframe経由でしか受け取らないため）
if (navigator.userAgent.match(/Android\s+2\.\d/)) {
    Jinn.isXDomainSupport = false;
}

Jinn.makeWorkerEmitter = function (options) {
    function inWorker(evn) {
        var options = evn.data;
        var es = new EventSource(options.apiUrl, options);
        ['open', 'message', 'error'].forEach(function (name) {
            es.addEventListener(name, function (evn) {
                postMessage({
                    'type' : name,
                    'value' : evn.data
                });
            });
        });
    }
    // support webworker
    var part = 'onmessage = ' + inWorker.toString() + ';(function(f){function N(){this.data={}}function U(){this.listeners=new N}function V(b){setTimeout(function(){throw b;},0)}function J(b){this.type=b;this.target=null}function W(b,a){J.call(this,b);this.data=a.data;this.lastEventId=a.lastEventId}function K(b,a){var e=Number(b)||a;return e<X?X:e>L?L:e}function O(b,a,e){try{"function"===typeof a&&a.call(b,e)}catch(c){V(c)}}function p(b,a){function e(){m=C;null!==d&&(d.abort(),d=null);0!==h&&(clearTimeout(h),h=0);0!==D&&(clearTimeout(D),D=0);n.readyState=C}function c(b){var a=m===z||m===v?d.responseText||"":"",g=null,c=!1;if(m===v){var g=0,f="",l="";if(E)try{g=Number(d.status||0),f=String(d.statusText||""),l=String(d.getResponseHeader("Content-Type")||"")}catch(R){g=0}else g=200,l=d.contentType;if(200===g&&ca.test(l)){if(m=z,F=!0,s=A,n.readyState=z,g=new J("open"),n.dispatchEvent(g),O(n,n.onopen,g),m===C)return}else if(0!==g){var u="EventSource\'s response has a status "+g+" "+f.replace(/\\s+/g,"")+". Reconnecting.";-1===[305,401,407,302,303,307,500,502,503,504].indexOf(d.status)&&(u=200!==g?"EventSource\'s response has a status "+g+" "+f.replace(/\\s+/g," ")+" that is not 200. Aborting the connection.":"EventSource\'s response has a Content-Type specifying an unsupported type: "+l.replace(/\\s+/g," ")+". Aborting the connection.",c=!0);setTimeout(function(){throw Error(u);})}}if(m===z){a.length>G&&(F=!0);for(var f=G-1,l=a.length,r="\\n";++f<l;)if(r=a[f],k===P&&"\\n"===r)k=w;else if(k===P&&(k=w),"\\r"===r||"\\n"===r){"data"===t?H.push(q):"id"===t?M=q:"event"===t?x=q:"retry"===t?s=A=K(q,A):"heartbeatTimeout"===t&&(I=K(q,I),0!==h&&(clearTimeout(h),h=setTimeout(y,I)));t=q="";if(k===w){if(0!==H.length&&(p=M,""===x&&(x="message"),g=new W(x,{data:H.join("\\n"),lastEventId:M}),n.dispatchEvent(g),"message"===x&&O(n,n.onmessage,g),m===C))return;H.length=0;x=""}k="\\r"===r?P:w}else k===w&&(k=Y),k===Y?":"===r?k=Z:t+=r:k===Z?(" "!==r&&(q+=r),k=$):k===$&&(q+=r);G=l}m!==z&&m!==v||!(b||c||1048576<G||0===h&&!F)?0===h&&(F=!1,h=setTimeout(y,I)):(m=Q,d.abort(),0!==h&&(clearTimeout(h),h=0),s>16*A&&(s=16*A),s>L&&(s=L),c?e():h=setTimeout(y,s),s=2*s+1,n.readyState=v,g=new J("error"),n.dispatchEvent(g),O(n,n.onerror,g))}function l(){c(!1)}function R(){c(!0)}b=String(b);var u=Boolean(S&&a&&a.withCredentials),A=K(a?a.retry:NaN,1E3),I=K(a?a.heartbeatTimeout:NaN,45E3),p=a&&a.lastEventId&&String(a.lastEventId)||"",n=this,s=A,F=!1,d=new aa,B=a?a.header?a.header:{}:{},h=0,D=0,G=0,m=Q,H=[],M="",x="",y=null,k=w,t="",q="";a=null;E&&(D=setTimeout(function ba(){3===d.readyState&&l();D=setTimeout(ba,500)},0));y=function(){h=0;if(m!==Q)c(!1);else if(E&&(void 0!==d.sendAsBinary||void 0===d.onloadend)&&f.document&&f.document.readyState&&"complete"!==f.document.readyState)h=setTimeout(y,4);else{d.onload=d.onerror=R;E&&(d.onabort=R,d.onreadystatechange=l);d.onprogress=l;F=!1;h=setTimeout(y,I);G=0;m=v;H.length=0;x="";M=p;t=q="";k=w;var a=b.slice(0,5),a="data:"!==a&&"blob:"!==a?b+((-1===b.indexOf("?",0)?"?":"&")+"lastEventId="+encodeURIComponent(p)+"&r="+String(Math.random()+1).slice(2)):b;d.open("GET",a,!0);E&&(d.withCredentials=u,d.responseType="text",d.setRequestHeader("Accept","text/event-stream"),Object.keys(B).forEach(function(a){d.setRequestHeader(a,B[a])}));d.send(null)}};this.listeners=new N;this.close=e;this.url=b;this.readyState=v;this.withCredentials=u;this.onerror=this.onmessage=this.onopen=null;y()}function B(){this.CONNECTING=v;this.OPEN=z;this.CLOSED=C}N.prototype={get:function(b){return this.data[b+"~"]},set:function(b,a){this.data[b+"~"]=a},"delete":function(b){delete this.data[b+"~"]}};U.prototype={dispatchEvent:function(b){b.target=this;var a=this.listeners.get(String(b.type));if(a)for(var e=a.length,c=-1,l=null;++c<e;){l=a[c];try{l.call(this,b)}catch(f){V(f)}}},addEventListener:function(b,a){b=String(b);var e=this.listeners,c=e.get(b);c||(c=[],e.set(b,c));for(e=c.length;0<=--e;)if(c[e]===a)return;c.push(a)},removeEventListener:function(b,a){b=String(b);var e=this.listeners,c=e.get(b);if(c){for(var f=c.length,p=[],u=-1;++u<f;)c[u]!==a&&p.push(c[u]);if(0===p.length)e["delete"](b);else e.set(b,p)}}};W.prototype=J.prototype;var T=f.XMLHttpRequest,da=f.XDomainRequest,S=Boolean(T&&void 0!==(new T).withCredentials),E=S,aa=S?T:da,Q=-1,v=0,z=1,C=2,P=3,w=4,Y=5,Z=6,$=7,ca=/^text\\/event\\-stream;?(\\s*charset\\=utf\\-8)?$/i,X=1E3,L=18E6;B.prototype=U.prototype;p.prototype=new B;B.call(p);aa&&(f.NativeEventSource=f.EventSource,f.EventSource=p)})(this);';
    var properties = {type:"text/javascript"};
    var blob, bb;
    try {
        blob = new Blob(
            /**
             * eventsource.js
             * Available under MIT License (MIT)
             * https://github.com/Yaffle/EventSource/
             */
            [part],
            properties
        );
    } catch(e) {
        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder ||
                             window.MozBlobBuilder || window.MSBlobBuilder;
        if (e.name == 'TypeError' && BlobBuilder) {
            bb = new BlobBuilder();
            bb.append(part);
            blob = bb.getBlob(properties.type);
        } else {
            throw e;
        }
    }
    var myUrl = window.webkitURL || window.URL;
    var blobURL = myUrl.createObjectURL(blob);
    var worker;
    try {
        worker = new Worker(blobURL);
    } catch (e) {
        if (e.code === 18) { // cross-origin error
            worker = new Worker(options.webworkerHelperUri);
            worker.postMessage(part);
        } else {
            throw e;
        }
    }
    var ee = new EventEmitter();
    ee.addEventListener = ee.addListener;
    worker.onmessage = function (evn) {
        ee.emitEvent(evn.data.type, [{
            'data' : evn.data.value
        }]);
    };
    worker.postMessage(options);
    return ee;
};

Jinn.makeIframeConnection = function(options, callback) {
    var connect = new EventEmitter();
    var receiver = new Jinn.Receiver(connect);

    var apiProxyUrl = options.apiProxyUrl;
    var apiProxyOrigin = apiProxyUrl.match(/https?:\/\/.+?\//)[0];
    var apiIframe = Jinn.makeIframe(apiProxyUrl);
    var apiSender = new Jinn.Sender(connect, apiProxyOrigin, apiIframe);

    var sseProxyUrl = options.sseProxyUrl;
    var sseProxyOrigin = sseProxyUrl.match(/https?:\/\/.+?\//)[0];
    var sseIframe = Jinn.makeIframe(sseProxyUrl);
    var sseSender = new Jinn.Sender(connect, sseProxyOrigin, sseIframe);

    var readyFlag = 0;
    connect.addListener('iframeReady', function () {
        readyFlag++;
        // guarantee both iframe (API and SSE) is ready
        if (readyFlag === 2) {
            sseSender.sendMessage('EventSourceOpen', {
                'url' : options.apiUrl,
                //add Padding-Length to RequstHeader
                // https://code.google.com/p/android/issues/detail?id=13044
                'header': {
                    'X-Padding-Length' : '4096'
                },
                'success' : function () {
                    callback(receiver, apiSender);
                }
            });
        }
    });
};

Jinn.forEach = function (ar, fn, scope) {
    for(var i = 0, len = ar.length; i < len; ++i) {
        fn.call(scope, ar[i], i, ar);
    }
};

Jinn.makeIframe = function (proxyUrl) {
    var iframe = document.createElement('iframe');
    if (!Jinn.debug) {
        iframe.frameborder = iframe.width = iframe.height = 0;
        iframe.style.display = 'none';
    } else {
        proxyUrl += '#debug';
    }
    iframe.src = proxyUrl;
    document.body.appendChild(iframe);
    return iframe;
};

Jinn.XHRSender = function () {
    // for compatibility with Jinn.Sender(xhr v1)
    Blix.destroy = function () {};
    return Blix;
};
Jinn.Sender = function (connect, proxyOrigin, iframe) {
    var self = this;
    self.connect = connect;
    self.iframe = iframe;
    self.requestTable = {};
    self.messageHandler = function (evn) {
        if (evn.origin + '/' !== proxyOrigin) {
            return;
        }
        var result = JSON.parse(evn.data);
        if (!self.requestTable[result.requestId]) {
            self.connect.emitEvent(result.type, [result.value]);
            return;
        }
        self.requestTable[result.requestId](result);
        delete self.requestTable[result.requestId];
    };

    window.addEventListener('message', self.messageHandler);
};
Jinn.Sender.prototype.ajax = function (options) {
    this.sendMessage('ajaxSend', options);
};
Jinn.Sender.prototype.destroy = function () {
    window.removeEventListener('message', this.messageHandler);
    document.body.removeChild(this.iframe);
};
// for Blix compatibility.
Jinn.Sender.prototype.addListener = function (name, callback) {
};
Jinn.Sender.prototype.sendMessage = function (type, options) {
    var success = options.success;
    var error = options.error;
    var timeout = options.timeout;
    var self = this;
    delete options.success;
    delete options.error;
    delete options.timeout;
    var currentCount = Jinn.requestCount++;
    self.requestTable[currentCount] = function (result) {
        var value = result.value;
        if (result.result == 'success') {
            success && success(value.res, value.xhr);
        } else if (result.result == 'error') {
            error && error(value);
        } else if (result.result == 'timeout') {
            timeout && timeout(value);
        } else {
            success && success(value);
        }
    };

    var param = JSON.stringify({
        'type' : type,
        'options' : options,
        'requestId' : currentCount
    });
    self.iframe.contentWindow.postMessage(param, '*');
};

Jinn.Receiver = function (connect) {
    var receiver = this.makeEventEmitter();

    Jinn.forEach(['open', 'message', 'error'], function (name) {
        connect.addListener(name, function (data) {
            receiver.emitEvent(name, [{
                'data' : data
            }]);
        });
    });

    return receiver;
};
Jinn.Receiver.prototype.makeEventEmitter = function () {
    var event = new EventEmitter();
    event.addEventListener = event.addListener;
    event.removeEventListener = event.removeListener;
    event.dispatchEvent = event.emitEvent;
    return event;
};

/*
 * Specialize for ajax initialization
 * @param {Object} options server options
 * @param {String} options.proxyUrl CORS proxy iframe url(require)
 * @param {String} options.apiUrl SSE(server sent event) server url
 * @param {Function} callback initialize done
 * */
var JinnSender = function (options, callback) {
    // Cross Domain Request support?
    var isXDomainSupport = Jinn.isXDomainSupport;
    if (Jinn.debug) {
        isXDomainSupport = false;
    }
    if (isXDomainSupport) {
        callback(Jinn.XHRSender());
        return;
    }

    var proxyUrl = options.proxyUrl;
    var proxyOrigin = proxyUrl.match(/https?:\/\/.+?\//)[0];
    var connect = new EventEmitter();
    var iframe = Jinn.makeIframe(proxyUrl);
    var sender = new Jinn.Sender(connect, proxyOrigin, iframe);

    connect.addListener('iframeReady', function () {
        callback(sender);
    });
};

/**
 * Cobit JavaScript SDK
 * @author Toru Furuya <toru.furuya@gree.net>
 */
var CobitSDK = (function () {
    "use strict";
    var self = {};
    // for multiline stream
    self.firedCallbacks = {};
    self.callbacks = {};
    self.sse_timeout = 10000;
    self.sse_timer = {};
    self.ee = new EventEmitter();
    self.defaultParameter = {
        'version' : 'v1',
        'access_token' : ''
    };
    self.reconnect_interval = 3000;
    // Android standard browsers which you want to stop loading
    self.reconnect_target = [
        'Mozilla/5.0 (Linux; U; Android 4.0.3; ja-jp; ISW13F Build/V53R39C) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30'
    ];

    /**
     * Authentication and get AccessToken by using IDToken
     * @param {Object} option Server options and parameter of authentication
     */
    self.login = function (option) {
        self._initServer(option);
        JinnSender({
            'apiUrl': self['serverAPIAddress'],
            'proxyUrl': self['serverAPIProxyAddress']
        }, function (sender) {
            // Authentication
            sender.ajax({
                'url': CobitSDK.getAPI('/:version/sync/authentication/login', {}),
                'data': {
                    'id_token': option['data']['idToken'],
                    'client_type_id': option['data']['clientTypeId']
                },
                'success': function () {
                    sender.destroy();
                    option['success'].apply(this, arguments);
                },
                'error': option['error'],
                'timeout': option['timeout']
            });
        });
    };

    /**
     * Connect stream and Initialize Cobit API
     * @param {Object} option Server options and parameter which needs to connect stream
     */
    self.connect = function (option) {
        self._initServer(option);
        var data = CobitSDK.param(self['option']['data']);
        self.defaultParameter['access_token'] = self['option']['data']['access_token'];
        var initialConnect = true;
        Jinn({
            'apiUrl': self['serverSSEAddress'] + (data ? '?' + data : ''),
            'sseProxyUrl': self['serverSSEProxyAddress'],
            'apiProxyUrl': self['serverAPIProxyAddress'],
            'webworkerHelperUri': option['webworkerHelperUri']
        }, function (receiver, sender) {
            // reconnect stream to stop loading in Android standard browsers
            if (self.reconnect_target.indexOf(navigator.userAgent) > -1) {
                self._forceReconnect(sender);
            }
            var event = new EventEmitter();
            // for Android 4.1.2 HTL22 Build/JZO54K
            var connect = false;
            var timeout = setTimeout(function () {
                connect = true;
                var cobit = new CobitSDK['apiBase'](event, sender, self['option']);
                option['success'](cobit);
            }, 1000);
            receiver.addEventListener('message', function (evn) {
                if (!evn.data) {
                    return;
                }
                var result = JSON.parse(evn.data);
                if (initialConnect && result.content && result.content.content_type === 'control/connected') {
                    clearTimeout(timeout);
                    if (connect) {
                        return;
                    }
                    initialConnect = false;
                    var cobit = new CobitSDK['apiBase'](event, sender, self['option']);
                    option['success'](cobit);
                    return;
                }
                self._handleEvent(result);
            });
        });
    };

    self._forceReconnect = function (sender) {
        var interval = setInterval(function () {
            // Reconnect if there are not any running ajax requests
            // and callbacks for stream response.
            if (Object.keys(sender.requestTable).length === 0 &&
                Object.keys(self.callbacks).length === 0) {
                clearInterval(interval);
                window.stop();
            }
        }, self.reconnect_interval);
    };

    // private method (for tests)
    self._handleEvent = function (result) {
        var co_key = result.correlation_key;
        var content_type = result.content.content_type;
        if (self._isIgnoreListenSSEType(content_type)) {
            return;
        }
        if (self.firedCallbacks[co_key]) {
            return;
        }
        if (!self.callbacks[co_key]) {
            CobitSDK.ee.emit('ServerSentEvent', result);
            return;
        }
        CobitSDK.ee.emit('AsyncAPIResponse', result);
        self.callbacks[co_key](result);
        self.clearSSETimer(co_key);
        delete self.callbacks[co_key];
        self.firedCallbacks[co_key] = true;
    };

    // private method (for tests)
    self._initServer = function (option) {
        self['option'] = CobitSDK.extend({
            'serverSSEAddress' : 'http://localhost:8081',
            'serverSSEProxyAddress' : 'http://localhost:8081',
            'serverAPIAddress' : 'http://localhost:8081',
            'serverAPIProxyAddress' : 'http://localhost:8081',
            'ignoreListenSSEType' : ['control/connected', 'control/keepAlive'],
            'data' : {}
        }, option);
        self['serverSSEAddress'] = self['option']['serverSSEAddress'];
        self['serverSSEProxyAddress'] = self['option']['serverSSEProxyAddress'];
        self['serverAPIAddress'] = self['option']['serverAPIAddress'];
        self['serverAPIProxyAddress'] = self['option']['serverAPIProxyAddress'];
        self['ignoreListenSSEType'] = self['option']['ignoreListenSSEType'];
    };

    // private method (for tests)
    self._isIgnoreListenSSEType = function (targetType) {
        return self['ignoreListenSSEType'].indexOf(targetType) != -1;
    };

    return self;
})();

CobitSDK.setSSETimer = function (correlation_key, callback) {
    CobitSDK.sse_timer[correlation_key] = setTimeout(function () {
        callback && callback();
        if (CobitSDK.callbacks[correlation_key]) {
            delete CobitSDK.callbacks[correlation_key];
        }
    }, CobitSDK.sse_timeout);
};

CobitSDK.clearSSETimer = function (correlation_key) {
    var timer_id = CobitSDK.sse_timer[correlation_key];
    if (timer_id) {
        clearTimeout(timer_id);
        delete CobitSDK.sse_timer[correlation_key];
    }
};

CobitSDK.clearAllSSETimer = function () {
    Object.keys(CobitSDK.sse_timer).forEach(function (correlation_key) {
        CobitSDK.clearSSETimer(correlation_key);
    });
};

CobitSDK.addListener = function (evn, func) {
    CobitSDK.ee.addListener(evn, func);
};

CobitSDK.removeListener = function (evn, func) {
    CobitSDK.ee.removeListener(evn, func);
};

// remove all listener
CobitSDK.removeEvent = function (evn) {
    CobitSDK.ee.removeEvent(evn);
};

CobitSDK.extend = function () {
    var result = {};
    [].slice.apply(arguments).forEach(function (val) {
        Object.keys(val).forEach(function (key) {
            result[key] = val[key];
        })
    });
    return result;
};

/**
 * Return URL of Restlike API after format
 * @param {String} urlFormat Format of Restlike API URL
 * @param {Object} param Parameter to replace URL
 * @return {String} Formatted Restlike API URL
 */
CobitSDK.getAPI = function (urlFormat, param) {
    param = CobitSDK.extend(CobitSDK.defaultParameter, param);
    // encode for ['+/=']
    param['access_token'] = encodeURIComponent(param['access_token']);
    urlFormat += (urlFormat.match(/\?/) ? '&' : '?') + 'authentication_method=query_string&access_token=:access_token';
    var url = urlFormat.replace(/:(\w+)/g, function(all, key) {
        return param[key] || '';
    });
    return CobitSDK['serverAPIAddress'] + url;
};

CobitSDK.param = function (param) {
    var keys = Object.keys(param);
    var results = [];
    for (var i = 0, l = keys.length; i < l; i++) {
        results.push(keys[i] + '=' + encodeURIComponent(param[keys[i]]));
    }
    return results.join('&');
};

CobitSDK['login'] = CobitSDK.login;
CobitSDK['connect'] = CobitSDK.connect;
CobitSDK['setSSETimer'] = CobitSDK.setSSETimer;
CobitSDK['clearSSETimer'] = CobitSDK.clearSSETimer;
CobitSDK['addListener'] = CobitSDK.addListener;
CobitSDK['removeListener'] = CobitSDK.removeListener;
CobitSDK['removeEvent'] = CobitSDK.removeEvent;
CobitSDK['extend'] = CobitSDK.extend;
CobitSDK['getAPI'] = CobitSDK.getAPI;
CobitSDK['param'] = CobitSDK.param;
window['CobitSDK'] = CobitSDK;

/**
 * Cobit.apiBase
 * @constructor
 */
(function () {
    var klass = function (event, sender, option) {
        this.event = event;
        this.sender = sender;
        this.option = option;

        this.sender.addListener('offline', function () {
            CobitSDK.ee.emit('offline');
        });
    };
    var klassName = 'apiBase';
    var proto = klass.prototype;
    proto.sendAjax = function (option) {
        var success = option['success'];
        var error = option['error'];
        var stimeout = option['stimeout'];
        var correlation_key = option['data'] ? option['data']['correlation_key'] : undefined;

        // for debug
        CobitSDK.ee.emit('CobitAPIRequest', option);
        option['success'] = function (res, xhr) {
            if (res.result !== 'OK' && res.result !== 'ACCEPTED') {
                CobitSDK.ee.emit('error');
                error && error(xhr);
                return;
            }
            // for debug
            CobitSDK.ee.emit('CobitAcceptResponse', res);
            if (stimeout) CobitSDK.setSSETimer(correlation_key, stimeout);
            success && success(res);
        };
        option['error'] = function (xhr) {
            CobitSDK.ee.emit('error');
            error && error(xhr);
        };
        option['timeout'] = function (xhr) {
            CobitSDK.ee.emit('timeout');
            error && error(xhr);
            if (correlation_key && CobitSDK.callbacks[correlation_key]) {
                delete CobitSDK.callbacks[correlation_key];
            }
        };
        this.sender.ajax(option);
    };

    proto.wrapAsyncParams = function(args, option) {
        return $.extend({
            'success': option['response'],
            'error': option['error'],
            'stimeout': option['stimeout']
        }, args);
    };

    proto.generateCorrelationKey = function() {
        return UUID.generate();
    };

    proto.getOrGenerateCorrelationKey = function(option) {
        return option['correlation_key'] || this.generateCorrelationKey();
    };

    proto.loadConversations = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI('/:version/sync/conversation/participating', {}),
            'data': {
                'offset': option['offset'] || 0,
                'limit': option['limit'] || 10
            },
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.loadUpdatedConversations = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI('/:version/sync/conversation/updated/participating', {}),
            'data': {
                'offset': option['offset'] || 0,
                'limit': option['limit'] || 10
            },
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.getConversation = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI(
                '/:version/sync/conversation/:id',
                {'id': option.conversation_id}
            ),
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.getConversationByRefKey = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI('/:version/sync/conversation/refkey', {}),
            'data': {
                'ref_key': option['ref_key']
            },
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.getParticipants = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI(
                '/:version/sync/conversation/:id/participants',
                {'id': option.conversation_id}
            ),
            'data': {
                'offset': option['offset'] || 0,
                'limit': option['limit'] || 10
            },
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.unreadCount = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI('/:version/async/message/unread_count', {}),
            'type': 'POST',
            'data': {
                'conversation_ids': option['conversation_ids'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.createConversation = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI('/:version/async/conversation/create', {}),
            'type': 'POST',
            'data': {
                'client_custom_field': option['client_custom_field'],
                'ref_key': option['ref_key'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.createAndAdd = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI('/:version/async/conversation/create_and_add', {}),
            'type': 'POST',
            'data': {
                'client_custom_field': option['client_custom_field'],
                'ref_key': option['ref_key'],
                'target_user_ref_keys': option['target_user_ref_keys'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.addUserByRefKey = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:id/add',
                {'id': option['conversation_id']}
            ),
            'type': 'POST',
            'data': {
                'target_user_ref_keys': option['target_user_ref_keys'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.joinConversation = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:id/join',
                {'id': option.conversation_id}
            ),
            'type': 'POST',
            'data': {
                'correlation_key': correlation_key,
                'user_id': option['user_id']
            }
        }, option));
    };

    proto.joinConversationByRefKey = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI('/:version/async/conversation/join_by_refkey', {}),
            'type': 'POST',
            'data': {
                'application_id': option['application_id'],
                'ref_key': option['ref_key'],
                'user_id': option['user_id'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.leaveConversation = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:id/leave',
                {'id': option.conversation_id}
            ),
            'type': 'POST',
            'data': {
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.updateConversation = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:id/update',
                {'id': option.conversation_id}
            ),
            'type': 'POST',
            'data': {
                'name': option['name'],
                'client_custom_field': option['client_custom_field'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.updateConversationName = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:id/update/name',
                {'id': option.conversation_id}
            ),
            'type': 'POST',
            'data': {
                'name': option['name'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.sendMessage = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:to_conversation_id/send_text_message',
                {'to_conversation_id': option['conversation_id']}
            ),
            'type': 'POST',
            'data': {
                'ref_key': option['ref_key'],
                'text': option['text'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.latestMessage = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI('/:version/async/message/latest_message', {}),
            'data': {
                'conversation_ids': option['conversation_ids'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.history = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];
        var data = {
            'correlation_key': correlation_key,
            'limit': option['limit'] || 10
        };
        if (option['offset_event_id']) {
            data['offset_event_id'] = option['offset_event_id'];
        }
        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:id/history',
                {'id': option['conversation_id']}
            ),
            'data': data
        }, option));
    };

    proto.sendUserEvent = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:to_conversation_id/send_custom_event',
                {'to_conversation_id': option['to_conversation_id']}
            ),
            'type': 'POST',
            'data': {
                'event_sub_type': option['event_sub_type'],
                'text': option['text'],
                'correlation_key': correlation_key,
                'from_user_id': option['from_user_id']
            }
        }, option));
    };

    proto.readPastMessages = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:id/read_past_messages',
                {'id': option.conversation_id}
            ),
            'type': 'POST',
            'data': {
                'base_message_id': option['message_id'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.readPastAllMessages = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/conversation/:id/read_all_messages',
                {'id': option.conversation_id}
            ),
            'type': 'POST',
            'data': {
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.addListener = function (type, callback) {
        this.event.addListener(type, callback);
        return this;
    };

    proto.removeListener = function (type, callback) {
        this.event.removeListener(type, callback);
        return this;
    };

    proto.getConversationNotificationSetting = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI('/:version/sync/notification/settings/conversation/:id/get',
                {'id': option.conversation_id}
            ),
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.getConversationNotificationSettingList = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI('/:version/async/notification/settings/conversations/get', {}),
            'data': {
                'conversation_ids': option['conversation_ids'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.updateConversationNotificationSetting = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                '/:version/async/notification/settings/conversation/:id/update',
                {'id': option['conversation_id']}
            ),
            'type': 'POST',
            'data': {
                'enabled': option['notification_enabled'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    proto.updateConversationDisplaySetting = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI('/:version/sync/conversation/:id/personalsetting/update',
                {'id': option.conversation_id}
            ),
            'type': 'POST',
            'data': {
                'displayed': option['displays']
            },
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.getConversationPersonalSetting = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI('/:version/sync/conversation/:id/personalsetting/get',
                {'id': option.conversation_id}
            ),
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.getHiddenConversationsUnreadCount = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI('/:version/sync/conversation/nondisplayed_unread/participating', {}),
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.getMyStamps = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI(
                    '/:version/sync/stamps/my/get?displayed_filter=:displayed_filter',
                    {'displayed_filter': option['displayed_filter']}
            ),
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.getStampPackage = function (option) {
        this.sendAjax({
            'url': CobitSDK.getAPI(
                    '/:version/sync/stamp/:stamp_id/package',
                    {'stamp_id': option['stamp_id']}
            ),
            'success': option['success'],
            'error': option['error']
        });
    };

    proto.sendStampUnit = function (option) {
        var correlation_key = this.getOrGenerateCorrelationKey(option);
        CobitSDK.callbacks[correlation_key] = option['success'];

        this.sendAjax(this.wrapAsyncParams({
            'url': CobitSDK.getAPI(
                    '/:version/async/conversation/:to_conversation_id/send_stamp_message',
                    {'to_conversation_id': option['to_conversation_id']}
            ),
            'type': 'POST',
            'data': {
                'ref_key': option['ref_key'],
                'stamp_unit_id': option['stamp_unit_id'],
                'correlation_key': correlation_key
            }
        }, option));
    };

    CobitSDK[klassName] = klass;
})();

var proto = CobitSDK['apiBase'].prototype;
CobitSDK['apiBase']['prototype'] = {
    'sendAjax': proto.sendAjax,
    'wrapAsyncParams': proto.wrapAsyncParams,
    'generateCorrelationKey': proto.generateCorrelationKey,
    'getOrGenerateCorrelationKey': proto.getOrGenerateCorrelationKey,
    'loadConversations': proto.loadConversations,
    'loadUpdatedConversations': proto.loadUpdatedConversations,
    'getConversation': proto.getConversation,
    'getConversationByRefKey': proto.getConversationByRefKey,
    'getParticipants': proto.getParticipants,
    'getConversationWithParticipants': proto.getConversationWithParticipants,
    'unreadCount': proto.unreadCount,
    'createConversation': proto.createConversation,
    'createAndAdd': proto.createAndAdd,
    'addUserByRefKey': proto.addUserByRefKey,
    'joinConversation': proto.joinConversation,
    'joinConversationByRefKey': proto.joinConversationByRefKey,
    'leaveConversation': proto.leaveConversation,
    'updateConversation': proto.updateConversation,
    'updateConversationName': proto.updateConversationName,
    'sendMessage': proto.sendMessage,
    'latestMessage': proto.latestMessage,
    'history': proto.history,
    'readPastMessages': proto.readPastMessages,
    'readPastAllMessages': proto.readPastAllMessages,
    'sendUserEvent': proto.sendUserEvent,
    'addListener': proto.addListener,
    'getConversationNotificationSetting': proto.getConversationNotificationSetting,
    'getConversationNotificationSettingList': proto.getConversationNotificationSettingList,
    'updateConversationNotificationSetting': proto.updateConversationNotificationSetting,
    'updateConversationDisplaySetting': proto.updateConversationDisplaySetting,
    'getConversationPersonalSetting': proto.getConversationPersonalSetting,
    'getHiddenConversationsUnreadCount': proto.getHiddenConversationsUnreadCount,
    'getMyStamps': proto.getMyStamps,
    'getStampPackage': proto.getStampPackage,
    'sendStampUnit': proto.sendStampUnit
};
window['CobitSDK']['apiBase'] = CobitSDK['apiBase'];

var monapt;
(function (monapt) {
    monapt.Tuple1 = function (a) {
        return {
            _1: a
        };
    };

    monapt.Tuple2 = function (a, b) {
        return {
            _1: a,
            _2: b
        };
    };
})(monapt || (monapt = {}));
var monapt;
(function (monapt) {
    var asInstanceOf = function (v) {
        return v;
    };

    var Some = (function () {
        function Some(value) {
            this.value = value;
            this.isEmpty = false;
        }
        Some.prototype.get = function () {
            return this.value;
        };

        Some.prototype.getOrElse = function (defaultValue) {
            return this.value;
        };

        Some.prototype.orElse = function (alternative) {
            return this;
        };

        Some.prototype.match = function (matcher) {
            if (matcher.Some) {
                matcher.Some(this.value);
            }
        };

        Some.prototype.map = function (f) {
            return new Some(f(this.get()));
        };

        Some.prototype.flatMap = function (f) {
            return f(this.get());
        };

        Some.prototype.filter = function (predicate) {
            if (predicate(this.value)) {
                return this;
            } else {
                return new None();
            }
        };

        Some.prototype.reject = function (predicate) {
            return this.filter(function (v) {
                return !predicate(v);
            });
        };

        Some.prototype.foreach = function (f) {
            f(this.value);
        };
        return Some;
    })();
    monapt.Some = Some;

    var None = (function () {
        function None() {
            this.isEmpty = true;
        }
        None.prototype.get = function () {
            throw new Error('No such element.');
        };

        None.prototype.getOrElse = function (defaultValue) {
            return defaultValue();
        };

        None.prototype.orElse = function (alternative) {
            return alternative();
        };

        None.prototype.match = function (matcher) {
            if (matcher.None) {
                matcher.None();
            }
        };

        None.prototype.map = function (f) {
            return asInstanceOf(this);
        };

        None.prototype.flatMap = function (f) {
            return asInstanceOf(this);
        };

        None.prototype.filter = function (predicate) {
            return this;
        };

        None.prototype.reject = function (predicate) {
            return this;
        };

        None.prototype.foreach = function (f) {
            return;
        };
        return None;
    })();
    monapt.None = None;
})(monapt || (monapt = {}));
var monapt;
(function (monapt) {
    var asInstanceOf = function (v) {
        return v;
    };

    var Success = (function () {
        function Success(value) {
            this.value = value;
            this.isSuccess = true;
            this.isFailure = false;
        }
        Success.prototype.get = function () {
            return this.value;
        };

        Success.prototype.getOrElse = function (defaultValue) {
            return this.get();
        };

        Success.prototype.orElse = function (alternative) {
            return this;
        };

        Success.prototype.match = function (matcher) {
            if (matcher.Success)
                matcher.Success(this.get());
        };

        Success.prototype.map = function (f) {
            var _this = this;
            return monapt.Try(function () {
                return f(_this.value);
            });
        };

        Success.prototype.flatMap = function (f) {
            try  {
                return f(this.value);
            } catch (e) {
                return new Failure(e);
            }
        };

        Success.prototype.filter = function (predicate) {
            try  {
                if (predicate(this.value)) {
                    return this;
                } else {
                    return new Failure(new Error('Predicate does not hold for ' + this.value));
                }
            } catch (e) {
                return new Failure(e);
            }
        };

        Success.prototype.reject = function (predicate) {
            return this.filter(function (v) {
                return !predicate(v);
            });
        };

        Success.prototype.foreach = function (f) {
            f(this.value);
        };

        Success.prototype.recover = function (fn) {
            return this;
        };

        Success.prototype.recoverWith = function (fn) {
            return this;
        };
        return Success;
    })();
    monapt.Success = Success;

    var Failure = (function () {
        function Failure(error) {
            this.error = error;
            this.isSuccess = false;
            this.isFailure = true;
        }
        Failure.prototype.get = function () {
            throw this.error;
        };

        Failure.prototype.getOrElse = function (defaultValue) {
            return defaultValue();
        };

        Failure.prototype.orElse = function (alternative) {
            return alternative();
        };

        Failure.prototype.match = function (matcher) {
            if (matcher.Failure)
                matcher.Failure(this.error);
        };

        Failure.prototype.map = function (f) {
            return asInstanceOf(this);
        };

        Failure.prototype.flatMap = function (f) {
            return asInstanceOf(this);
        };

        Failure.prototype.filter = function (predicate) {
            return this;
        };

        Failure.prototype.reject = function (predicate) {
            return this;
        };

        Failure.prototype.foreach = function (f) {
            return;
        };

        Failure.prototype.recover = function (fn) {
            try  {
                return new Success(fn(this.error));
            } catch (e) {
                return new Failure(e);
            }
        };

        Failure.prototype.recoverWith = function (fn) {
            try  {
                return fn(this.error);
            } catch (e) {
                return new Failure(this.error);
            }
        };
        return Failure;
    })();
    monapt.Failure = Failure;

    monapt.Try = function (f) {
        try  {
            return new Success(f());
        } catch (e) {
            return new Failure(e);
        }
    };
})(monapt || (monapt = {}));
var monapt;
(function (monapt) {
    var Cracker = (function () {
        function Cracker() {
            this.fired = false;
            this.callbacks = new Array();
        }
        Cracker.prototype.fire = function (producer) {
            this.producer = producer;
            if (this.fired) {
                throw new Error('Dose fired twice, Can call only once.');
            } else {
                this.fireAll();
            }
        };

        Cracker.prototype.fireAll = function () {
            var _this = this;
            this.fired = true;
            this.callbacks.forEach(function (fn) {
                return _this.producer(fn);
            });
        };

        Cracker.prototype.add = function (fn) {
            if (this.fired) {
                this.producer(fn);
            } else {
                this.callbacks.push(fn);
            }
        };
        return Cracker;
    })();
    monapt.Cracker = Cracker;
})(monapt || (monapt = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var monapt;
(function (monapt) {
    var asInstanceOf = function (v) {
        return v;
    };

    function F(target) {
        var f = function (v) {
            if (v instanceof Error)
                target.failure(v);
else
                target.success(v);
        };
        f['success'] = function (v) {
            return target.success(v);
        };
        f['failure'] = function (e) {
            return target.failure(e);
        };
        return f;
    }

    var Future = (function () {
        function Future(future) {
            this.cracker = new monapt.Cracker();
            future(F(this));
        }
        Future.succeed = function (value) {
            return new Future(function (p) {
                return p.success(value);
            });
        };

        Future.failed = function (error) {
            return new Future(function (p) {
                return p.failure(error);
            });
        };

        Future.prototype.success = function (value) {
            this.cracker.fire(function (fn) {
                return fn(new monapt.Success(value));
            });
        };

        Future.prototype.failure = function (error) {
            this.cracker.fire(function (fn) {
                return fn(new monapt.Failure(error));
            });
        };

        Future.prototype.onComplete = function (callback) {
            this.cracker.add(callback);
        };

        Future.prototype.onSuccess = function (callback) {
            this.onComplete(function (r) {
                r.match({
                    Success: function (v) {
                        return callback(v);
                    }
                });
            });
        };

        Future.prototype.onFailure = function (callback) {
            this.onComplete(function (r) {
                r.match({
                    Failure: function (error) {
                        return callback(error);
                    }
                });
            });
        };

        Future.prototype.map = function (f) {
            var promise = new Promise();
            this.onComplete(function (r) {
                r.match({
                    Failure: function (e) {
                        return promise.failure(e);
                    },
                    Success: function (v) {
                        return f(v, F(promise));
                    }
                });
            });
            return promise.future();
        };

        Future.prototype.flatMap = function (f) {
            var promise = new Promise();
            this.onComplete(function (r) {
                r.match({
                    Failure: function (e) {
                        return promise.failure(e);
                    },
                    Success: function (v) {
                        f(v).onComplete(function (fr) {
                            fr.match({
                                Success: function (v) {
                                    return promise.success(v);
                                },
                                Failure: function (e) {
                                    return promise.failure(e);
                                }
                            });
                        });
                    }
                });
            });
            return promise.future();
        };

        Future.prototype.filter = function (predicate) {
            var promise = new Promise();
            this.onComplete(function (r) {
                r.match({
                    Failure: function (e) {
                        promise.failure(e);
                    },
                    Success: function (v) {
                        try  {
                            if (predicate(v)) {
                                promise.success(v);
                            } else {
                                promise.failure(new Error('No such element.'));
                            }
                        } catch (e) {
                            promise.failure(e);
                        }
                    }
                });
            });
            return promise.future();
        };

        Future.prototype.reject = function (predicate) {
            return this.filter(function (v) {
                return !predicate(v);
            });
        };

        Future.prototype.recover = function (fn) {
            var promise = new Promise();
            this.onComplete(function (r) {
                r.match({
                    Failure: function (error) {
                        try  {
                            fn(error, F(promise));
                        } catch (e) {
                            promise.failure(e);
                        }
                    },
                    Success: function (v) {
                        return promise.success(v);
                    }
                });
            });
            return promise.future();
        };

        Future.prototype.recoverWith = function (fn) {
            var promise = new Promise();
            this.onComplete(function (r) {
                return r.match({
                    Failure: function (e) {
                        fn(e).onComplete(function (fr) {
                            return fr.match({
                                Success: function (v) {
                                    return promise.success(v);
                                },
                                Failure: function (e) {
                                    return promise.failure(e);
                                }
                            });
                        });
                    },
                    Success: function (v) {
                        return promise.success(v);
                    }
                });
            });
            return promise.future();
        };
        return Future;
    })();
    monapt.Future = Future;

    var Promise = (function (_super) {
        __extends(Promise, _super);
        function Promise() {
            _super.call(this, function (p) {
            });
            this.isComplete = false;
        }
        Promise.prototype.success = function (value) {
            this.isComplete = true;
            _super.prototype.success.call(this, value);
        };

        Promise.prototype.failure = function (error) {
            this.isComplete = true;
            _super.prototype.failure.call(this, error);
        };

        Promise.prototype.future = function () {
            return this;
        };
        return Promise;
    })(Future);
    monapt.Promise = Promise;

    monapt.future = function (f) {
        var p = new Promise();

        try  {
            f(F(p));
        } catch (e) {
            p.failure(e);
        }
        return p.future();
    };
})(monapt || (monapt = {}));
var monapt;
(function (monapt) {
    var Selector;
    (function (Selector) {
        var StringSelector = (function () {
            function StringSelector() {
                this.table = {};
            }
            StringSelector.prototype.register = function (k, index) {
                this.table[k] = index;
            };

            StringSelector.prototype.index = function (k) {
                if (this.table[k]) {
                    return new monapt.Some(this.table[k]);
                } else {
                    return new monapt.None();
                }
            };
            return StringSelector;
        })();
        Selector.StringSelector = StringSelector;

        var HashableSelector = (function () {
            function HashableSelector() {
                this.table = {};
            }
            HashableSelector.prototype.register = function (k, index) {
                this.table[k.hash()] = index;
            };

            HashableSelector.prototype.index = function (k) {
                var hash = k.hash();
                if (this.table[hash]) {
                    return new monapt.Some(this.table[hash]);
                } else {
                    return new monapt.None();
                }
            };
            return HashableSelector;
        })();
        Selector.HashableSelector = HashableSelector;

        var ObjectSelector = (function () {
            function ObjectSelector() {
            }
            ObjectSelector.prototype.register = function (k, index) {
            };

            ObjectSelector.prototype.index = function (k) {
                return new monapt.None();
            };
            return ObjectSelector;
        })();
        Selector.ObjectSelector = ObjectSelector;
    })(Selector || (Selector = {}));

    var Map = (function () {
        function Map(key, value) {
            var keysAndValues = [];
            for (var _i = 0; _i < (arguments.length - 2); _i++) {
                keysAndValues[_i] = arguments[_i + 2];
            }
            this.real = [];
            if (value) {
                if (keysAndValues.length != 0 && keysAndValues.length % 2 != 0) {
                    throw new Error(keysAndValues[keysAndValues.length - 1] + ' has not value.');
                } else {
                    this.ensureSelector(key);
                    this.add(key, value);
                    for (var i = 0, l = keysAndValues.length; i < l; i += 2) {
                        this.add(keysAndValues[i], keysAndValues[i + 1]);
                    }
                }
            } else if (key) {
                var obj = key;
                for (var k in obj) {
                    this.ensureSelector(k);
                    this.add(k, obj[k]);
                }
            }

            this.ensureSelector();
        }
        Map.prototype.ensureSelector = function (hint) {
            if (typeof hint === "undefined") { hint = null; }
            if (this.selector) {
                return;
            }

            if (!hint) {
                this.selector = new Selector.ObjectSelector();
            } else if (typeof hint == 'string') {
                this.selector = new Selector.StringSelector();
            } else if (hint.hash) {
                this.selector = new Selector.HashableSelector();
            } else {
                this.selector = new Selector.ObjectSelector();
            }
        };

        Map.prototype.add = function (key, value) {
            this.real.push(monapt.Tuple2(key, value));
            this.selector.register(key, this.real.length - 1);
        };

        Map.prototype.foreach = function (f) {
            this.real.forEach(function (value, index, array) {
                return f(value._1, value._2);
            });
        };

        Map.prototype.map = function (f) {
            var result = new Map();
            this.foreach(function (k, v) {
                var t = f(k, v);
                result.add(t._1, t._2);
            });
            return result;
        };

        Map.prototype.flatMap = function (f) {
            var result = new Map();
            this.foreach(function (k, v) {
                var r = f(k, v);
                r.foreach(function (k, v) {
                    return result.add(k, v);
                });
            });
            return result;
        };

        Map.prototype.mapValues = function (f) {
            var result = new Map();
            this.foreach(function (k, v) {
                result.add(k, f(v));
            });
            return result;
        };

        Map.prototype.filter = function (predicate) {
            var result = new Map();
            this.foreach(function (k, v) {
                if (predicate(k, v))
                    result.add(k, v);
            });
            return result;
        };

        Map.prototype.reject = function (predicate) {
            return this.filter(function (k, v) {
                return !predicate(k, v);
            });
        };

        Map.prototype.find = function (f) {
            return this.filter(f).head();
        };

        Map.prototype.get = function (key) {
            var _this = this;
            return this.selector.index(key).map(function (index) {
                return _this.real[index]._2;
            }).orElse(function () {
                return _this.find(function (k, v) {
                    return k == key;
                }).map(function (tuple) {
                    return tuple._2;
                }).orElse(function () {
                    return new monapt.None();
                });
            });
        };

        Map.prototype.getOrElse = function (key, defaultValue) {
            return this.get(key).getOrElse(defaultValue);
        };

        Map.prototype.head = function () {
            if (this.real.length > 0) {
                return new monapt.Some(this.real[0]);
            } else {
                return new monapt.None();
            }
        };
        return Map;
    })();
    monapt.Map = Map;
})(monapt || (monapt = {}));

var __slice = [].slice;

window.namespace = function(target, name, block) {
  var item, top, _i, _len, _ref, _ref1;
  if (arguments.length < 3) {
    _ref = [(typeof exports !== "undefined" && exports !== null ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
  }
  top = target;
  _ref1 = name.split('.');
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    item = _ref1[_i];
    target = target[item] || (target[item] = {});
  }
  return block(target, top);
};

window.use = function(ns) {
  return namespace(ns, function(exports) {
    return exports;
  });
};

namespace('gluon', function(exports) {
  var COMMON_PREFIX_, localStorageEnabled_, objectStorage;
  COMMON_PREFIX_ = 'gluon';
  exports.Storage = (function() {
    var prefix_, storage_;

    storage_ = null;

    prefix_ = null;

    function _Class(namespace) {
      if (namespace == null) {
        namespace = null;
      }
      if (window.localStorage == null) {
        return;
      }
      if (localStorageEnabled_) {
        storage_ = window.localStorage;
      } else {
        storage_ = objectStorage;
      }
      prefix_ = COMMON_PREFIX_;
      if (namespace != null) {
        prefix_ = "" + prefix_ + "." + namespace;
      }
    }

    _Class.prototype.get = function(key) {
      return storage_ != null ? storage_.getItem("" + prefix_ + "." + key) : void 0;
    };

    _Class.prototype.set = function(key, value) {
      if (storage_ != null) {
        storage_.setItem("" + prefix_ + "." + key, value);
      }
    };

    _Class.prototype.remove = function(key) {
      if (storage_ != null) {
        storage_.removeItem("" + prefix_ + "." + key);
      }
    };

    return _Class;

  })();
  objectStorage = {
    data: {},
    getItem: function(key) {
      return this.data[key];
    },
    setItem: function(key, value) {
      this.data[key] = value;
    },
    removeItem: function(key) {
      delete this.data[key];
    }
  };
  return localStorageEnabled_ = (function() {
    var e;
    try {
      localStorage.setItem('test', 'dummy');
    } catch (_error) {
      e = _error;
      return false;
    }
    return true;
  })();
});

namespace('gluon.oauth2', function(exports) {
  var configuration_, gluon;
  configuration_ = {
    endpoint: {
      tokeninfo: null,
      fallback: null
    }
  };
  gluon = use('gluon');
  exports.storage = {
    namespace: 'oauth2',
    key: {
      accessToken: 'accessToken',
      lastState: 'lastState',
      backTo: 'backTo'
    }
  };
  exports.iframeName = 'gluon.oauth2';
  exports.cmd = {
    setStorageItem: 'setStorageItem',
    getStorageItem: 'getStorageItem',
    removeStorageItem: 'removeStorageItem',
    authorize: 'authorize',
    reauthorize: 'reauthorize'
  };
  exports.initialize = function(configuration) {
    configuration_ = configuration;
  };
  exports.isRequired = function() {
    var _ref;
    return (configuration_.appId != null) && (((_ref = configuration_.endpoint) != null ? _ref.authorize : void 0) != null) && (configuration_.endpoint.tokeninfo != null) && (configuration_.endpoint.authCallback != null);
  };
  exports.redirectFallbackUrl = function() {
    if (configuration_.endpoint.fallback != null) {
      window.top.location.href = configuration_.endpoint.fallback;
    }
  };
  return exports.verifyAccessToken = function(accessToken) {
    return $.ajax({
      url: "" + configuration_.endpoint.tokeninfo + "&access_token=" + accessToken + "&callback=?",
      dataType: 'jsonp'
    });
  };
});

namespace('gluon.iframe', function(exports) {
  exports.event = {
    ready: 'ready'
  };
  return exports.getUrlOrigin = function(url) {
    if (/^([\w-]+:)?\/\/([^\/:]+)/.test(url)) {
      return RegExp.$2;
    } else {
      return null;
    }
  };
});

namespace('gluon.iframe', function(exports) {
  return exports.Client = (function() {
    var deferredQueue_, eventHandlers_, iframe_, messageQueue_, name_, onMessage_, onReady_, postAllMessages_, postMessage_, serverOrigin_, serverUrl_, setServerUrl_, window_;

    name_ = null;

    serverUrl_ = null;

    serverOrigin_ = null;

    iframe_ = null;

    window_ = null;

    deferredQueue_ = [];

    messageQueue_ = [];

    eventHandlers_ = [];

    function _Class(name, serverUrl) {
      var doc, style;
      if (!((window.postMessage != null) && (name != null) && (serverUrl != null))) {
        return;
      }
      name_ = name;
      setServerUrl_(serverUrl);
      doc = window.document;
      iframe_ = doc.createElement('iframe');
      style = iframe_.style;
      style.position = 'absolute';
      style.left = style.top = '-999px';
      this.bind(exports.event.ready, onReady_);
      window.addEventListener('message', onMessage_, false);
      doc.body.appendChild(iframe_);
    }

    _Class.prototype.isEnabled = function() {
      return iframe_ != null;
    };

    _Class.prototype.bind = function(event, handler) {
      if (eventHandlers_[event] == null) {
        eventHandlers_[event] = [];
      }
      eventHandlers_[event].push(handler);
    };

    _Class.prototype.connect = function(serverUrl) {
      if (serverUrl == null) {
        serverUrl = null;
      }
      if (serverUrl != null) {
        setServerUrl_(serverUrl);
      }
      iframe_.src = serverUrl_;
    };

    _Class.prototype.sendRequest = function(message) {
      var deferred;
      message.target = name_;
      message.id = deferredQueue_.length;
      deferred = $.Deferred();
      deferredQueue_.push(deferred);
      if (window_ != null) {
        postMessage_(message);
      } else {
        messageQueue_.push(message);
      }
      return deferred.promise();
    };

    setServerUrl_ = function(serverUrl) {
      serverUrl_ = serverUrl;
      serverOrigin_ = exports.getUrlOrigin(serverUrl);
    };

    onMessage_ = function(event) {
      var eventHandler, message, _i, _len, _ref, _ref1;
      if (exports.getUrlOrigin(event.origin) !== serverOrigin_) {
        return;
      }
      message = JSON.parse(event.data);
      if ((message != null ? message.target : void 0) !== name_) {
        return;
      }
      if ((message.event != null) && (eventHandlers_[message.event] != null)) {
        _ref = eventHandlers_[message.event];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eventHandler = _ref[_i];
          if (eventHandler != null) {
            eventHandler(message.params);
          }
        }
        return;
      }
      if (!((message.cmd != null) && (message.id != null))) {
        return;
      }
      if ((_ref1 = deferredQueue_[message.id]) != null) {
        _ref1.resolve(message);
      }
      deferredQueue_[message.id] = null;
    };

    onReady_ = function(params) {
      window_ = iframe_.contentWindow;
      setTimeout(postAllMessages_, 0);
    };

    postMessage_ = function(message) {
      if (window_ != null) {
        window_.postMessage(JSON.stringify(message), serverUrl_);
      }
    };

    postAllMessages_ = function() {
      var message, _i, _len;
      for (_i = 0, _len = messageQueue_.length; _i < _len; _i++) {
        message = messageQueue_[_i];
        postMessage_(message);
      }
      messageQueue_.length = 0;
    };

    return _Class;

  })();
});

namespace('gluon.oauth2.client', function(exports) {
  var authorizeDeferred_, client_, getStorageItem_, iframe, makeStorageFunc_, oauth2, processStorageItem_, removeStorageItem_, setStorageItem_, storage_;
  client_ = null;
  storage_ = null;
  authorizeDeferred_ = null;
  iframe = use('gluon.iframe');
  oauth2 = use('gluon.oauth2');
  exports.initialize = function(configuration) {
    makeStorageFunc_();
    oauth2.initialize(configuration);
    if (configuration.endpoint.authServer != null) {
      client_ = new iframe.Client(oauth2.iframeName, configuration.endpoint.authServer);
      client_.bind(iframe.event.ready, function(params) {
        if (authorizeDeferred_ != null) {
          authorizeDeferred_.resolve();
        }
      });
      exports.authorize();
    } else {
      storage_ = new gluon.Storage(oauth2.storage.namespace);
    }
  };
  exports.authorize = function() {
    if (!(client_ != null ? client_.isEnabled() : void 0)) {
      return $.Deferred(function(d) {
        return d.reject();
      });
    } else if (authorizeDeferred_ != null) {
      return authorizeDeferred_.promise();
    }
    authorizeDeferred_ = $.Deferred();
    client_.connect();
    client_.sendRequest({
      cmd: oauth2.cmd.authorize
    });
    return authorizeDeferred_.promise();
  };
  exports.reauthorize = function() {
    if (!(client_ != null ? client_.isEnabled() : void 0)) {
      $.Deferred(function(d) {
        return d.reject();
      });
    } else if ((authorizeDeferred_ != null ? authorizeDeferred_.state() : void 0) === 'pending') {
      authorizeDeferred_.promise();
    }
    authorizeDeferred_ = $.Deferred();
    client_.sendRequest({
      cmd: oauth2.cmd.reauthorize
    });
    return authorizeDeferred_.promise();
  };
  makeStorageFunc_ = function() {
    var capitalized, key, value, _ref;
    _ref = oauth2.storage.key;
    for (key in _ref) {
      value = _ref[key];
      capitalized = value.charAt(0).toUpperCase() + value.substring(1);
      exports["get" + capitalized] = (function(k) {
        return function() {
          return getStorageItem_(k);
        };
      })(value);
      exports["set" + capitalized] = (function(k) {
        return function(v) {
          return setStorageItem_(k, v);
        };
      })(value);
      exports["remove" + capitalized] = (function(k) {
        return function() {
          return removeStorageItem_(k);
        };
      })(value);
    }
  };
  getStorageItem_ = function(key) {
    return processStorageItem_(key, null, function(k, v) {
      return client_.sendRequest({
        cmd: oauth2.cmd.getStorageItem,
        params: {
          key: k
        }
      }).pipe(function(message) {
        return $.Deferred(function(d) {
          return d.resolve(message.params.value);
        });
      });
    }, function(k, v) {
      return $.Deferred(function(d) {
        return d.resolve(storage_.get(k));
      });
    });
  };
  setStorageItem_ = function(key, value) {
    return processStorageItem_(key, value, function(k, v) {
      return client_.sendRequest({
        cmd: oauth2.cmd.setStorageItem,
        params: {
          key: k,
          value: v
        }
      });
    }, function(k, v) {
      return $.Deferred(function(d) {
        storage_.set(k, v);
        return d.resolve();
      });
    });
  };
  removeStorageItem_ = function(key) {
    return processStorageItem_(key, null, function(k, v) {
      return client_.sendRequest({
        cmd: oauth2.cmd.removeStorageItem,
        params: {
          key: k
        }
      });
    }, function(k, v) {
      return $.Deferred(function(d) {
        storage_.remove(k);
        return d.resolve();
      });
    });
  };
  return processStorageItem_ = function(key, value, iframeFunc, storageFunc) {
    if (client_ != null ? client_.isEnabled() : void 0) {
      return iframeFunc(key, value);
    } else if (storage_ != null) {
      return storageFunc(key, value);
    } else {
      return $.Deferred(function(d) {
        return d.reject();
      });
    }
  };
});

namespace('gluon.jsonRpc', function(exports) {
  var VERSION_STRING_, configuration_, makeDeferredRequest_, makeParams_, oauth2, sendAjaxRequest_, sendOauth2Request_, sendRetryRequest_;
  VERSION_STRING_ = '2.0';
  configuration_ = {
    endpoint: {
      api: null
    },
    requestCallback: null
  };
  oauth2 = use('gluon.oauth2');
  exports.initialize = function(configuration) {
    configuration_ = configuration;
  };
  exports.makeObject = function(method, id, params, requiredParams, optionalParams, renderer, isLoggingSkipped) {
    var obj;
    obj = {
      jsonrpc: VERSION_STRING_,
      method: method,
      id: id,
      params: makeParams_(params, requiredParams, optionalParams),
      renderer: renderer,
      isLoggingSkipped: isLoggingSkipped
    };
    if (configuration_.token != null) {
      obj.token = configuration_.token;
    }
    return obj;
  };
  exports.sendRequest = function(obj, onSuccess, onError) {
    if (_.isArray(obj) && obj.length === 1) {
      obj = obj.shift();
    }
    return makeDeferredRequest_(obj).pipe(function(data, status, xhr) {
      var e;
      try {
        return onSuccess != null ? onSuccess.apply(this, arguments) : void 0;
      } catch (_error) {
        e = _error;
        return $.Deferred(function(d) {
          return d.reject(xhr, status, e);
        });
      }
    }).fail(onError);
  };
  makeDeferredRequest_ = function(obj) {
    if (configuration_.requestCallback != null) {
      return $.Deferred(function(d) {
        return configuration_.requestCallback(d, obj);
      });
    } else if (oauth2.isRequired()) {
      return sendOauth2Request_(obj, false);
    } else {
      return sendAjaxRequest_(obj);
    }
  };
  sendOauth2Request_ = function(obj, isRetry) {
    return oauth2.client.authorize().pipe(function() {
      return oauth2.client.getAccessToken().pipe(function(accessToken) {
        if (accessToken != null) {
          return sendAjaxRequest_(obj, accessToken).pipe(null, function(xhr, status, e) {
            var errorObj, _ref;
            try {
              errorObj = JSON.parse(xhr.responseText);
              if ((errorObj != null ? (_ref = errorObj.error) != null ? _ref.code : void 0 : void 0) === gluon.error.AUTHORIZATION_REQUIRED) {
                return sendRetryRequest_(obj, isRetry);
              }
            } catch (_error) {
              e = _error;
            }
            return $.Deferred(function(d) {
              return d.reject(xhr, status, e);
            });
          });
        } else {
          return sendRetryRequest_(obj, isRetry);
        }
      });
    });
  };
  sendRetryRequest_ = function(obj, isRetryFailed) {
    if (isRetryFailed) {
      return oauth2.redirectFallbackUrl();
    } else {
      return oauth2.client.reauthorize().pipe(function() {
        return sendOauth2Request_(obj, true);
      });
    }
  };
  sendAjaxRequest_ = function(obj, accessToken) {
    var options;
    if (accessToken == null) {
      accessToken = null;
    }
    options = {
      type: 'POST',
      url: configuration_.endpoint.api,
      data: JSON.stringify(obj),
      dataType: 'json',
      xhrFields: {
        withCredentials: true
      }
    };
    if (accessToken != null) {
      options.headers = {
        Authorization: "Bearer " + accessToken
      };
    }
    return $.ajax(options);
  };
  return makeParams_ = function(params, requiredParams, optionalParams) {
    var key, missingKeys, name, names, result, _i, _j, _len, _len1, _ref;
    if (params == null) {
      if (requiredParams != null) {
        throw new Error('params not found.');
      } else {
        return null;
      }
    }
    if (requiredParams != null) {
      missingKeys = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = requiredParams.length; _i < _len; _i++) {
          key = requiredParams[_i];
          if (params[key] == null) {
            _results.push(key);
          }
        }
        return _results;
      })();
      if (missingKeys.length > 0) {
        throw new Error("params " + (missingKeys.join()) + " not found.");
      }
    } else if (optionalParams == null) {
      return params;
    }
    result = {};
    _ref = [requiredParams, optionalParams];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      names = _ref[_i];
      if (names != null) {
        for (_j = 0, _len1 = names.length; _j < _len1; _j++) {
          name = names[_j];
          if (params[name] != null) {
            result[name] = params[name];
          }
        }
      }
    }
    return result;
  };
});

namespace('gluon.error', function(exports) {
  exports.RESOURCE_NOT_FOUND = -32001;
  exports.AUTHORIZATION_REQUIRED = -32002;
  exports.ACCESS_DENIED = -32003;
  exports.PARAMETER_MISSING = -32004;
  exports.INVALID_PARAMETER = -32005;
  exports.UNKNOWN_API = -32006;
  exports.UNKNOWN_PARAMETER = -32007;
  exports.UNIMPLEMENTED_API = -32008;
  exports.FRIEND_IGNORE_LIST_LIMIT_EXCEEDED = -33001;
  exports.FRIEND_ADD_TO_IGNORE_LIST_FAILED = -33002;
});

var __hasProp = {}.hasOwnProperty;

namespace('gluon.cache', function(exports) {
  var cacheStorage;
  cacheStorage = use('gluon.cacheStorage');
  exports.ONE_MINUTE = 60 * 1000;
  exports.TEN_MINUTES = 10 * 60 * 1000;
  exports.ONE_HOUR = 60 * 60 * 1000;
  exports.TWO_HOURS = 2 * 60 * 60 * 1000;
  exports.TWELVE_HOURS = 12 * 60 * 60 * 1000;
  exports.ONE_DAY = 24 * 60 * 60 * 1000;
  exports.batchCacheRequest = function() {
    var cache, cacheParams, cached, gluonBatch, i, len_, req, reqIndex, reqs, _i, _len;
    reqIndex = {};
    reqs = [];
    cacheParams = [];
    cached = {};
    len_ = arguments.length;
    for (i = _i = 0, _len = arguments.length; _i < _len; i = ++_i) {
      req = arguments[i];
      if (req.isCacheRequest && !req.forceRequest) {
        cache = cacheStorage.get(req.key);
        if (cache != null) {
          cached[i] = cache;
          continue;
        }
      }
      reqIndex[i] = reqs.length;
      if (req.isCacheRequest) {
        reqs.push(req.gluonReq);
        cacheParams.push({
          key: req.key,
          expire: req.expire
        });
      } else {
        reqs.push(req);
        cacheParams.push(null);
      }
    }
    if (reqs.length === 0) {
      return {
        send: function(onSuccess, onError) {
          if (cached.length === 1) {
            cached = cached.shift();
          }
          return $.Deferred(function(d) {
            onSuccess(cached);
            return d.resolve();
          });
        }
      };
    } else {
      gluonBatch = gluon._batch.apply(null, reqs);
      return {
        send: function(onSuccess, onError) {
          return gluonBatch.send(function(results) {
            var params, res, result, _j, _len1;
            if (!(results instanceof Array)) {
              results = [results];
            }
            for (i = _j = 0, _len1 = results.length; _j < _len1; i = ++_j) {
              result = results[i];
              params = cacheParams[i];
              if (params != null) {
                cacheStorage.set(params.key, result, params.expire, result.serial);
              }
            }
            res = (function() {
              var _k, _ref, _ref1, _results;
              _results = [];
              for (i = _k = 0, _ref = len_ - 1; 0 <= _ref ? _k <= _ref : _k >= _ref; i = 0 <= _ref ? ++_k : --_k) {
                _results.push((_ref1 = cached[i]) != null ? _ref1 : results[reqIndex[i]]);
              }
              return _results;
            })();
            if (res.length === 1) {
              res = res.shift();
            }
            return onSuccess(res);
          }, onError);
        }
      };
    }
  };
  exports.cacheRequest = function(gluonReq, expire, force) {
    if (force == null) {
      force = false;
    }
    if (expire > 0) {
      this.prepareForCache(gluonReq);
      return {
        isCacheRequest: true,
        expire: expire,
        gluonReq: gluonReq,
        key: gluonReq.key,
        forceRequest: force,
        send: function(onSuccess, onError) {
          var cache, key;
          key = this.key;
          expire = this.expire;
          cache = cacheStorage.get(key);
          if (!this.forceRequest && (cache != null)) {
            return $.Deferred(function(d) {
              onSuccess(cache);
              return d.resolve();
            });
          } else {
            return gluonReq.send(function(result) {
              cacheStorage.set(key, result, expire, result.serial);
              return onSuccess(result);
            }, onError);
          }
        }
      };
    } else {
      return gluonReq;
    }
  };
  exports._makeKey = function(gluonReq) {
    var k, keys, p, v, _i, _len;
    keys = ((function() {
      var _ref, _results;
      _ref = gluonReq.p_;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(k);
      }
      return _results;
    })()).sort();
    p = {};
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      k = keys[_i];
      p[k] = gluonReq.p_[k];
    }
    return gluonReq.m_ + (JSON.stringify(p));
  };
  exports.prepareForCache = function(gluonReq) {
    return gluonReq.key = this._makeKey(gluonReq);
  };
  exports.clearAll = function() {
    return cacheStorage.clearAll();
  };
  exports.clearByApiPrefix = function(name) {
    return cacheStorage.clearByApiPrefix(name);
  };
  return exports.clearExpiredAndOutdated = function() {
    return cacheStorage.clearExpiredAndOutdated();
  };
});

namespace('gluon.cacheStorage', function(exports) {
  var localStorage, localStorageEnabled_, modulePrefix, reModulePrefix;
  localStorageEnabled_ = (function() {
    var e;
    try {
      window.localStorage.setItem('test', 'dummy');
    } catch (_error) {
      e = _error;
      return false;
    }
    return true;
  })();
  localStorage = localStorageEnabled_ ? window.localStorage : {};
  modulePrefix = 'gluon-cacheStorage-';
  reModulePrefix = new RegExp('^' + modulePrefix);
  exports.set = function(key, value, expire, serial) {
    if (serial == null) {
      serial = 0;
    }
    return localStorage[modulePrefix + key] = JSON.stringify({
      data: value,
      expire: (new Date).getTime() + expire,
      serial: serial
    });
  };
  exports.get = function(key, defaultValue) {
    var e, json, now;
    try {
      json = JSON.parse(localStorage[modulePrefix + key]);
    } catch (_error) {
      e = _error;
      return defaultValue;
    }
    now = (new Date).getTime();
    if (json.expire < now) {
      this.remove(key);
      return defaultValue;
    }
    return json.data;
  };
  exports.clearExpiredAndOutdated = function(currentSerial) {
    var key, now, _results;
    if (currentSerial == null) {
      currentSerial = 0;
    }
    now = (new Date).getTime();
    _results = [];
    for (key in localStorage) {
      if (!__hasProp.call(localStorage, key)) continue;
      if (key.indexOf(modulePrefix) === 0) {
        key = key.replace(reModulePrefix, '');
        _results.push(this._checkExpireAndSerial(key, now, currentSerial));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  exports.clearAll = function() {
    var key, _results;
    _results = [];
    for (key in localStorage) {
      if (!__hasProp.call(localStorage, key)) continue;
      if (key.indexOf(modulePrefix) === 0) {
        _results.push(this._rawRemove(key));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  exports.clearByApiPrefix = function(name) {
    var key, _results;
    if (typeof name !== 'string' || name.length === 0) {
      return;
    }
    _results = [];
    for (key in localStorage) {
      if (!__hasProp.call(localStorage, key)) continue;
      if (key.indexOf(modulePrefix + name) === 0) {
        _results.push(this._rawRemove(key));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  exports.remove = function(key) {
    return this._rawRemove(modulePrefix + key);
  };
  exports._rawRemove = function(rawKey) {
    return delete localStorage[rawKey];
  };
  exports._checkExpireAndSerial = function(key, now, currentSerial) {
    var json;
    json = this._getRawJson(key);
    if (json == null) {
      this.remove(key);
      return;
    }
    if (json.expire < now) {
      this.remove(key);
      return;
    }
    if (json.serial < currentSerial) {
      this.remove(key);
    }
  };
  exports._getRawJson = function(key) {
    var e, json;
    json = localStorage[modulePrefix + key];
    if (json == null) {
      return null;
    }
    try {
      json = JSON.parse(json);
    } catch (_error) {
      e = _error;
      return null;
    }
    return json;
  };
  return exports.calcHash = function(str) {
    var c, hash, i, len_, _i, _ref;
    hash = 0;
    len_ = str.length;
    if (len_ === 0) {
      return hash;
    }
    for (i = _i = 0, _ref = len_ - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      c = str.charCodeAt(i);
      hash = (hash << 5) - hash + c;
      hash &= hash;
    }
    return hash;
  };
});

namespace('gluon', function(exports) {
  var cache, configuration_, jsonRpc, oauth2;
  jsonRpc = use('gluon.jsonRpc');
  oauth2 = use('gluon.oauth2');
  cache = use('gluon.cache');
  configuration_ = {
    appId: null,
    endpoint: {
      api: null,
      authorize: null,
      tokeninfo: null,
      authCallback: null,
      authServer: null,
      fallback: null
    },
    requestCallback: null
  };
  exports.initialize = function(url, requestCallback) {
    var configuration;
    if (requestCallback == null) {
      requestCallback = null;
    }
    if (typeof url === 'object') {
      configuration = url;
    } else {
      configuration = {
        endpoint: {
          api: url
        },
        requestCallback: requestCallback
      };
    }
    configuration_ = configuration;
    jsonRpc.initialize(configuration);
    oauth2.client.initialize(configuration);
  };
  exports.request = function(method, params, requiredParams, optionalParams, renderer, isLoggingSkipped) {
    if (renderer == null) {
      renderer = 'proton';
    }
    if (isLoggingSkipped == null) {
      isLoggingSkipped = false;
    }
    if (typeof method === 'object') {
      params = method.params;
      requiredParams = method.requiredParams;
      optionalParams = method.optionalParams;
      renderer = method.renderer;
      isLoggingSkipped = method.isLoggingSkipped;
      method = method.method;
    }
    return {
      m_: method,
      p_: params,
      rp_: requiredParams,
      op_: optionalParams,
      r_: renderer,
      ils_: isLoggingSkipped,
      send: function(onSuccess, onError) {
        return jsonRpc.sendRequest(jsonRpc.makeObject(this.m_, 1, this.p_, this.rp_, this.op_, this.r_, this.ils_), onSuccess, onError);
      },
      setCacheInfo: function(info) {
        return gluon.cache.cacheRequest(this, info.expire, info.force);
      }
    };
  };
  exports._batch = function(arg) {
    var req, reqs;
    reqs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        req = arguments[_i];
        delete req.send;
        _results.push(req);
      }
      return _results;
    }).apply(this, arguments);
    return {
      params: function(p) {
        var key, value, _i, _len;
        for (_i = 0, _len = reqs.length; _i < _len; _i++) {
          req = reqs[_i];
          if (req.p_ == null) {
            req.p_ = {};
          }
          for (key in p) {
            value = p[key];
            if (req.p_[key] == null) {
              req.p_[key] = value;
            }
          }
        }
        return this;
      },
      send: function(onSuccess, onError) {
        var i;
        return jsonRpc.sendRequest((function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = reqs.length; _i < _len; i = ++_i) {
            req = reqs[i];
            _results.push(jsonRpc.makeObject(req.m_, i + 1, req.p_, req.rp_, req.op_, req.r_, req.ils_));
          }
          return _results;
        })(), onSuccess, onError);
      }
    };
  };
  return exports.batch = function() {
    return cache.batchCacheRequest.apply(null, arguments);
  };
});

/*! fivefold v0.1.1 | MIT Licence | https://github.com/yaakaito/fivefold | (c) 2013 yaakaito.org  */
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var fivefold;
(function (fivefold) {
    function isFunction(obj) {
        return typeof obj === "function" && !(obj instanceof RegExp);
    }
    function isJQueryObject(obj) {
        if (typeof obj != 'object')
            return false;

        return (typeof obj.on == 'function' && typeof obj.off == 'function');
    }

    function proxy(fn, context) {
        if (!isFunction(fn)) {
            return undefined;
        }

        return function () {
            return fn.apply(context || this, Array.prototype.slice.call(arguments));
        };
    }
    fivefold.silent = false;

    var errorLog = function (error) {
        if (!fivefold.silent)
            console.log(error.message);
    };
    var realizerPathSplitter = /\./;

    var Realizer = (function () {
        function Realizer() {
            this.prefix = '';
            this.suffix = '';
        }
        Realizer.prototype.realizeTry = function (pathOrName) {
            var _this = this;
            return monapt.Try(function () {
                return _this.realize(pathOrName);
            });
        };

        Realizer.prototype.realize = function (pathOrName) {
            var clazz = this.getClass(this.parsePathOrName(pathOrName));
            return new clazz();
        };

        Realizer.prototype.parsePathOrName = function (pathOrName) {
            return pathOrName.split(realizerPathSplitter);
        };

        Realizer.prototype.getClass = function (pathComponents) {
            var current = window;
            for (var i = 0, l = pathComponents.length, component; i < l; i++) {
                component = pathComponents[i];

                current = current[i == l - 1 ? this.prefix + component + this.suffix : component];
            }
            return current;
        };
        return Realizer;
    })();
    fivefold.Realizer = Realizer;
    var uniqId = 0;
    function viewUniqId() {
        return 'view' + uniqId++;
    }

    function ensureElement(view, selector, context) {
        if (view.$el) {
            return;
        }

        var $el = null;
        if (selector) {
            $el = $(selector, context);
        } else {
            $el = $('<' + view.tagName + '>');
        }

        var attributes = {};
        for (var key in view.attributes) {
            attributes[key] = view.attributes[key];
        }

        if (view.id) {
            attributes['id'] = view.id;
        }

        if (view.className) {
            attributes['class'] = view.className;
        }

        view.$el = $el.attr(attributes);
    }

    var eventSplitter = /^(\S+)\s*(.*)$/;

    var View = (function () {
        function View(options) {
            if (typeof options === "undefined") { options = {}; }
            this.cid = viewUniqId();
            this.$el = null;
            this.tagName = 'div';
            this.id = '';
            this.className = '';
            this.attributes = {};
            this.autoRender = true;
            var delegate = options.delegate == null ? true : options.delegate;
            var selector = options.selector;
            var context = options.context;

            this.$el = isJQueryObject(options.$el) ? options.$el : null;
            this.tagName = options.tagName || 'div';
            this.id = options.id || '';
            this.className = options.className || '';
            this.attributes = (typeof options.attributes == 'object') ? options.attributes : {};
            ensureElement(this, selector, context);

            if (delegate) {
                this.delegateEvents();
            }
        }
        View.prototype.events = function () {
            return null;
        };

        View.prototype.delegateEvents = function (events) {
            var _this = this;
            if (!(events || (events = this.events()))) {
                return this;
            }
            this.undelegateAll();
            var evmap = new monapt.Map(events);
            evmap.mapValues(function (fn) {
                if (isFunction(fn)) {
                    return fn;
                } else {
                    return _this[fn];
                }
            }).filter(function (key, fn) {
                return isFunction(fn);
            }).map(function (event, fn) {
                var match = event.match(eventSplitter);
                return monapt.Tuple2(match[1], monapt.Tuple2(match[2], proxy(fn, _this)));
            }).foreach(function (e, t) {
                return _this.delegate(e, t._1, t._2);
            });
            return this;
        };

        View.prototype.delegate = function (event, fnOrSelector, fn) {
            var evt = event + '.ff' + this.cid;
            this.$el.on.call(this.$el, evt, fnOrSelector, fn);
        };

        View.prototype.undelegateAll = function () {
            this.$el.off('.ff' + this.cid);
        };

        View.prototype.render = function () {
            return this;
        };
        return View;
    })();
    fivefold.View = View;

    var Layout = (function (_super) {
        __extends(Layout, _super);
        function Layout() {
            _super.apply(this, arguments);
            this.$el = $(document.body);
            this.$content = $(document.body);
        }
        Layout.prototype.beforeDisplayContent = function () {
            ;
        };

        Layout.prototype.display = function (elem) {
            this.$content.html(elem);
        };
        return Layout;
    })(View);
    fivefold.Layout = Layout;

    var defaultLayout = new Layout();

    var Controller = (function () {
        function Controller() {
            this.layout = defaultLayout;
        }
        Controller.prototype.dispatch = function (method, optionsOrError) {
            var _this = this;
            this.layout.render();
            var promise = new monapt.Promise();

            var action = this[method](optionsOrError);
            action.onComplete(function (r) {
                return r.match({
                    Success: function (view) {
                        try  {
                            if (view.autoRender)
                                view.render();
                            _this.layout.beforeDisplayContent();
                            _this.layout.display(view.$el);
                            promise.success(view);
                        } catch (e) {
                            errorLog(e);
                            promise.failure(e);
                        }
                    },
                    Failure: function (e) {
                        promise.failure(e);
                        errorLog(e);
                    }
                });
            });

            return promise.future();
        };
        return Controller;
    })();
    fivefold.Controller = Controller;

    var ControllerRepository = (function () {
        function ControllerRepository() {
        }
        ControllerRepository.prototype.controllerForRouteTry = function (route) {
            var realizer = new ControllerRealizer();
            return realizer.realizeTry(route.controller).filter(function (controller) {
                return controller instanceof Controller;
            });
        };
        return ControllerRepository;
    })();

    var controllerRepository = new ControllerRepository();

    var ControllerRealizer = (function (_super) {
        __extends(ControllerRealizer, _super);
        function ControllerRealizer() {
            _super.apply(this, arguments);
            this.suffix = 'Controller';
        }
        return ControllerRealizer;
    })(Realizer);
    fivefold.ControllerRealizer = ControllerRealizer;
    var ActionFuture = (function (_super) {
        __extends(ActionFuture, _super);
        function ActionFuture() {
            _super.apply(this, arguments);
        }
        return ActionFuture;
    })(monapt.Future);
    fivefold.ActionFuture = ActionFuture;

    fivefold.actionFuture = function (f) {
        return monapt.future(function (p) {
            return f(p);
        });
    };

    var ActionError = (function () {
        function ActionError(name, message) {
            this.name = name;
            this.message = message;
        }
        return ActionError;
    })();
    fivefold.ActionError = ActionError;
    var Route = (function () {
        function Route(pattern, controller, method) {
            this.pattern = pattern;
            this.controller = controller;
            this.method = method;
        }
        return Route;
    })();
    fivefold.Route = Route;

    var RouteRepository = (function () {
        function RouteRepository() {
            this.routes = {};
        }
        RouteRepository.prototype.routesMap = function () {
            return new monapt.Map(this.routes);
        };

        RouteRepository.prototype.registerRoute = function (route) {
            this.routes[route.pattern] = route;
        };
        return RouteRepository;
    })();

    var routeRepository = new RouteRepository();

    var ErrorRouteRepository = (function (_super) {
        __extends(ErrorRouteRepository, _super);
        function ErrorRouteRepository() {
            _super.apply(this, arguments);
        }
        ErrorRouteRepository.prototype.routeForError = function (error) {
            return _super.prototype.routesMap.call(this).get(error.name);
        };
        return ErrorRouteRepository;
    })(RouteRepository);

    var errorRouteRepository = new ErrorRouteRepository();

    var routeSplitter = /::/;

    function routeRegisterFn(pattern, controllerOrRedirect) {
        var repository = routeRepository;
        if (typeof controllerOrRedirect == "string") {
            var comp = controllerOrRedirect.split(routeSplitter);
            repository.registerRoute(new Route(pattern, comp[0], comp[1]));
        } else {
        }
    }

    function errorRouteRegisterFn(code, controllerAndMethod) {
        var repository = errorRouteRepository;
        var comp = controllerAndMethod.split(routeSplitter);
        var route = null;
        if (typeof code == 'number')
            route = new Route('' + code, comp[0], comp[1]); else
            route = new Route(code, comp[0], comp[1]);
        repository.registerRoute(route);
    }
    (function (RouteError) {
        RouteError[RouteError["NotFound"] = -1] = "NotFound";

        RouteError[RouteError["DispatchFailure"] = -2] = "DispatchFailure";
    })(fivefold.RouteError || (fivefold.RouteError = {}));
    var RouteError = fivefold.RouteError;

    var NotFound = function () {
        return new ActionError('-1', '');
    };
    var DispatchFailure = function () {
        return new ActionError('-2', '');
    };

    var histories = [];

    fivefold.history = {
        previous: function (n) {
            if (typeof n === "undefined") { n = 1; }
            if (histories.length <= 1)
                return []; else
                return histories.slice(0, histories.length - 2).slice(-n).reverse();
        },
        current: function () {
            return histories[histories.length - 1];
        }
    };

    var routeListeners = [];

    var Router = (function () {
        function Router(resolver) {
            this.resolver = resolver;
            this.dispatcher = new Dispatcher();
            this.start();
        }
        Router.prototype.start = function () {
            var _this = this;
            window.onhashchange = function (event) {
                _this.onHashChange();
            };
            setTimeout(function () {
                return _this.onHashChange();
            }, 0);
        };

        Router.prototype.onHashChange = function () {
            var _this = this;
            var relativeURL = location.hash;
            var resolve = this.resolver.resolve(relativeURL, routeRepository.routesMap());
            resolve.onComplete(function (r) {
                return r.match({
                    Success: function (routeAndOptions) {
                        return _this.dispatcher.dispatch(routeAndOptions.route, routeAndOptions.options);
                    },
                    Failure: function (error) {
                        return _this.dispatcher.dispatchError(NotFound());
                    }
                });
            });
        };

        Router.prototype.reload = function () {
            this.onHashChange();
        };

        Router.prototype.routes = function (routes) {
            routes(routeRegisterFn);
        };

        Router.prototype.errorRoutes = function (routes) {
            routes(errorRouteRegisterFn);
        };

        Router.prototype.listen = function (listener) {
            routeListeners.push(listener);
        };
        return Router;
    })();
    fivefold.Router = Router;

    var Dispatcher = (function () {
        function Dispatcher() {
        }
        Dispatcher.prototype.dispatch = function (route, optionsOrError) {
            var _this = this;
            controllerRepository.controllerForRouteTry(route).match({
                Success: function (controller) {
                    controller.dispatch(route.method, optionsOrError).onFailure(function (error) {
                        _this.dispatchError(error);
                    });

                    histories.push(route);
                    for (var i = 0, l = routeListeners.length; i < l; i++) {
                        routeListeners[i](route, optionsOrError);
                    }
                },
                Failure: function (e) {
                    return _this.dispatchError(e);
                }
            });
        };

        Dispatcher.prototype.dispatchError = function (error) {
            var _this = this;
            errorRouteRepository.routeForError(error).match({
                Some: function (route) {
                    _this.dispatch(route, error);
                },
                None: function () {
                    errorLog(new Error('Route not found: ' + error.message));
                }
            });
        };
        return Dispatcher;
    })();
})(fivefold || (fivefold = {}));

var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var DDD;
(function (DDD) {
    var Identity = (function () {
        function Identity(value) {
            this.value = value;
        }
        Identity.prototype.getValue = function () {
            return this.value;
        };

        Identity.prototype.equals = function (that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            return this.value === that.getValue();
        };
        return Identity;
    })();
    DDD.Identity = Identity;

    var NumberIdentity = (function (_super) {
        __extends(NumberIdentity, _super);
        function NumberIdentity(value) {
            _super.call(this, value);
        }
        return NumberIdentity;
    })(Identity);
    DDD.NumberIdentity = NumberIdentity;
})(DDD || (DDD = {}));
var DDD;
(function (DDD) {
    var Entity = (function () {
        function Entity(identity) {
            this.identity = identity;
        }
        Entity.prototype.getIdentity = function () {
            return this.identity;
        };

        Entity.prototype.equals = function (that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }
            return this.identity.equals(that.getIdentity());
        };
        return Entity;
    })();
    DDD.Entity = Entity;
})(DDD || (DDD = {}));
var DDD;
(function (DDD) {
    var AsyncRepository = (function () {
        function AsyncRepository(core) {
            this.core = core;
        }
        AsyncRepository.prototype.resolve = function (identity) {
            var _this = this;
            return monapt.future(function (p) {
                p.success(_this.core.resolveOption(identity).get());
            });
        };

        AsyncRepository.prototype.store = function (entity) {
            var _this = this;
            return monapt.future(function (p) {
                p.success(_this.core.store(entity));
            });
        };

        AsyncRepository.prototype.storeList = function (entityList) {
            var _this = this;
            return monapt.future(function (p) {
                p.success(_this.core.storeList(entityList));
            });
        };

        AsyncRepository.prototype.deleteByEntity = function (entity) {
            var _this = this;
            return monapt.future(function (p) {
                _this.core.deleteByEntity(entity);
                p.success(_this);
            });
        };

        AsyncRepository.prototype.deleteByIdentity = function (identity) {
            var _this = this;
            return monapt.future(function (p) {
                _this.core.deleteByIdentity(identity);
                p.success(_this);
            });
        };
        return AsyncRepository;
    })();
    DDD.AsyncRepository = AsyncRepository;
})(DDD || (DDD = {}));
var DDD;
(function (DDD) {
    var OnLocalStorageRepository = (function () {
        function OnLocalStorageRepository(mapper) {
            this.parse = mapper.parse;
            this.stringify = mapper.stringify;
        }
        OnLocalStorageRepository.prototype.resolveOption = function (identity) {
            var entity = this.resolve(identity);
            if (entity != null) {
                return new monapt.Some(entity);
            } else {
                return new monapt.None();
            }
        };

        OnLocalStorageRepository.prototype.resolve = function (identity) {
            var json = JSON.parse(localStorage.getItem(identity.getValue()));
            if (json) {
                return this.parse(json);
            }
            return null;
        };

        OnLocalStorageRepository.prototype.store = function (entity) {
            localStorage.setItem(entity.getIdentity().getValue(), this.stringify(entity));
            return entity;
        };

        OnLocalStorageRepository.prototype.storeList = function (entityList) {
            for (var i in entityList) {
                this.store(entityList[i]);
            }
            return entityList;
        };

        OnLocalStorageRepository.prototype.deleteByEntity = function (entity) {
            this.deleteByIdentity(entity.getIdentity());
            return this;
        };

        OnLocalStorageRepository.prototype.deleteByIdentity = function (identity) {
            localStorage.removeItem(identity.getValue());
            return this;
        };
        return OnLocalStorageRepository;
    })();
    DDD.OnLocalStorageRepository = OnLocalStorageRepository;
})(DDD || (DDD = {}));
var DDD;
(function (DDD) {
    var AsyncOnLocalStorageRepository = (function (_super) {
        __extends(AsyncOnLocalStorageRepository, _super);
        function AsyncOnLocalStorageRepository(mapper) {
            _super.call(this, new DDD.OnLocalStorageRepository(mapper));
        }
        return AsyncOnLocalStorageRepository;
    })(DDD.AsyncRepository);
    DDD.AsyncOnLocalStorageRepository = AsyncOnLocalStorageRepository;
})(DDD || (DDD = {}));
var DDD;
(function (DDD) {
    var OnMemoryRepository = (function () {
        function OnMemoryRepository() {
            this.entities = {};
        }
        OnMemoryRepository.prototype.resolveOption = function (identity) {
            var entity = this.resolve(identity);
            if (entity != null) {
                return new monapt.Some(entity);
            } else {
                return new monapt.None();
            }
        };

        OnMemoryRepository.prototype.resolve = function (identity) {
            return this.entities[identity.getValue()];
        };

        OnMemoryRepository.prototype.store = function (entity) {
            this.entities[entity.getIdentity().getValue()] = entity;
            return entity;
        };

        OnMemoryRepository.prototype.storeList = function (entityList) {
            for (var i in entityList) {
                this.store(entityList[i]);
            }
            return entityList;
        };

        OnMemoryRepository.prototype.deleteByEntity = function (entity) {
            this.deleteByIdentity(entity.getIdentity());
            return this;
        };

        OnMemoryRepository.prototype.deleteByIdentity = function (identity) {
            delete this.entities[identity.getValue()];
            return this;
        };
        return OnMemoryRepository;
    })();
    DDD.OnMemoryRepository = OnMemoryRepository;
})(DDD || (DDD = {}));
var DDD;
(function (DDD) {
    var AsyncOnMemoryRepository = (function (_super) {
        __extends(AsyncOnMemoryRepository, _super);
        function AsyncOnMemoryRepository() {
            _super.call(this, new DDD.OnMemoryRepository());
        }
        return AsyncOnMemoryRepository;
    })(DDD.AsyncRepository);
    DDD.AsyncOnMemoryRepository = AsyncOnMemoryRepository;
})(DDD || (DDD = {}));
var DDD;
(function (DDD) {
    var OnSessionStorageRepository = (function () {
        function OnSessionStorageRepository(mapper) {
            this.parse = mapper.parse;
            this.stringify = mapper.stringify;
        }
        OnSessionStorageRepository.prototype.resolveOption = function (identity) {
            var entity = this.resolve(identity);
            if (entity != null) {
                return new monapt.Some(entity);
            } else {
                return new monapt.None();
            }
        };

        OnSessionStorageRepository.prototype.resolve = function (identity) {
            var item = sessionStorage.getItem(identity.getValue());
            var json = item ? JSON.parse(item) : null;
            return json ? this.parse(json) : null;
        };

        OnSessionStorageRepository.prototype.store = function (entity) {
            sessionStorage.setItem(entity.getIdentity().getValue(), this.stringify(entity));
            return entity;
        };

        OnSessionStorageRepository.prototype.storeList = function (entityList) {
            for (var i in entityList) {
                this.store(entityList[i]);
            }
            return entityList;
        };

        OnSessionStorageRepository.prototype.deleteByEntity = function (entity) {
            this.deleteByIdentity(entity.getIdentity());
            return this;
        };

        OnSessionStorageRepository.prototype.deleteByIdentity = function (identity) {
            sessionStorage.removeItem(identity.getValue());
            return this;
        };
        return OnSessionStorageRepository;
    })();
    DDD.OnSessionStorageRepository = OnSessionStorageRepository;
})(DDD || (DDD = {}));
var DDD;
(function (DDD) {
    var AsyncOnSessionStorageRepository = (function (_super) {
        __extends(AsyncOnSessionStorageRepository, _super);
        function AsyncOnSessionStorageRepository(mapper) {
            _super.call(this, new DDD.OnSessionStorageRepository(mapper));
        }
        return AsyncOnSessionStorageRepository;
    })(DDD.AsyncRepository);
    DDD.AsyncOnSessionStorageRepository = AsyncOnSessionStorageRepository;
})(DDD || (DDD = {}));

/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

;var dateFormat = function () {
  var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMs])\1?|TT|tt|[LloSZ]|"[^"]*"|'[^']*'/g,
    timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
    timezoneClip = /[^-+\dA-Z]/g,
    pad = function (val, len) {
      val = String(val);
      len = len || 2;
      while (val.length < len) val = "0" + val;
      return val;
    };

  // Regexes and supporting functions are cached through closure
  return function (date, mask, utc) {

    var dF = dateFormat;

    // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
    if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
      mask = date;
      date = undefined;
    }

    date = date || new Date;

        if(!(date instanceof Date)) {
          date = new Date(date);
        }

        if (isNaN(date)) {
          throw TypeError("Invalid date");
        }

    mask = String(dF.masks[mask] || mask || dF.masks["default"]);

    // Allow setting the utc argument via the mask
    if (mask.slice(0, 4) == "UTC:") {
      mask = mask.slice(4);
      utc = true;
    }

        if (!dF.i18n.initialized) {
            dF.initLocale();
        }

    var _ = utc ? "getUTC" : "get",
      d = date[_ + "Date"](),
      D = date[_ + "Day"](),
      m = date[_ + "Month"](),
      y = date[_ + "FullYear"](),
      H = date[_ + "Hours"](),
      M = date[_ + "Minutes"](),
      s = date[_ + "Seconds"](),
      L = date[_ + "Milliseconds"](),
      o = utc ? 0 : date.getTimezoneOffset(),
      flags = {
        d:    d,
        dd:   pad(d),
        ddd:  dF.i18n.dayNames[D],
        dddd: dF.i18n.dayNames[D + 7],
        m:    m + 1,
        mm:   pad(m + 1),
        mmm:  dF.i18n.monthNames[m],
        mmmm: dF.i18n.monthNames[m + 12],
        yy:   String(y).slice(2),
        yyyy: y,
        h:    H % 12 || 12,
        hh:   pad(H % 12 || 12),
        H:    H,
        HH:   pad(H),
        M:    M,
        MM:   pad(M),
        s:    s,
        ss:   pad(s),
        l:    pad(L, 3),
        L:    pad(L > 99 ? Math.round(L / 10) : L),
        //t:    H < 12 ? dF.i18n.amPmNames.am : dF.i18n.amPmNames.pm,
        tt:   H < 12 ? dF.i18n.amPmNames.am : dF.i18n.amPmNames.pm,
        //T:    H < 12 ? dF.i18n.amPmNames.am : dF.i18n.amPmNames.pm,
        TT:   H < 12 ? dF.i18n.amPmNames.am : dF.i18n.amPmNames.pm,
        Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
        o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
        S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
      };

    return mask.replace(token, function ($0) {
      return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
    });
  };
}();

// Some common format strings
dateFormat.masks = {
  "default":      "ddd mmm dd yyyy HH:MM:ss",
  shortDate:      "m/d/yy",
  mediumDate:     "mmm d, yyyy",
  longDate:       "mmmm d, yyyy",
  fullDate:       "dddd, mmmm d, yyyy",
  shortTime:      "h:MM TT",
  mediumTime:     "h:MM:ss TT",
  longTime:       "h:MM:ss TT Z",
  isoDate:        "yyyy-mm-dd",
  isoTime:        "HH:MM:ss",
  isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
  isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

;
(function jqdeferred(jQuery) {
  var extend = function (obj, base) {
    for (var k in obj) {
      base[k] = obj[k]
    }
  }

  // String to Object flags format cache
  var flagsCache = {},

  // Matches dashed string for camelizing
  rdashAlpha = /-([a-z]|[0-9])/ig,
  // Used by jQuery.camelCase as callback to replace()
  fcamelCase = function( all, letter ) {
    return ( letter + "" ).toUpperCase();
  },

  // Keep a UserAgent string for use with jQuery.browser
  userAgent = navigator.userAgent,

  // For matching the engine and version of the browser
  browserMatch,

  // The deferred used on DOM ready
  readyList,

  // The ready event handler
  DOMContentLoaded,

  // Save a reference to some core methods
  toString = Object.prototype.toString,
  hasOwn = Object.prototype.hasOwnProperty,
  push = Array.prototype.push,
  slice = Array.prototype.slice,
  trim = String.prototype.trim,
  indexOf = Array.prototype.indexOf,

  // [[Class]] -> type pairs
  class2type = {};

  // Convert String-formatted flags into Object-formatted ones and store in cache
  function createFlags( flags ) {
    var object = flagsCache[ flags ] = {},
      i, length;
    flags = flags.split( /\s+/ );
    for ( i = 0, length = flags.length; i < length; i++ ) {
      object[ flags[i] ] = true;
    }
    return object;
  }



  // Populate the class2type map
  jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase();
  });


  var // Static reference to slice
        sliceDeferred = [].slice;
  extend({
    Deferred: function( func ) {
      var doneList = jQuery.Callbacks( "once memory" ),
        failList = jQuery.Callbacks( "once memory" ),
        progressList = jQuery.Callbacks( "memory" ),
        state = "pending",
        lists = {
          resolve: doneList,
          reject: failList,
          notify: progressList
        },
        promise = {
          done: doneList.add,
          fail: failList.add,
          progress: progressList.add,

          state: function() {
            return state;
          },

          // Deprecated
          isResolved: doneList.fired,
          isRejected: failList.fired,

          then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
            deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
            return this;
          },
          always: function() {
            deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
            return this;
          },
          pipe: function( fnDone, fnFail, fnProgress ) {
            return jQuery.Deferred(function( newDefer ) {
              jQuery.each( {
                done: [ fnDone, "resolve" ],
                fail: [ fnFail, "reject" ],
                progress: [ fnProgress, "notify" ]
              }, function( handler, data ) {
                var fn = data[ 0 ],
                  action = data[ 1 ],
                  returned;
                if ( jQuery.isFunction( fn ) ) {
                  deferred[ handler ](function() {
                    returned = fn.apply( this, arguments );
                    if ( returned && jQuery.isFunction( returned.promise ) ) {
                      returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
                    } else {
                      newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
                    }
                  });
                } else {
                  deferred[ handler ]( newDefer[ action ] );
                }
              });
            }).promise();
          },
          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function( obj ) {
            if ( obj == null ) {
              obj = promise;
            } else {
              for ( var key in promise ) {
                obj[ key ] = promise[ key ];
              }
            }
            return obj;
          }
        },
        deferred = promise.promise({}),
        key;

      for ( key in lists ) {
        deferred[ key ] = lists[ key ].fire;
        deferred[ key + "With" ] = lists[ key ].fireWith;
      }

      // Handle state
      deferred.done( function() {
        state = "resolved";
      }, failList.disable, progressList.lock ).fail( function() {
        state = "rejected";
      }, doneList.disable, progressList.lock );

      // Call given func if any
      if ( func ) {
        func.call( deferred, deferred );
      }

      // All done!
      return deferred;
    },

    // Deferred helper
    when: function( firstParam ) {
      var args = sliceDeferred.call( arguments, 0 ),
        i = 0,
        length = args.length,
        pValues = new Array( length ),
        count = length,
        pCount = length,
        deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
          firstParam :
          jQuery.Deferred(),
        promise = deferred.promise();
      function resolveFunc( i ) {
        return function( value ) {
          args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
          if ( !( --count ) ) {
            deferred.resolveWith( deferred, args );
          }
        };
      }
      function progressFunc( i ) {
        return function( value ) {
          pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
          deferred.notifyWith( promise, pValues );
        };
      }
      if ( length > 1 ) {
        for ( ; i < length; i++ ) {
          if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
            args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
          } else {
            --count;
          }
        }
        if ( !count ) {
          deferred.resolveWith( deferred, args );
        }
      } else if ( deferred !== firstParam ) {
        deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
      }
      return promise;
    },
  /*
   * Create a callback list using the following parameters:
   *
   *  flags:  an optional list of space-separated flags that will change how
   *      the callback list behaves
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible flags:
   *
   *  once:     will ensure the callback list can only be fired once (like a Deferred)
   *
   *  memory:     will keep track of previous values and will call any callback added
   *          after the list has been fired right away with the latest "memorized"
   *          values (like a Deferred)
   *
   *  unique:     will ensure a callback can only be added once (no duplicate in the list)
   *
   *  stopOnFalse:  interrupt callings when a callback returns false
   *
   */
    Callbacks: function( flags ) {

      // Convert flags from String-formatted to Object-formatted
      // (we check in cache first)
      flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};

      var // Actual callback list
        list = [],
        // Stack of fire calls for repeatable lists
        stack = [],
        // Last fire value (for non-forgettable lists)
        memory,
        // Flag to know if list is currently firing
        firing,
        // First callback to fire (used internally by add and fireWith)
        firingStart,
        // End of the loop when firing
        firingLength,
        // Index of currently firing callback (modified by remove if needed)
        firingIndex,
        // Add one or several callbacks to the list
        add = function( args ) {
          var i,
            length,
            elem,
            type,
            actual;
          for ( i = 0, length = args.length; i < length; i++ ) {
            elem = args[ i ];
            type = jQuery.type( elem );
            if ( type === "array" ) {
              // Inspect recursively
              add( elem );
            } else if ( type === "function" ) {
              // Add if not in unique mode and callback is not in
              if ( !flags.unique || !self.has( elem ) ) {
                list.push( elem );
              }
            }
          }
        },
        // Fire callbacks
        fire = function( context, args ) {
          args = args || [];
          memory = !flags.memory || [ context, args ];
          firing = true;
          firingIndex = firingStart || 0;
          firingStart = 0;
          firingLength = list.length;
          for ( ; list && firingIndex < firingLength; firingIndex++ ) {
            if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
              memory = true; // Mark as halted
              break;
            }
          }
          firing = false;
          if ( list ) {
            if ( !flags.once ) {
              if ( stack && stack.length ) {
                memory = stack.shift();
                self.fireWith( memory[ 0 ], memory[ 1 ] );
              }
            } else if ( memory === true ) {
              self.disable();
            } else {
              list = [];
            }
          }
        },
        // Actual Callbacks object
        self = {
          // Add a callback or a collection of callbacks to the list
          add: function() {
            if ( list ) {
              var length = list.length;
              add( arguments );
              // Do we need to add the callbacks to the
              // current firing batch?
              if ( firing ) {
                firingLength = list.length;
              // With memory, if we're not firing then
              // we should call right away, unless previous
              // firing was halted (stopOnFalse)
              } else if ( memory && memory !== true ) {
                firingStart = length;
                fire( memory[ 0 ], memory[ 1 ] );
              }
            }
            return this;
          },
          // Remove a callback from the list
          remove: function() {
            if ( list ) {
              var args = arguments,
                argIndex = 0,
                argLength = args.length;
              for ( ; argIndex < argLength ; argIndex++ ) {
                for ( var i = 0; i < list.length; i++ ) {
                  if ( args[ argIndex ] === list[ i ] ) {
                    // Handle firingIndex and firingLength
                    if ( firing ) {
                      if ( i <= firingLength ) {
                        firingLength--;
                        if ( i <= firingIndex ) {
                          firingIndex--;
                        }
                      }
                    }
                    // Remove the element
                    list.splice( i--, 1 );
                    // If we have some unicity property then
                    // we only need to do this once
                    if ( flags.unique ) {
                      break;
                    }
                  }
                }
              }
            }
            return this;
          },
          // Control if a given callback is in the list
          has: function( fn ) {
            if ( list ) {
              var i = 0,
                length = list.length;
              for ( ; i < length; i++ ) {
                if ( fn === list[ i ] ) {
                  return true;
                }
              }
            }
            return false;
          },
          // Remove all callbacks from the list
          empty: function() {
            list = [];
            return this;
          },
          // Have the list do nothing anymore
          disable: function() {
            list = stack = memory = undefined;
            return this;
          },
          // Is it disabled?
          disabled: function() {
            return !list;
          },
          // Lock the list in its current state
          lock: function() {
            stack = undefined;
            if ( !memory || memory === true ) {
              self.disable();
            }
            return this;
          },
          // Is it locked?
          locked: function() {
            return !stack;
          },
          // Call all callbacks with the given context and arguments
          fireWith: function( context, args ) {
            if ( stack ) {
              if ( firing ) {
                if ( !flags.once ) {
                  stack.push( [ context, args ] );
                }
              } else if ( !( flags.once && memory ) ) {
                fire( context, args );
              }
            }
            return this;
          },
          // Call all the callbacks with the given arguments
          fire: function() {
            self.fireWith( this, arguments );
            return this;
          },
          // To know if the callbacks have already been called at least once
          fired: function() {
            return !!memory;
          }
        };

      return self;
    },

    type: function( obj ) {
      return obj == null ?
        String( obj ) :
        class2type[ toString.call(obj) ] || "object";
    },
  // Convert dashed to camelCase; used by the css and data modules
  camelCase: function( string ) {
    return string.replace( rdashAlpha, fcamelCase );
  }
  }, jQuery);

  // replace $.ajax with deferred one
  var __ajax = jQuery.ajax;

  jQuery.ajax = function (opts) {
    return jQuery.Deferred(function (d) {
       var xhr = null;
       var settings = {
         success: function (success, statusText, jqXHR) {
            if (opts.success && opts.success instanceof Function) {
                opts.success.apply(xhr, [success, statusText, jqXHR]);
            }
            d.resolve(success, statusText, jqXHR);
         },
         error: function (jqXHR, statusText, error) {
            if (opts.error && opts.error instanceof Function) {
                opts.error.apply(xhr, [jqXHR, statusText, error]);
            }
            d.reject(jqXHR, statusText, error);
         }
       };
       for (var k in opts) {
         if (!(k in settings)) {
            settings[k] = opts[k]
         }
       }

       $.ajaxSettings.beforeSend = function (xhr) {
         if (opts.xhrFields) {
           for (name in opts.xhrFields) {
             xhr[name] = opts.xhrFields[name];
           }
         }
       }
       xhr = __ajax.call(jQuery, settings);
    })
  }

})(Zepto);


// Zepto complements
if (!$.fn.fadeToggle) {
    $.fn.fadeToggle = $.fn.toggle
}


// Generated by CoffeeScript 1.6.2
(function() {
  (function(exports) {
    var FULLSIZE_CHAR_OF_NUMBER, LOCALE, TIMEZONE_OFFSET, dateformat, format, resource_;

    LOCALE = 'en-Latn-US';
    TIMEZONE_OFFSET = 0;
    exports.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      if (options.defaultLocale != null) {
        LOCALE = options.defaultLocale;
      }
      if (options.defaultTimezoneOffset != null) {
        return TIMEZONE_OFFSET = options.defaultTimezoneOffset;
      }
    };
    dateformat = function() {
      var me;

      me = arguments.callee;
      if (!me.dateformat) {
        me.dateformat = dateFormat;
      }
      return me.dateformat;
    };
    resource_ = {};
    exports.locale = function(value) {
      var _ref;

      if (value == null) {
        return (_ref = this.locale_) != null ? _ref : LOCALE;
      }
      this.locale_ = value;
      return this;
    };
    exports.timezoneOffset = function(value) {
      var _ref;

      if (value == null) {
        return (_ref = this.timezoneOffset_) != null ? _ref : TIMEZONE_OFFSET;
      }
      this.timezoneOffset_ = value;
      return this;
    };
    exports.getDateInCurrentTimezone = function(ts) {
      var currentTimezoneOffset, localTimezoneOffset, mills;

      localTimezoneOffset = new Date().getTimezoneOffset() * 60 * 1000;
      currentTimezoneOffset = exports.timezoneOffset() * 60 * 1000;
      mills = (ts * 1000) + localTimezoneOffset - currentTimezoneOffset;
      return new Date(mills);
    };
    exports.addResource = function(res, ns, isDefault) {
      if (res == null) {
        res = {};
      }
      if (ns == null) {
        ns = 'default';
      }
      if (isDefault == null) {
        isDefault = false;
      }
      if (resource_ == null) {
        resource_ = {};
      }
      if ((resource_['default'] == null) || isDefault) {
        resource_['default'] = res;
      }
      return resource_[ns] = res;
    };
    exports.getResource = function(key, ns, plural) {
      var k, pk, pluralType;

      if (key == null) {
        key = void 0;
      }
      if (ns == null) {
        ns = 'default';
      }
      if (plural == null) {
        plural = void 0;
      }
      if (resource_[ns] == null) {
        return '';
      }
      if (key == null) {
        return resource_[ns];
      }
      k = key;
      if (plural != null) {
        pluralType = exports.getPluralType(plural);
        pk = pluralType === '' ? key : [key, pluralType].join('_');
        if (resource_[ns][pk] != null) {
          k = pk;
        }
      }
      if (resource_[ns][k] == null) {
        return '';
      }
      return resource_[ns][k];
    };
    exports.getPluralType = function(num) {
      var locale, mod10, mod100, suffix;

      locale = exports.locale();
      num = parseInt(num);
      mod100 = num % 100;
      mod10 = num % 10;
      suffix = '';
      if (num === 0) {
        suffix = 'zero';
      }
      switch (locale) {
        case 'ar-Arab-SA':
          if (num === 1) {
            suffix = 'one';
          } else if (num === 2) {
            suffix = 'two';
          } else if (mod100 >= 3 && mod100 <= 10) {
            suffix = 'few';
          } else if (mod100 >= 11 && mod100 <= 99) {
            suffix = 'many';
          } else {
            suffix = 'other';
          }
          break;
        case 'de-Latn-DE':
        case 'en-Latn-US':
        case 'en-Latn-ES':
        case 'it-Latn-IT':
        case 'pt-Latn-BR':
          if (num === 1) {
            suffix = 'one';
          } else {
            suffix = 'other';
          }
          break;
        case 'fr-Latn-FR':
          if (num < 2) {
            suffix = 'one';
          } else {
            suffix = 'other';
          }
          break;
        case 'ru-Cyrl-RU':
          if (mod10 === 1 && mod100 !== 11) {
            suffix = 'one';
          } else if (mod10 >= 2 && mod10 <= 4 && mod100 !== 12 && mod100 !== 14 && mod100 !== 13) {
            suffix = 'few';
          } else if (mod10 === 0 || (mod10 <= 9 && mod10 >= 5) || (mod100 <= 14 && mod100 >= 11)) {
            suffix = 'many';
          } else {
            suffix = 'other';
          }
          break;
        case 'th-Thai-TH':
        case 'tr-Latn-TR':
        case 'zh-Hans-CN':
        case 'zh-Hant-TW':
        case 'ja-Jpan-JP':
        case 'id-Latn-ID':
        case 'ko-Hang-KR':
          if (num > 1) {
            suffix = 'one';
          } else {
            suffix = 'other';
          }
      }
      return suffix;
    };
    FULLSIZE_CHAR_OF_NUMBER = ['０', '１', '２', '３', '４', '５', '６', '７', '８', '９'];
    exports.text = function(key, args, plural, ns) {
      var i, k, message, v;

      if (args == null) {
        args = [];
      }
      if (plural == null) {
        plural = void 0;
      }
      if (ns == null) {
        ns = 'default';
      }
      if (plural === void 0) {
        i = 0;
        for (k in args) {
          v = args[k];
          if (!(v != null)) {
            continue;
          }
          if (((typeof v) === 'number' || (v instanceof Number)) || (typeof v.match === "function" ? v.match(/^\d+$/) : void 0)) {
            plural = v;
            break;
          }
        }
      }
      message = exports.getResource(key, ns, plural);
      if ((args != null ? args.length : void 0) > 0) {
        message = format(message, args);
      }
      return message;
    };
    exports.language = function(languageCode) {
      if (languageCode == null) {
        languageCode = void 0;
      }
      return exports.getResource(languageCode, 'language');
    };
    exports.region = function(regionCode) {
      return exports.getResource(regionCode, 'region');
    };
    exports.subregion = function(regionCode, subregionCode) {
      var subregions;

      if (subregionCode == null) {
        subregionCode = void 0;
      }
      subregions = exports.getResource(regionCode, 'subregion');
      if (subregionCode == null) {
        return subregions;
      }
      if (subregions[subregionCode] == null) {
        return '';
      }
      return subregions[subregionCode];
    };
    exports.timezone = function(timezoneCode, format) {
      var name, offset, offset_h, offset_m, sign, timezone;

      if (format == null) {
        format = true;
      }
      timezone = exports.getResource(timezoneCode, 'timezone');
      if (timezone === '') {
        return '-';
      }
      if (!format) {
        return timezone;
      }
      name = timezone.name;
      offset = timezone.offset;
      offset_h = (offset / 60) >> 0;
      offset_m = (offset % 60) >> 0;
      if (offset_m < 0) {
        offset_m = offset_m * -1;
      }
      offset_m = offset_m < 10 ? '0' + offset_m : offset_m;
      sign = offset < 0 ? '' : '+';
      return '(UTC ' + sign + offset_h + ':' + offset_m + ') ' + name;
    };
    exports.datetime = function(ts, format) {
      var local, localOffset, mills, targetOffset;

      if (format == null) {
        format = exports.text('common.dateformat');
      }
      local = new Date(ts * 1000);
      localOffset = local.getTimezoneOffset() * 60 * 1000;
      targetOffset = exports.timezoneOffset() * 60 * 1000;
      mills = (ts * 1000) + localOffset - targetOffset;
      return dateformat()(new Date(mills), format);
    };
    return format = function(f, args) {
      return f.replace(/\{(\d)\}/g, function(m, c) {
        if (args[parseInt(c)] != null) {
          return args[parseInt(c)];
        } else {
          return '';
        }
      });
    };
  })(window.i18n || (window.i18n = {}));

  dateFormat.i18n = {
    initialized: false
  };

  dateFormat.initLocale = function() {
    var i18nTexts, p18n;

    p18n = window.i18n;
    i18nTexts = function(prefix, list) {
      return _.map(list, function(v) {
        return p18n.text(prefix + v);
      });
    };
    this.i18n.dayNames = i18nTexts('common.day_', ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']);
    this.i18n.monthNames = i18nTexts('common.month_', ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec', 'january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']);
    this.i18n.amPmNames = {
      "am": p18n.text('common.am'),
      "pm": p18n.text('common.pm')
    };
    return this.i18n.initialized = true;
  };

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  (function(exports) {
    var getAnchorTag, getImgTag, parseURL;
    parseURL = function(url) {
      var parser;
      parser = document.createElement('a');
      parser.href = url;
      return parser;
    };
    exports.anchorize = function() {
      var a_tag, app_info, args, contents, converted_contents, href_pos, i, img_tag, len, m, params, src_pos, start_pos, unescaped_url, url, url_pos;
      contents = arguments[0], params = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      app_info = typeof args[0] !== 'undefined' ? args[0] : false;
      m = contents.match(/(https?:\/\/[a-zA-Z0-9\._\/~%\-\+&\#\?!=\(\)@;]+)/g);
      if (m == null) {
        return contents;
      }
      start_pos = 0;
      converted_contents = '';
      for (i = 0, len = m.length; i < len; i++) {
        url = m[i];
        unescaped_url = $('<span />').html(url).text();
        url_pos = contents.indexOf(url, start_pos);
        href_pos = contents.lastIndexOf('href=', url_pos);
        src_pos = contents.lastIndexOf('src=', url_pos);
        a_tag = getAnchorTag(contents, start_pos);
        img_tag = getImgTag(contents, start_pos);
        if (href_pos > 0 && start_pos < href_pos && a_tag !== null) {
          converted_contents += contents.substr(start_pos, a_tag.open.pos - start_pos);
          converted_contents += "<a href=\"" + url + "\" class=\"lnk\">" + a_tag.contents + "</a>";

          /*
          if url.indexOf(proton.bootstrap.config().domains.sns) is 0
            params = {}
            parsed = parseURL unescaped_url
            params = proton.history.hash.toObject parsed.hash if parsed.hash?
            params.view = proton.controller.defaultView().name_ unless params.view?
            converted_contents += touch.create touch.TOUCHAREA, a_tag.contents, params
          else
            converted_contents += touch.create touch.LINK, a_tag.contents, { url:unescaped_url, class:"link", app_info:app_info }
           */
          start_pos = a_tag.close.end_pos + 1;
        } else if (src_pos > 0 && start_pos < src_pos && img_tag !== null) {
          if (start_pos <= img_tag.pos && url_pos < img_tag.end_pos) {
            converted_contents += contents.substr(start_pos, img_tag.end_pos - start_pos + 1);
            start_pos = img_tag.end_pos + 1;
          } else {
            converted_contents += contents.substr(start_pos, url.length);
            start_pos = url_pos + url.length;
          }
        } else if (start_pos <= url_pos) {
          converted_contents += contents.substr(start_pos, url_pos - start_pos);
          converted_contents += "<a href=\"" + url + "\" class=\"lnk\">" + url + "</a>";
          start_pos = url_pos + url.length;
        }
      }
      converted_contents += contents.substr(start_pos, contents.length - start_pos);
      return converted_contents;
    };
    getAnchorTag = function(contents, start_pos) {
      var tag;
      tag = {};
      tag.open = {};
      tag.open.pos = contents.indexOf('<a ', start_pos);
      tag.open.end_pos = contents.indexOf('>', tag.open.pos);
      if (tag.open.pos === -1 || tag.open.end_pos === -1) {
        return null;
      }
      tag.close = {};
      tag.close.pos = contents.indexOf('</a', tag.open.end_pos);
      tag.close.end_pos = contents.indexOf('>', tag.close.pos);
      if (tag.close.pos === -1 || tag.close.end_pos === -1) {
        return null;
      }
      tag.contents = contents.substr(tag.open.end_pos + 1, tag.close.pos - tag.open.end_pos - 1);
      return tag;
    };
    return getImgTag = function(contents, start_pos) {
      var tag;
      tag = {};
      tag.pos = contents.indexOf('<img ', start_pos);
      tag.end_pos = contents.indexOf('>', tag.pos);
      if (tag.pos === -1 || tag.end_pos === -1) {
        return null;
      }
      return tag;
    };
  })(window.sns || (window.sns = {}));

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(exports) {
    var buildUrl, filterParams, serialize;
    exports.Beacon = (function() {
      Beacon.beacons = {};

      Beacon.create = function(params, id) {
        var b;
        if (!id) {
          id = _.uniqueId();
        }
        b = this.find(id);
        if (!b) {
          b = new this(id);
        }
        if (params != null) {
          b.addParams(params);
        }
        this.beacons[id] = b;
        return b;
      };

      Beacon.find = function(id) {
        return this.beacons[id];
      };

      Beacon.destory = function(id) {
        delete this.beacons[id];
      };

      Beacon.update = function(beacon) {
        this.beacons[beacon.id] = beacon;
      };

      Beacon.prototype.flushed = false;

      function Beacon(id) {
        if (!id) {
          throw new Error("id is wrong: " + id);
        }
        this.id = id;
        this.params = {};
        this.setHost(SNS.Config.getBeaconDomain());
      }

      Beacon.prototype.setHost = function(hostName) {
        this.host = hostName;
        this.constructor.update(this);
        return this;
      };

      Beacon.prototype.setGif = function(gif) {
        this.gif = gif;
        this.constructor.update(this);
        return this;
      };

      Beacon.prototype.setEventTimestamp = function() {
        return this.addParams({
          t: Math.floor((new Date).getTime() / 1000)
        });
      };

      Beacon.prototype.addParams = function(params) {
        if (!_.isObject(params)) {
          throw new Error('params is not a object');
        }
        params = filterParams(params);
        this.params = _.defaults(params, this.params);
        this.constructor.update(this);
        return this;
      };

      Beacon.prototype.flush = function() {
        if (!this.host) {
          throw new Error("host name is invalid: " + this.host);
        }
        if (!this.gif) {
          throw new Error("gif name is invalid: " + this.gif);
        }
        this.url = buildUrl("" + this.host + this.gif, this.params);
        this.img = new Image;
        this.img.src = this.url;
        this.flushed = true;
        this.constructor.destory(this.id);
        return this;
      };

      Beacon.prototype.onComplete = function(callback) {
        this.img.onload = callback;
        this.img.onerror = callback;
        return this;
      };

      return Beacon;

    })();
    filterParams = function(params) {
      var keys;
      keys = _.filter(_.keys(params), function(key) {
        return _.isString(params[key]) || _.isBoolean(params[key]) || _.isNumber(params[key]);
      });
      return _.pick(params, keys);
    };
    buildUrl = function(url, params) {
      return "" + url + "?" + (serialize(params));
    };
    serialize = function(params) {
      return _.map(params, function(value, key) {
        return "" + key + "=" + (encodeURIComponent(value));
      }).join('&');
    };
    exports.PFBeacon = (function(_super) {
      __extends(PFBeacon, _super);

      function PFBeacon(id) {
        PFBeacon.__super__.constructor.call(this, id);
        this.setHost(SNS.Config.getPfBeaconDomain());
        this.setEventTimestamp();
      }

      PFBeacon.prototype.setEventTimestamp = function() {
        var d, timestamp;
        d = new Date();
        timestamp = Math.floor(d.getTime() / 1000);
        timestamp = timestamp + d.getTimezoneOffset() * 60;
        return this.addParams({
          t: timestamp
        });
      };

      return PFBeacon;

    })(exports.Beacon);
    exports.AnalyticsBeacon = (function(_super) {
      var ANALYTICS_BEACON_SERVICE_ID;

      __extends(AnalyticsBeacon, _super);

      ANALYTICS_BEACON_SERVICE_ID = 'ggpsns';

      function AnalyticsBeacon(id) {
        AnalyticsBeacon.__super__.constructor.call(this, id);
        this.setGif('a/trk.gif');
        this.addParams({
          s: ANALYTICS_BEACON_SERVICE_ID
        });
        this.serviceParams = {};
      }

      AnalyticsBeacon.prototype.addServiceParams = function(params) {
        params = filterParams(params);
        this.serviceParams = _.defaults(params, this.serviceParams);
        this.addParams({
          q: serialize(this.serviceParams)
        });
        return this;
      };

      return AnalyticsBeacon;

    })(exports.PFBeacon);
    return exports.AnnounceImpBeacon = (function(_super) {
      __extends(AnnounceImpBeacon, _super);

      function AnnounceImpBeacon(id) {
        AnnounceImpBeacon.__super__.constructor.call(this, id);
        this.setGif('i/trk.gif');
      }

      return AnnounceImpBeacon;

    })(exports.PFBeacon);
  })(window.analytics || (window.analytics = {}));

}).call(this);

/*!
 * imagesLoaded PACKAGED v3.1.8
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

(function(){function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,o=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if("object"==typeof e){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;e.length>t;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),o="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===t(r[i],n)&&r[i].push(o?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;e.length>t;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,o=this.getListenersAsObject(e);for(r in o)o.hasOwnProperty(r)&&(i=t(o[r],n),-1!==i&&o[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,o=e?this.removeListener:this.addListener,s=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)o.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?o.call(this,i,r):s.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if("object"===n)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,o,s=this.getListenersAsObject(e);for(r in s)if(s.hasOwnProperty(r))for(i=s[r].length;i--;)n=s[r][i],n.once===!0&&this.removeListener(e,n.listener),o=n.listener.apply(this,t||[]),o===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=o,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:this.EventEmitter=e}).call(this),function(e){function t(t){var n=e.event;return n.target=n.target||n.srcElement||t,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(e,t,n){e.addEventListener(t,n,!1)}:n.attachEvent&&(i=function(e,n,i){e[n+i]=i.handleEvent?function(){var n=t(e);i.handleEvent.call(i,n)}:function(){var n=t(e);i.call(e,n)},e.attachEvent("on"+n,e[n+i])});var r=function(){};n.removeEventListener?r=function(e,t,n){e.removeEventListener(t,n,!1)}:n.detachEvent&&(r=function(e,t,n){e.detachEvent("on"+t,e[t+n]);try{delete e[t+n]}catch(i){e[t+n]=void 0}});var o={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",o):e.eventie=o}(this),function(e,t){"function"==typeof define&&define.amd?define(["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("wolfy87-eventemitter"),require("eventie")):e.imagesLoaded=t(e,e.EventEmitter,e.eventie)}(window,function(e,t,n){function i(e,t){for(var n in t)e[n]=t[n];return e}function r(e){return"[object Array]"===d.call(e)}function o(e){var t=[];if(r(e))t=e;else if("number"==typeof e.length)for(var n=0,i=e.length;i>n;n++)t.push(e[n]);else t.push(e);return t}function s(e,t,n){if(!(this instanceof s))return new s(e,t);"string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=o(e),this.options=i({},this.options),"function"==typeof t?n=t:i(this.options,t),n&&this.on("always",n),this.getImages(),a&&(this.jqDeferred=new a.Deferred);var r=this;setTimeout(function(){r.check()})}function f(e){this.img=e}function c(e){this.src=e,v[e]=this}var a=e.jQuery,u=e.console,h=u!==void 0,d=Object.prototype.toString;s.prototype=new t,s.prototype.options={},s.prototype.getImages=function(){this.images=[];for(var e=0,t=this.elements.length;t>e;e++){var n=this.elements[e];"IMG"===n.nodeName&&this.addImage(n);var i=n.nodeType;if(i&&(1===i||9===i||11===i))for(var r=n.querySelectorAll("img"),o=0,s=r.length;s>o;o++){var f=r[o];this.addImage(f)}}},s.prototype.addImage=function(e){var t=new f(e);this.images.push(t)},s.prototype.check=function(){function e(e,r){return t.options.debug&&h&&u.log("confirm",e,r),t.progress(e),n++,n===i&&t.complete(),!0}var t=this,n=0,i=this.images.length;if(this.hasAnyBroken=!1,!i)return this.complete(),void 0;for(var r=0;i>r;r++){var o=this.images[r];o.on("confirm",e),o.check()}},s.prototype.progress=function(e){this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded;var t=this;setTimeout(function(){t.emit("progress",t,e),t.jqDeferred&&t.jqDeferred.notify&&t.jqDeferred.notify(t,e)})},s.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";this.isComplete=!0;var t=this;setTimeout(function(){if(t.emit(e,t),t.emit("always",t),t.jqDeferred){var n=t.hasAnyBroken?"reject":"resolve";t.jqDeferred[n](t)}})},a&&(a.fn.imagesLoaded=function(e,t){var n=new s(this,e,t);return n.jqDeferred.promise(a(this))}),f.prototype=new t,f.prototype.check=function(){var e=v[this.img.src]||new c(this.img.src);if(e.isConfirmed)return this.confirm(e.isLoaded,"cached was confirmed"),void 0;if(this.img.complete&&void 0!==this.img.naturalWidth)return this.confirm(0!==this.img.naturalWidth,"naturalWidth"),void 0;var t=this;e.on("confirm",function(e,n){return t.confirm(e.isLoaded,n),!0}),e.check()},f.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("confirm",this,t)};var v={};return c.prototype=new t,c.prototype.check=function(){if(!this.isChecked){var e=new Image;n.bind(e,"load",this),n.bind(e,"error",this),e.src=this.src,this.isChecked=!0}},c.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},c.prototype.onload=function(e){this.confirm(!0,"onload"),this.unbindProxyEvents(e)},c.prototype.onerror=function(e){this.confirm(!1,"onerror"),this.unbindProxyEvents(e)},c.prototype.confirm=function(e,t){this.isConfirmed=!0,this.isLoaded=e,this.emit("confirm",this,t)},c.prototype.unbindProxyEvents=function(e){n.unbind(e.target,"load",this),n.unbind(e.target,"error",this)},s});
var Gryfon;
(function (Gryfon) {
    Gryfon.ConfigAccessor = null;
})(Gryfon || (Gryfon = {}));
var Blitz;
(function (Blitz) {
    (function (Language) {
        Language.getMessage = function (key, options, escape) {
            return _getMessage(getResource(key), options, escape);
        };

        function _setResource(testResource) {
            resource = testResource;
            throw new Error("Don't call this(for unit test)");
        }
        Language._setResource = _setResource;

        function _getMessage(resource, options, escape) {
            var result = (options == undefined) ? resource : format(resource, options, escape);

            return (result != undefined) ? result : '';
        }

        function getResource(key) {
            var res = _getResource(key);
            if (res !== undefined) {
                return res;
            }

            return '';
        }

        function _getResource(key) {
            if (resource[key]) {
                return resource[key];
            }
            if (i18n.getResource(key)) {
                return i18n.getResource(key);
            }
            return undefined;
        }

        function format(message, options, escape) {
            if (!_.isArray(options) && !_.isObject(options)) {
                return message;
            }
            return message.replace(/\{(\w+)\}/g, function (all, idx) {
                if (_.isNumber(options[idx])) {
                    return options[idx];
                }
                if (_.isUndefined(escape) || escape === true) {
                    return Util.String.escapeSpecialChars(options[idx]);
                }
                return options[idx];
            });
        }

        var resource = {
            "chat.back": "戻る",
            "chat.ok": "OK",
            "chat.complete": "完了",
            "chat.confirm": "確認",
            "chat.detail": "詳細",
            "chat.yes": "はい",
            "chat.no": "いいえ",
            "chat.save": "保存する",
            "chat.save_succeed": "保存されました。",
            "chat.save_failed": "保存に失敗しました。もう一度実行するか、時間をおいて再度お試しください。",
            "chat.settings": "設定",
            "chat.chat_list_name": "チャットリスト",
            "chat.chat_hidden_list_name": "非表示チャット",
            "chat.tab_conversation_list": "チャット",
            "chat.tab_contact_list": "友だち",
            "chat.tab_gree_chat": "GREEチャット",
            "chat.tab_game_chat": "ゲームチャット",
            "chat.create_conversation": "新しいチャットを始める",
            "chat.filter_by_name": "名前で絞り込む",
            "chat.contact_list_label_new_contacts": "新しい友だち",
            "chat.contact_list_label_contacts": "友だち",
            "chat.member_select_title": "メンバーを選ぶ",
            "chat.dialog_content_member_select_max_member_num": "最大参加人数を超えています。グループチャットは最大{0}人まで参加できます。",
            "chat.dialog_content_member_select_penalty": "利用規約で禁止している行為が確認できましたため、一部サービスのご利用を制限させていただきました。",
            "chat.conversation_send": "送信",
            "chat.conversation_send_with_consent": "同意して送信",
            "chat.conversation_load_history": "以前のメッセージを読む",
            "chat.conversation_event_leave_member": "{0} さんが退室しました",
            "chat.send_moderation_consent": "<a href=\"{url}\" class=\"lnk\">同意事項</a>に同意した上で送信してください。GREEはメッセージの内容を確認する場合があります。",
            "chat.send_moderation_consent_short": "送信にあたり、<a href=\"{url}\" class=\"lnk\">同意事項</a>に同意の上送信してください。",
            "chat.send_moderation_consent_long": "健全性維持のためGREEにてメッセージの内容を確認する場合があります。送信にあたり、<a href=\"{url}\" class=\"lnk\">同意事項</a>に同意の上送信してください。",
            "chat.error_send_filtered": "不適切な文言が含まれる可能性があるため送信できません。",
            "chat.error_send_penalty": "規約違反が確認されたため、お客さまのご利用を制限しております。詳細は<a href=\"{url}\" class=\"lnk\">こちら</a>をご確認ください。",
            "chat.error_send_max_char_num": "メッセージの最大文字数を超えているため送信できません。{0} 字以内で入力してください。",
            "chat.error_send_common": "送信に失敗しました。もう一度送信を行うか、時間をおいて再度お試しください。",
            "chat.error_blocked_user": "このユーザーにはメッセージを送信することができません",
            "chat.conversation_notify_new_message": "他のチャットに新着メッセージがあります。",
            "chat.conversation_notify_not_friend": "友だちではないチャットメンバーがいます。",
            "chat.dialog_content_report": "このメッセージを通報します。よろしいですか？",
            "chat.dialog_title_leave_conversation": "チャットからの退室",
            "chat.dialog_content_leave_conversation": "チャットから退室すると今までの内容を確認することができなくなります。退室してよろしいですか？",
            "chat.dialog_content_move_to_profile": "プロフィールページに遷移しますか？",
            "chat.conversation_option_add_members": "メンバー追加",
            "chat.conversation_option_notify_off": "通知OFFにする",
            "chat.conversation_option_notify_on": "通知ONにする",
            "chat.conversation_option_group_settings": "グループ設定",
            "chat.conversation_option_leave": "退室",
            "chat.group_settings_title": "グループ設定",
            "chat.group_settings_conversation_change_title": "グループ名変更",
            "chat.group_settings_members_title": "このチャットのメンバー",
            "chat.group_settings_save": "保存",
            "chat.group_settings_add_members": "メンバーを追加する",
            "chat.conversation_event_change_title_with_subject": "{0} さんがグループ名を変更しました",
            "chat.conversation_event_change_title_with_subject_by_system": "GREE管理人がグループ名を変更しました",
            "chat.conversation_event_change_title_to": "グループ名が 【{0}】に変更されました",
            "chat.conversation_event_change_title_to_with_subject": "{0} さんがグループ名を 【{1}】に変更しました",
            "chat.conversation_event_add_members_1": "{0} さん が追加されました",
            "chat.conversation_event_add_members_2": "{0} さん、{1} さん が追加されました",
            "chat.conversation_event_add_members_2_over": "{0} さん、{1} さん 達 {2}人 が追加されました",
            "chat.conversation_event_add_members_with_subject_1": "{0} さんが {1} さん を追加しました",
            "chat.conversation_event_add_members_with_subject_2": "{0} さんが {1} さん、{2} さん を追加しました",
            "chat.conversation_event_add_members_with_subject_2_over": "{0} さんが {1} さん、{2} さん 達 {3}人 を追加しました",
            "chat.see_more": "もっと見る",
            "chat.cancel": "キャンセル",
            "chat.dateformat": "{yyyy}-{m}-{d}",
            "chat.dateformat_yesterday_at": "昨日 {H}:{MM}",
            "chat.dateformat_time_at": "{H}:{MM}",
            "chat.dateformat_date_at": "{m}月{d}日",
            "chat.dateformat_weekday_at": "{m}月{d}日 {H}:{MM}",
            "chat.dateformat_monthly_at": "{m}月{d}日 {H}:{MM}",
            "chat.dateformat_different_year": "{yyyy}年{m}月{d}日 {H}:{MM}",
            "chat.dateformat_m/d_H:MM": "{m}/{d} {H}:{MM}",
            "chat.yesterday": "昨日",
            "chat.just_now": "数秒前",
            "chat.within_one_minute": "約1分前",
            "chat.x_minutes_ago": "{0}分前",
            "chat.x_minutes_ago_other": "{0}分前",
            "chat.x_hours_ago": "{0}時間前",
            "chat.x_hours_ago_other": "{0}時間前",
            "chat.x_days_ago": "{0}日前",
            "chat.x_days_ago_more": "{0}日以上前",
            "chat.year": "年",
            "chat.month": "月",
            "chat.day": "日",
            "chat.x_person": "{0} 人",
            "chat.see_more_loading": "読み込み中…",
            "chat.new": "NEW",
            "chat.online": "ONLINE",
            "chat.mychat": "マイチャット",
            "chat.dateformat_b": "{yyyy}年{m}月{d}日",
            "chat.dateformat_c": "{yyyy}/{m}/{d}({w})",
            "chat.dateformat_d": "{yyyy}年{m}月{d}日({w}) {H}:{MM}",
            "chat.dateformat_e": "{m}月{d}日({w}) {H}:{MM}",
            "chat.maintenance_format_a": "開始 : {from}<br />終了 : {to}",
            "chat.maintenance_format_b": "{from} ~ {to}",
            "chat.day_0": "日",
            "chat.day_1": "月",
            "chat.day_2": "火",
            "chat.day_3": "水",
            "chat.day_4": "木",
            "chat.day_5": "金",
            "chat.day_6": "土",
            "chat.dialog_content_upgrade": "この機能をご利用いただくにはご登録情報の追加が必要となります。",
            "chat.dialog_title_penalty": "投稿一時停止",
            "chat.member_select_add": "追加({num})",
            "chat.member_select_create": "開始({num})",
            "chat.dialog_title_member_select_max_member_num": "最大参加人数の超過",
            "chat.dialog_title_member_select_age_limit": "年齢による制限",
            "chat.chat_event_create_chat": "{0}さんがチャットを作りました",
            "chat.chat_event_welcome_1on1": "チャットを開始しました。<br />メッセージを送りましょう！",
            "chat.error_send_empty": "メッセージの内容がないため送信できません。",
            "chat.error_send_offline": "インターネット接続がオフラインのようです。もう一度送信するか時間をおいて再度お試しください。",
            "chat.dialog_title_member_select_min_member_num": "未選択",
            "chat.dialog_content_member_select_min_member_num": "友だちを1人以上選択してください。",
            "chat.dialog_content_not_permitted": "権限がありません",
            "chat.dialog_content_zoning_error": "追加できないユーザが含まれています",
            "chat.dialog_content_already_update_error": "既に更新されています",
            "chat.dialog_friend_request": "友だちになる",
            "chat.dialog_friend_request_outgoing": "友だち申請中",
            "chat.dialog_friend_request_incoming": "友だち承認",
            "chat.dialog_jump_to_chat": "チャットする",
            "chat.dialog_jump_to_profile": "プロフを見る",
            "chat.dialog_jump_to_report": "通報する",
            "chat.reload": "再読み込み",
            "chat.error_failed": "処理に失敗しました。もう一度実行するか、時間をおいて再度お試しください。",
            "chat.error_timeout": "タイムアウトしました。もう一度実行するか、時間をおいて再度お試しください。",
            "chat.error_offline": "インターネット接続がオフラインのようです。もう一度実行するか、時間をおいて再度お試しください。",
            "chat.error_reload": "接続が無効となりましたため、再度ページを読み込みます。",
            "chat.error_privacy_level_1": "このユーザとは友だちのみ会話を始めることができます",
            "chat.error_privacy_level_2": "このユーザとは友だち、もしくは友だちの友だちのみ会話を始めることができます",
            "chat.error_freeze_chat": "利用規約で禁止している行為が確認されましたため、こちらのチャットを凍結させていただきました。",
            "chat.error_conversation_not_found": "チャットが見つかりません。",
            "chat.contact_list_tutorial": "友だちを見つけよう",
            "chat.find_friends": "友だちを探す",
            "chat.member_select_tutorial": "友だちを見つけよう",
            "chat.dialog_content_member_select_age_limit": "年齢の制限により指定したユーザとチャットを始めることができません",
            "chat.dialog_content_member_select_already_exists": "指定したユーザは既に会話に追加されています",
            "chat.message_censored": "このメッセージはGREE管理人により削除されました。",
            "chat.link_intro_with_maintenance": "メンテナンスのお知らせ ({m}月{d}日)",
            "chat.link_intro_with_under_maintenance": "現在GREEチャットはメンテナンス中です",
            "chat.balloon_content_beta": "新コミュニケーションサービス 『GREEチャット』 β公開中！",
            "chat.intro_title_ga": "GREEチャット 公開のお知らせ",
            "chat.intro_content_ga": "スマートフォン版GREEに新たなコミュニケーションサービス『GREEチャット』が登場しました。",
            "chat.intro_title_group": "みんなでチャットしよう♪",
            "chat.intro_title_1on1": "１対１チャットも♪",
            "chat.intro_note_ga": "β期間中の投稿データは削除されている場合がございます。また、現在Androidについては 4.0以上のみのサポートとなります。なお、携帯版GREEでは本機能は未対応となりますので、友だちが携帯版GREEをご利用の場合メッセージは届きません。予めご了承ください。",
            "chat.intro_link": "チャットトップへ",
            "chat.intro_will_maintenance_head": "システムメンテナンスのお知らせ",
            "chat.intro_under_maintenance_head": "GREEチャットはメンテナンス中です",
            "chat.intro_maintenance_announce": "<h2>◯メンテナンス時間（予定）</h2>" + "<p class=\"sen\">{span}</p><br /><br />" + "<h2>◯メンテナンス中の利用について</h2>" + "<p class=\"sen\">メンテナンス中は1対1チャット、グループチャット、マイチャットをご利用いただくことができません。(これらのチャットはチャット一覧から非表示になります。)</p><br />" + "<p class=\"sen\">GREEからのお知らせ（GREEトクトク事務局、アバター\"ココ\"、GREE事務局、GREEパトロール、GREEカスタマーサービス、GREEとみんなの6つの約束、GREEコイン事務局など）につきましては、メンテナンス中もご確認いただくことが可能です。</p><br /><br />" + "<h2>◯その他、メンテナンス中に利用できない機能</h2>" + "<ul>" + "<li>よせがき返信（お礼）機能</li>" + "<li>コミュニティの招待</li>" + "</ul>" + "<br />" + "<p class=\"sen\">お客さまにはご不便をおかけいたしますが、ご理解とご了承をいただきますようお願い申し上げます。</p>",
            "chat.deprecated_pc_browser": "ご利用のブラウザはサポート対象外です。<br /> GREEチャットを快適に使うために、お好きなブラウザのアイコンをクリックして最新版をダウンロードしてください。",
            "chat.not_supported_device": "サポート対象外の端末です<br/>GREEチャットのサポート対象はこちら",
            "chat.switch_title": "公開まであと少し・・・",
            "chat.switch_content": "新コミュニケーションサービス 『GREEチャット』 が始まります！",
            "chat.switch_note": "本日までの先行公開期間中に作成されたチャットルームまた投稿されたメッセージは、本公開後に見ることができなくなります。ご留意ください。",
            "chat.switch_link": "戻る",
            "chat.dialog_content_move_out": "他のページを開きます。よろしいですか？",
            "chat.intro_title_release_plan": "今後の機能追加予定",
            "chat.intro_note_release_plan": "お客さまからたくさんのご要望をいただき、現在以下機能の追加を予定しております。<br />・<br />新機能の公開を楽しみにお待ち頂ければ幸いです。",
            "chat.theme_setting_title": "GREEチャットのデザイン設定",
            "chat.theme_setting_item_desc": "{themeName}のデザインにする",
            "chat.theme_setting_valid_term_desc": "※ {term} のみ有効な設定です",
            "chat.notification_setting_title": "GREEチャットの通知設定",
            "chat.notification_setting_push": "プッシュ通知で受信通知を受け取る",
            "chat.notification_setting_mail": "Eメールで受信通知を受け取る",
            "chat.notification_setting_on": "オン",
            "chat.notification_setting_off": "オフ",
            "chat.notification_setting_mail_interval_0": "毎回受け取る",
            "chat.notification_setting_mail_interval_15": "15分毎に受け取る",
            "chat.notification_setting_mail_interval_30": "30分毎に受け取る",
            "chat.notification_setting_mail_interval_60": "1時間毎に受け取る",
            "chat.notification_setting_mail_interval_1440": "24時間毎に受け取る",
            "chat.app_download_message": "プッシュ通知を受け取る場合はGREEアプリのご利用が必要です",
            "chat.back_to_top": "チャットトップへ",
            "chat.go_to_top": "チャットトップへ移動する",
            "chat.alert_send_delivery_user": "このユーザーにメッセージを送信することはできません。",
            "chat.alert_send_delivery_community": "このチャットではメッセージを送信できません。",
            "chat.header_option_suspend_reception": "受信停止",
            "chat.header_option_notify_to_on": "通知ONにする",
            "chat.header_option_notify_to_off": "通知OFFにする",
            "chat.link_sender_profile_community": "さんからのコミュニティに関するメッセージです。",
            "chat.dialog_suspend_reception_notification": "受信停止をすると、今後このユーザーからのチャットが受信できません。",
            "chat.dialog_suspend_reception_notification_community": "受信停止をするためにはコミュニティから退会する必要があります。",
            "chat.dialog_suspend_reception_description": "<span class=\"minorL\">受信停止をするには、</span><span class=\"minorL\">プロフページから禁止リストへ追加</span><span class=\"minorL\">してください。</span>",
            "chat.dialog_suspend_reception_description_pc": "<span class=\"minorL\">受信停止をするには、</span><span class=\"lead\">通知とプライバシーページ内の「禁止リスト」に、このユーザーのIDを入力</span><span class=\"minorL\">してください。</span>",
            "chat.dialog_suspend_reception_description_user_id_pc": "ユーザーID",
            "chat.dialog_suspend_reception_description_community": "<span class=\"lead\">本ページを確認いただいただけでは受信停止にはなりません。</span><p class=\"minor space8\">※コミュニティから退会すると、今後このコミュニティからのチャットを受信することはできません。</p>",
            "chat.dialog_suspend_reception_annotation": "※チャットリストからも削除されます",
            "chat.dialog_suspend_reception_button": "プロフページへ",
            "chat.dialog_suspend_reception_button_community": "コミュニティへ",
            "chat.dialog_suspend_reception_button_setting_pc": "通知とプライバシーページへ",
            "chat.dialog_not_allow_suspend_reception_title": "受信停止不可",
            "chat.dialog_not_allow_suspend_reception_description": "このユーザは受信停止できません。",
            "chat.sorry_age_under_13": "申し訳ありません。利用条件を満たしていないため、一部の機能はご利用になれません。",
            "chat.sorry_disabled_gree_chat": "申し訳ありません。利用条件を満たしていないため、GREEチャットをご利用になれません。",
            "chat.disabled_official_title_1": "CELEBアカウントでは",
            "chat.disabled_official_title_2": "GREEチャットをご利用いただけません",
            "chat.disabled_official_notice_title": "CELEBアカウントの方へ",
            "chat.disabled_official_notice_discription_1": "閲覧できないGREEチャットのお知らせが表示される不具合が発生しております。",
            "chat.disabled_official_notice_discription_2": "ご迷惑をおかけいたしますが、改修完了まで今しばらくお待ちください。",
            "chat.disabled_official_schedule_title": "不具合修正日",
            "chat.disabled_official_schedule_discription": "2015年10月 (予定)",
            "chat.empty_collection": "チャットルームがありません。",
            "chat.manual_link": "GREEチャットの使い方とよくある質問",
            "chat.optout_title": "GREE���ャットの受信設定",
            "chat.optout_message": "{official_user_name}のチャットを受け取る",
            "chat.optout_caution": "■ご注意<br>" + "上記のチェックボックスを外すと、該当ユーザーを禁止リストに追加します。<br><br>" + "禁止リストに追加すると、該当ユーザーは以下の機能が制限されます。" + "<ul>" + "<li>お客さまのプロフィールや日記の閲覧</li>" + "<li>お客さまとの１対１チャット（配信を含む）</li>" + "<li>お客さまへのリクエスト送信</li>" + "<li>お客さまへのアプリ招待</li>" + "</ul>",
            "chat.optout_setting_save_succeed": "保存されました。",
            "chat.link_blocking_list": "禁止リスト一覧へ",
            "chat.link_blocking_help": "禁止リストとは",
            "chat.link_faq": "よくある質問",
            "chat.link_chat_setting": "チャット設定",
            "chat.start_chat": "今すぐ利用する",
            "chat.edit_conversation_display_setting_button_complete": "完了",
            "chat.hide_conversation_button": "非表示",
            "chat.redisplay_conversation_button": "再表示",
            "chat.hide_conversation_help_dialog_title": "このチャットを非表示にしますか？",
            "chat.hide_conversation_help_dialog_body": "<ul>" + "<li>チャットを非表示にすると「チャットリスト」から「非表示チャット」に移動します。</li>" + "<li>チャットを非表示にしても、メッセージは削除されません。</li>" + "<li>チャットを非表示にしても、メッセージは受信します。</li>" + "</ul>",
            "chat.hide_conversation_help_dialog_prim": "非表示にする",
            "chat.disable_hide_conversation_dialog_title": "非表示にできないチャットです",
            "chat.disable_hide_conversation_dialog_body": "このユーザはGREEからの大切なお知らせを配信します。そのため、このチャットを非表示にすることはできません。",
            "chat.upgrade_message": "GREEチャットをご利用いただくには、会員情報を登録してアップグレードする必要があります",
            "chat.to_upgrade": "アップグレード",
            "chat.emoji": "絵文字",
            "chat.sending_message": "送信中...",
            "chat.stamp": "スタンプ",
            "chat.sent_stamp": "スタンプを送信しました",
            "chat.received_stamp": "スタンプが送信されました"
        };
    })(Blitz.Language || (Blitz.Language = {}));
    var Language = Blitz.Language;
})(Blitz || (Blitz = {}));
var Util;
(function (Util) {
    var Text = (function () {
        function Text(text) {
            this.text = text;
        }
        Text.prototype.nl2br = function () {
            this.text = this.text.replace(/\r?\n/g, '<br />');
            return this;
        };

        Text.prototype.escape = function () {
            this.text = String.escapeSpecialChars(this.text).replace(/&lt;\/?(\w+)(.*?)&gt;/g, function (all, match, attr) {
                if ('br' === match) {
                    return '<br>';
                }
                if ('emoji' === match) {
                    var id = attr.match(/id\s*=&quot;(\w+)&quot;/);
                    if (!id || !id.length) {
                        return '';
                    }
                    return '<emoji id="' + id.pop() + '">';
                }
                if (all === '&lt;/a&gt;') {
                    return '</a>';
                }
                if (match === 'a') {
                    var href = attr.replace(/\s/g, ' ').match(/href=&quot;(https?:\/\/.+?)&quot;/);
                    if (!href || !href.length) {
                        return '';
                    }
                    return '<a href="' + href.pop() + '">';
                }
                return all;
            });
            return this;
        };

        Text.prototype.convertEmoji = function () {
            this.text = Util.String.convertEmojiTag(this.text);
            return this;
        };

        Text.prototype.disableATag = function () {
            this.text = this.text.replace(/<\/?a.*?>/g, '').replace(/<\/?br\s*>/g, '');
            return this;
        };
        return Text;
    })();
    Util.Text = Text;

    var UA = (function () {
        function UA() {
        }
        UA.isIOS = function () {
            return /\((iPhone( Simulator)?|iPod( touch)?|iPad);/.test(navigator.userAgent);
        };

        UA.isAndroid = function (v) {
            var ua = navigator.userAgent.toLowerCase();
            if (!v) {
                return (ua.indexOf('android') > -1);
            }
            return (ua.indexOf('android ' + v) > -1);
        };

        UA.isTouch = function () {
            return !!('ontouchstart' in window) && (navigator.userAgent.indexOf('PhantomJS') < 0);
        };
        return UA;
    })();
    Util.UA = UA;

    var String = (function () {
        function String() {
        }
        String.convertSpecialChar = function (string) {
            return string.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#39;/g, "'");
        };

        String.escapeSpecialChars = function (string) {
            return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
        };

        String.convertEmojiTag = function (string) {
            return string.replace(/<emoji\sid\s*=\s*["']0*(\d+)["']>/g, function (all, $1) {
                var className = 'emoji e' + $1;
                return '<div class="' + className + '"></div>';
            });
        };
        return String;
    })();
    Util.String = String;

    Util.createConversationRefKey = function (myUserId, targetUserId) {
        if (myUserId == targetUserId) {
            return 'm_' + myUserId;
        }
        if (myUserId < targetUserId) {
            return 'o_' + targetUserId + "_" + myUserId;
        } else {
            return 'o_' + myUserId + "_" + targetUserId;
        }
    };

    Util.getFormattedDateString = function (format, d) {
        return Blitz.Language.getMessage(format, {
            yyyy: d.getFullYear(),
            m: d.getMonth() + 1,
            d: d.getDate(),
            w: Blitz.Language.getMessage('chat.day_' + d.getDay()),
            H: d.getHours(),
            MM: ("0" + d.getMinutes()).slice(-2)
        });
    };

    Util.getMaintenanceSpanString = function (from, to, now) {
        if (typeof now === "undefined") { now = new Date(); }
        var d1 = new Date(from.replace(/-/g, '/'));
        var d2 = new Date(to.replace(/-/g, '/'));
        var fromString;
        var toString;
        if (now.getFullYear() !== d1.getFullYear() || d1.getFullYear() !== d2.getFullYear()) {
            fromString = Util.getFormattedDateString('chat.dateformat_d', d1);
            toString = Util.getFormattedDateString('chat.dateformat_d', d2);
            return Blitz.Language.getMessage('chat.maintenance_format_a', {
                from: fromString,
                to: toString
            });
        } else {
            fromString = Util.getFormattedDateString('chat.dateformat_e', d1);
            toString = Util.getFormattedDateString('chat.dateformat_e', d2);
            if (d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate()) {
                toString = Util.getFormattedDateString('chat.dateformat_time_at', d2);
            }
            return Blitz.Language.getMessage('chat.maintenance_format_b', {
                from: fromString,
                to: toString
            });
        }
    };

    Util.uid = function () {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    };
})(Util || (Util = {}));
var SNS;
(function (SNS) {
    var Config = (function () {
        function Config() {
        }
        Config.init = function (config) {
            this.config = config;
        };

        Config.getDefaultUrl = function () {
            return 'chat/list';
        };

        Config.getClientTypeId = function () {
            return this.config['client_type_id'];
        };

        Config.getMyself = function () {
            return this.config['myself'];
        };

        Config.getTheme = function () {
            return this.config['theme'];
        };

        Config.getDomains = function () {
            return this.config['config']['domains'];
        };

        Config.getBeaconDomain = function () {
            return this.config['config']['domains']['beacon'];
        };

        Config.getPfBeaconDomain = function () {
            return this.config['config']['domains']['pfb'];
        };

        Config.getGreeJpDomain = function () {
            return this.config['config']['domains']['greejp'];
        };

        Config.getJaHelpDomain = function () {
            return this.config['config']['domains']['ja-help'];
        };

        Config.getIdDomain = function () {
            return this.config['config']['domains']['id'];
        };

        Config.getGreeJpPatrolFormURL = function () {
            return this.getGreeJpDomain() + '?mode=support&act=patrol_form';
        };

        Config.getSNSDomain = function () {
            return this.config['config']['domains']['sns'];
        };

        Config.getGameChatURL = function () {
            return this.config['config']['domains']['apps'] + '?action=app_chat_view#view=game_list';
        };

        Config.getGreeJpConfigPrivacyURL = function () {
            return this.getGreeJpDomain() + '?mode=home&act=config_privacy_form';
        };

        Config.getGreeJpUserProfileURL = function (userId) {
            return this.getGreeJpDomain() + userId;
        };

        Config.getGreeJpCommunityURL = function (userId) {
            return this.getGreeJpDomain() + 'community/' + userId;
        };

        Config.getDeprecatedPCBrowserImgRootURL = function () {
            return this.config['config']['url_root_img_deprecated_pc_browser'];
        };

        Config.isDeprecatedPCBrowser = function () {
            return this.config['config']['is_deprecated_pc_browser'];
        };

        Config.isNotSupportedDevice = function () {
            return this.config['config']['is_not_supported_device'];
        };

        Config.getCobitToken = function () {
            return this.config['cobit_token'];
        };

        Config.getAppId = function () {
            return this.config['config']['app']['id'];
        };

        Config.isSDK = function () {
            return this.config['config']['is_sdk'];
        };

        Config.getChatOpenLevelOfPrivacySettings = function () {
            return this.config['privacy_settings']['use_setting_mail'];
        };

        Config.getNewContactList = function () {
            return this.config['new_contact_list']['items'];
        };

        Config.getNewContactNum = function () {
            return Object.keys(this.getNewContactList()).length;
        };

        Config.getModerationConfirmUrl = function () {
            return this.getDomains()['sns'] + '#class=link&view=moderation_consent-items-message';
        };

        Config.getPenaltyHelpUrl = function () {
            return this.getDomains()['sns'] + '#view=help_penalty';
        };

        Config.getSnsUserProfileUrl = function (userId) {
            return this.getSNSDomain() + '#view=profile_info' + '&user_id=' + userId;
        };

        Config.getSnsCommunityUrl = function (communityId) {
            return this.getSNSDomain() + '#view=community_view' + '&community_id=' + communityId;
        };

        Config.getSnsBlockingListUrl = function () {
            return this.getSNSDomain() + '#view=settings_blocklist';
        };

        Config.getJaHelpBlocking = function () {
            return this.getJaHelpDomain() + 'faq.asp?faqid=3134';
        };

        Config.getTopPageHash = function () {
            return '#view=chat_list';
        };

        Config.isChatEnabled = function () {
            var chatStatus = this.config['chat_status'];
            return chatStatus['enabled'] == true;
        };

        Config.isChatDisabled = function () {
            return !this.isChatEnabled();
        };

        Config.getChatDisabledMsg = function () {
            var chatStatus = this.config['chat_status'];
            return chatStatus['disabled_msg'];
        };

        Config.isMaintenance = function () {
            return this.config['maintenance']['is_maintenance'];
        };

        Config.isChatRunning = function () {
            return !this.isMaintenance();
        };

        Config.willMaintenance = function () {
            if (this.isMaintenance()) {
                return false;
            }
            var maintenance = this.config['maintenance'];
            if (maintenance['server_status'] === 'false') {
                if (!_.isNull(maintenance['maintenance_from']) && !_.isNull(maintenance['maintenance_to'])) {
                    return true;
                }
            }
            return false;
        };

        Config.getMaintenanceSpan = function () {
            return Util.getMaintenanceSpanString(this.config['maintenance']['maintenance_from'], this.config['maintenance']['maintenance_to']);
        };

        Config.getMaintenanceStartingDate = function () {
            var from = this.config['maintenance']['maintenance_from'];
            return new Date(from.replace(/-/g, '/'));
        };

        Config.needsUpgrade = function () {
            return this.config['config']['needs_upgrade'];
        };

        Config.isEnabledEmojiPalette = function () {
            return this.config['config']['palette']['is_enabled_emoji'];
        };

        Config.isEnabledStampPalette = function () {
            return this.config['config']['palette']['is_enabled_stamp'];
        };

        Config.isApp = function () {
            return this.config['config']['is_app'];
        };

        Config.isIOS = function () {
            return this.config['config']['is_ios'];
        };

        Config.isIOSApp = function () {
            return this.isApp() && this.isIOS();
        };

        Config.isAndroid = function () {
            return this.config['config']['is_android'];
        };

        Config.isPC = function () {
            return this.config['config']['is_pc'];
        };

        Config.isSP = function () {
            return this.config['config']['is_sp'];
        };

        Config.isIEUnder11 = function () {
            return this.config['config']['is_ie_under11'];
        };

        Config.isAgeUnder13 = function () {
            return this.config['config']['is_age_under13'];
        };

        Config.isAge13OrOlder = function () {
            return !this.isAgeUnder13();
        };

        Config.getWebworkerHelperUri = function () {
            return this.config['config']['uri_webworker_helper'];
        };

        Config.getDeviceIsAndroid2x = function () {
            return this.config['config']['is_android_2'];
        };

        Config.emojiPalette = function () {
            return false;
        };

        Config.getAppsDomain = function () {
            return this.config['config']['domains']['apps'];
        };

        Config.getAdDomain = function () {
            return this.config['config']['domains']['ad'];
        };

        Config.getAdsDomain = function () {
            return this.config['config']['domains']['ads'];
        };

        Config.isAdsAppendHost = function () {
            return this.config['config']['ad']['appendHost'];
        };

        Config.getAnnounces = function () {
            return this.config['announce_list'];
        };
        return Config;
    })();
    SNS.Config = Config;
})(SNS || (SNS = {}));

var Gryfon;
(function (Gryfon) {
    (function (Analytics) {
        Analytics.appId = null;
        Analytics.locale = '';

        var BEACON_ACTION_SPLITTER = '_';

        function recordAnalyticsIfNativeApp(args) {
            if (Gryfon.isSnsNativeApp()) {
                Gryfon.recordAnalyticsData(args);
            }
        }

        function sendBeacon(action, from, args) {
            var p = _.clone(args);
            var pr = p['pr'];
            if (pr != null) {
                p = _.defaults(p, pr);
            }
            p = _.omit(p, 'tm', 'pr');
            return analytics.AnalyticsBeacon.create({ a: action }).addServiceParams(p).flush();
        }

        function sendEventBeacon(args) {
            var fr = args['fr'] || 'unknown';
            var a = [fr, args['nm']].join(BEACON_ACTION_SPLITTER);
            return sendBeacon(a, fr, args);
        }

        function sendPageBeacon(args, externalURL) {
            var fr = args['fr'] || 'unknown';
            var a = args['nm'];
            if (externalURL) {
                sendBeacon(a, fr, _.chain(args).extend({ 'url': externalURL }).omit('pr').value());
            } else {
                sendBeacon(a, fr, args);
            }
        }

        function event(name, from, params) {
            if (typeof from === "undefined") { from = ''; }
            if (typeof params === "undefined") { params = {}; }
            if (from == '') {
                if (!_.isEmpty(fivefold.history.current())) {
                    from = fivefold.history.current().pattern;
                }
            }

            var prev = getMergedPreviousViewName();
            if (prev) {
                params['ex_from'] = prev;
            }

            var args = {
                tp: 'evt',
                nm: name,
                fr: from,
                ap: Gryfon.ConfigAccessor.getAppId(),
                pr: params
            };
            recordAnalyticsIfNativeApp(args);

            return sendEventBeacon(args);
        }
        Analytics.event = event;

        function page(to, from, params, externalURL) {
            if (typeof from === "undefined") { from = ''; }
            if (typeof params === "undefined") { params = {}; }
            if (typeof externalURL === "undefined") { externalURL = null; }
            var args = {
                tp: 'pg',
                nm: to,
                fr: from,
                ap: Gryfon.ConfigAccessor.getAppId(),
                pr: params
            };
            recordAnalyticsIfNativeApp(args);

            sendPageBeacon(args, externalURL);
        }
        Analytics.page = page;

        function getMergedPreviousViewName() {
            var prev = fivefold.history.previous(2)[1];
            if (prev != null) {
                return prev.pattern;
            }

            return 'chat_list';
        }
        Analytics.getMergedPreviousViewName = getMergedPreviousViewName;

        function autoSendPageBeacon(to, params, externalURL) {
            if (typeof params === "undefined") { params = {}; }
            if (typeof externalURL === "undefined") { externalURL = null; }
            sendPageBeaconAndUpdatePreviousView(to, params, externalURL);
        }
        Analytics.autoSendPageBeacon = autoSendPageBeacon;

        function sendPageBeaconAndUpdatePreviousView(to, params, externalURL) {
            if (typeof params === "undefined") { params = {}; }
            if (typeof externalURL === "undefined") { externalURL = null; }
            page(to, Analytics.getMergedPreviousViewName(), params, externalURL);
            ga('send', 'pageview', {
                page: '/' + to + '?' + _.map(params, function (v, k) {
                    return k + '=' + v;
                }).join('&')
            });
        }
        Analytics.sendPageBeaconAndUpdatePreviousView = sendPageBeaconAndUpdatePreviousView;
    })(Gryfon.Analytics || (Gryfon.Analytics = {}));
    var Analytics = Gryfon.Analytics;
})(Gryfon || (Gryfon = {}));
var Gryfon;
(function (Gryfon) {
    function showAlertView(message) {
        window.alert(message);
    }
    Gryfon.showAlertView = showAlertView;
    function initWithDependencies(configAccessor) {
        Gryfon.ConfigAccessor = configAccessor;
        init();
    }
    Gryfon.initWithDependencies = initWithDependencies;
    function init() {
    }
    Gryfon.init = init;
    function recordAnalyticsData(args) {
    }
    Gryfon.recordAnalyticsData = recordAnalyticsData;
    function ready() {
    }
    Gryfon.ready = ready;
    function startLoading() {
    }
    Gryfon.startLoading = startLoading;
    function contentsReady() {
    }
    Gryfon.contentsReady = contentsReady;
    function needUpgrade(upgradeURL) {
        location.href = upgradeURL;
    }
    Gryfon.needUpgrade = needUpgrade;

    function isSnsNativeApp() {
        return false;
    }
    Gryfon.isSnsNativeApp = isSnsNativeApp;
    function prepareGluon(config) {
        if (typeof config === "undefined") { config = {}; }
        var requestCallback = null;
        if (config['token']) {
            gluon.initialize({
                appId: parseInt(config['config']['app']['id'], 10),
                token: config['token'],
                endpoint: {
                    api: config['config']['domains']['snsapi']
                }
            }, requestCallback);
        } else {
            gluon.initialize({
                appId: parseInt(config['config']['app']['id'], 10),
                endpoint: {
                    appId: config['config']['domains']['snsapi'],
                    authorize: config['config']['domains']['open'] + config['config']['oauth2']['authorize'],
                    tokeninfo: config['config']['domains']['open'] + config['config']['oauth2']['tokeninfo'],
                    authCallback: config['config']['domains']['ssns'] + config['config']['oauth2']['callback'],
                    authServer: config['config']['domains']['ssns'] + config['config']['oauth2']['server'],
                    fallback: config['config']['domains']['id'] + '?action=logout_commit'
                }
            }, requestCallback);
        }
    }
    Gryfon.prepareGluon = prepareGluon;
    function updateBadge(type, force_update) {
    }
    Gryfon.updateBadge = updateBadge;
})(Gryfon || (Gryfon = {}));
var Gryfon;
(function (Gryfon) {
    function back() {
        if (window.history.length === 1) {
            Gryfon.linkTo(Gryfon.ConfigAccessor.getTopPageHash());
        } else {
            window.history.back();
        }
    }
    Gryfon.back = back;
})(Gryfon || (Gryfon = {}));
var Gryfon;
(function (Gryfon) {
    function linkTo(urlOrHash, beaconOptions) {
        if (typeof beaconOptions === "undefined") { beaconOptions = {}; }
        var match = urlOrHash.match(/^https?:\/\/[^\/]+/);
        var domain = match ? match[0] : 'null';
        var params = _.extend(beaconOptions, { to: urlOrHash, to_domain: domain });
        Gryfon.Analytics.event('click_link', '', params).onComplete(function () {
            if (urlOrHash.indexOf('#') == 0 && location.search && location.search != '?a') {
                location.href = '/' + urlOrHash;
            } else {
                location.href = urlOrHash;
            }
        });
    }
    Gryfon.linkTo = linkTo;
})(Gryfon || (Gryfon = {}));
var Gryfon;
(function (Gryfon) {
    function listenOnce(flagName, expire) {
        if (typeof expire === "undefined") { expire = 3600; }
        var promise = new monapt.Promise();
        return promise.future();
    }
    Gryfon.listenOnce = listenOnce;
    function notify(flagName, params) {
        if (typeof params === "undefined") { params = {}; }
    }
    Gryfon.notify = notify;
    function addPersistentListener(listenerName, listener) {
    }
    Gryfon.addPersistentListener = addPersistentListener;
    function removePersistentListener(listenerName) {
    }
    Gryfon.removePersistentListener = removePersistentListener;
})(Gryfon || (Gryfon = {}));
var Gryfon;
(function (Gryfon) {
    function setPullToRefreshEnabled(enabled) {
    }
    Gryfon.setPullToRefreshEnabled = setPullToRefreshEnabled;
})(Gryfon || (Gryfon = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Gryfon;
(function (Gryfon) {
    var AsyncAppTmpStorageRepository = (function (_super) {
        __extends(AsyncAppTmpStorageRepository, _super);
        function AsyncAppTmpStorageRepository() {
            _super.apply(this, arguments);
        }
        return AsyncAppTmpStorageRepository;
    })(DDD.AsyncOnLocalStorageRepository);
    Gryfon.AsyncAppTmpStorageRepository = AsyncAppTmpStorageRepository;

    (function (TmpStorage) {
        var _storage = window.sessionStorage;
        function sweep() {
        }
        TmpStorage.sweep = sweep;
        function getItem(key) {
            return _storage.getItem(key);
        }
        TmpStorage.getItem = getItem;
        function setItem(key, val) {
            return _storage.setItem(key, val);
        }
        TmpStorage.setItem = setItem;
        function removeItem(key) {
            return _storage.removeItem(key);
        }
        TmpStorage.removeItem = removeItem;
    })(Gryfon.TmpStorage || (Gryfon.TmpStorage = {}));
    var TmpStorage = Gryfon.TmpStorage;
})(Gryfon || (Gryfon = {}));

this["HBS"] = this["HBS"] || {};

this["HBS"]["tpl/chat/chat-prepare.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<div class=\"contr\">\n    <section class=\"unit\">\n        <section class=\"cst\">\n            <div class=\"in\">\n                <p class=\"taC spaceT6 space12\">\n                    <span class=\"spr throb24\"></span>\n                </p>\n                <p class=\"taC fwB lineM\">\n                    チャットの準備をしています。<br>もうすぐ始まります！\n                </p>\n            </div>\n        </section>\n    </section>\n</div>\n";
  });

this["HBS"]["tpl/chat/deprecated-pc-browser.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"emgCst\">\n    <div class=\"in\">\n      <div class=\"flex\">\n        <div class=\"itm vaM taC\">\n          <p>";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.deprecated_pc_browser", options) : helperMissing.call(depth0, "t", "chat.deprecated_pc_browser", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n          <div class=\"browser-icons\">\n            <a href=\"http://getfirefox.jp/\" title=\"Firefox ダウンロード\">\n              <img src=\"";
  if (stack2 = helpers.url_root_img) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.url_root_img; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "img/gree/2009/outdated/icon_firefox.jpg\" width=\"46\" height=\"46\" alt=\"Firefox\" />\n            </a>\n            <a href=\"http://www.microsoft.com/japan/windows/products/winfamily/ie/function/default.mspx\" title=\"Internet Explorer ダウンロード\">\n              <img src=\"";
  if (stack2 = helpers.url_root_img) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.url_root_img; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "img/gree/2009/outdated/icon_ie.jpg\" width=\"46\" height=\"46\" alt=\"Internet Explorer\" />\n            </a>\n            <a href=\"http://www.apple.com/jp/safari/\" title=\"Safari ダウンロード\">\n              <img src=\"";
  if (stack2 = helpers.url_root_img) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.url_root_img; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "img/gree/2009/outdated/icon_safari.jpg\" width=\"46\" height=\"46\" alt=\"Safari\" />\n            </a>\n            <a href=\"http://www.google.co.jp/chrome/\" title=\"Google Chrome ダウンロード\">\n              <img src=\"";
  if (stack2 = helpers.url_root_img) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.url_root_img; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "img/gree/2009/outdated/icon_chrome.jpg\" width=\"46\" height=\"46\" alt=\"Google Chrome\" />\n            </a>\n          </div>\n        </div>\n      </div><!-- {* /.flex *} -->\n    </div>\n</div>";
  return buffer;
  });

this["HBS"]["tpl/chat/disabled-cobit.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"contr\">\n  <article class=\"notFound\">\n    <div class=\"notFoundCst\">\n      <div class=\"notFoundIn\">\n        <span class=\"notFoundTtl\">Sorry...</span>\n      </div>\n    </div>\n  </article>\n\n  <section class=\"unit\">\n    <div class=\"sen taC fwB space10\">";
  if (stack1 = helpers.disabled_message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.disabled_message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n    <div class=\"btns\">\n      <div class=\"space8\"><a class=\"btn lrg prim\">";
  if (stack1 = helpers.btnLabel) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.btnLabel; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</a></div>\n    </div>\n  </section>\n</div><!-- {* /.contr *} -->\n";
  return buffer;
  });

this["HBS"]["tpl/chat/disabled.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, functionType="function", self=this, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n            ";
  if (stack1 = helpers.disabled_message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.disabled_message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  return buffer;
  }

  buffer += "<div class=\"contr\">\n  <article class=\"notFound\">\n    <div class=\"notFoundCst\">\n      <div class=\"notFoundIn\">\n        <span class=\"notFoundTtl\">Sorry...</span>\n      </div>\n    </div>\n  </article>\n\n  <section class=\"unit\">\n    <div class=\"sen taC fwB space10\">\n        ";
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data};
  if (stack1 = helpers.anchorize) { stack1 = stack1.call(depth0, options); }
  else { stack1 = depth0.anchorize; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if (!helpers.anchorize) { stack1 = blockHelperMissing.call(depth0, stack1, options); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n  </section>\n</div><!-- {* /.contr *} -->\n";
  return buffer;
  });

this["HBS"]["tpl/chat/disabled_official.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"contr\">\n  <article class=\"notFound\">\n    <div class=\"notFoundCst\">\n      <div class=\"notFoundIn\">\n        <span class=\"notFoundTtl\">Sorry...</span>\n      </div>\n    </div>\n  </article>\n\n  <section class=\"unit\">\n    <div class=\"sen taC fwB space10\">\n      ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.disabled_official_title_1", options) : helperMissing.call(depth0, "t", "chat.disabled_official_title_1", options)))
    + "<br />\n      ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.disabled_official_title_2", options) : helperMissing.call(depth0, "t", "chat.disabled_official_title_2", options)))
    + "\n    </div>\n  </section>\n\n  <section class=\"unit\">\n    <h1 class=\"hl\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.disabled_official_notice_title", options) : helperMissing.call(depth0, "t", "chat.disabled_official_notice_title", options)))
    + "</h1>\n    <div class=\"cst\">\n      <div class=\"in\">\n        <p class=\"lineM\">\n          ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.disabled_official_notice_discription_1", options) : helperMissing.call(depth0, "t", "chat.disabled_official_notice_discription_1", options)))
    + "<br />\n          ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.disabled_official_notice_discription_2", options) : helperMissing.call(depth0, "t", "chat.disabled_official_notice_discription_2", options)))
    + "\n        </p>\n      </div>\n    </div><!-- {* /.cst *} -->\n    <h2 class=\"cptn\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.disabled_official_schedule_title", options) : helperMissing.call(depth0, "t", "chat.disabled_official_schedule_title", options)))
    + "</h2>\n    <div class=\"cst\">\n      <div class=\"in\">\n        <p class=\"lineM\">\n          ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.disabled_official_schedule_discription", options) : helperMissing.call(depth0, "t", "chat.disabled_official_schedule_discription", options)))
    + "\n        </p>\n      </div>\n    </div>\n  </section>\n</div><!-- {* /.contr *} -->\n";
  return buffer;
  });

this["HBS"]["tpl/chat/group-settings/chat-profile.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing, functionType="function", self=this, escapeExpression=this.escapeExpression;

function program1(depth0,data) {


  return "\n    <div class=\"wrapBtnIco vaT\">\n      <div class=\"btn\"><span class=\"spr ia18_sns_pen\"></span></div>\n    </div>\n    ";
  }

  buffer += "<div class=\"in\">\n  <div class=\"flex space6\">\n    ";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers.conversationIcon || depth0.conversationIcon),stack1 ? stack1.call(depth0, depth0.participants, options) : helperMissing.call(depth0, "conversationIcon", depth0.participants, options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n    <div class=\"itm\">\n      <div class=\"lead lineBreak stroke lineM\" style=\"height: 48px; overflow: hidden;\">";
  if (stack2 = helpers.name) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.name; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</div>\n    </div>\n    ";
  stack2 = helpers.unless.call(depth0, depth0.isAndroid2, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n  </div><!-- {* /.flex *} -->\n  <button class=\"btn lrg\" id=\"addChatGroupMembers\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.group_settings_add_members", options) : helperMissing.call(depth0, "t", "chat.group_settings_add_members", options)))
    + "</button>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/group-settings/edit-name-modal.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "    <div class=\"contr\">\n        <section class=\"modalTextarea\">\n            <div class=\"flex\">\n                <div class=\"itm\">\n                    <textarea id=\"modal-textarea\"></textarea>\n                </div>\n            </div>\n        </section>\n\n        <section class=\"wrpModalControl space20\">\n            <div class=\"modalControl\">\n                <div class=\"flex spaceT5\">\n                    <div class=\"itm upImgFramePanel vaM wrapIco24\" id=\"emojiPaletteWrapper\">\n                        <div class=\"modalControlPanel vaM taC tap\" id=\"emojiPaletteToggleButton\">\n                            <span class=\"spr ia24_emocon_pictogram\" id=\"emojiPaletteOpenButton\"></span>\n                            <span class=\"spr ia24_emocon_close\" id=\"emojiPaletteCloseButton\" style=\"display:none;\"></span>\n                        </div>\n                    </div>\n                    <div class=\"itm vaM\">\n                        <div class=\"minorL taR\">\n                            <span id=\"modal-textarea-count\"></span>/<span id=\"modal-textarea-limit\"></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n    </div><!-- {* /.contr *} -->\n";
  });

this["HBS"]["tpl/chat/group-settings/label.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<h2 class=\"cptn\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.group_settings_members_title", options) : helperMissing.call(depth0, "t", "chat.group_settings_members_title", options)))
    + "<span class=\"fwN\">(";
  if (stack2 = helpers.count) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.count; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + ")</span></h2>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/group-settings/participant-item.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += " style=\"background-image:url(";
  if (stack1 = helpers.profileImageUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.profileImageUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ")\"";
  return buffer;
  }

function program3(depth0,data) {

  var buffer = "", stack1, stack2, options;
  buffer += "\n        <span class=\"tag skGreen spaceL6\">\n          <span class=\"tagCont\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.online", options) : helperMissing.call(depth0, "t", "chat.online", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</span>\n        </span>\n        ";
  return buffer;
  }

  buffer += "<div class=\"in tap\">\n  <div class=\"flex\">\n    <div class=\"wrapIco36\">\n      <div class=\"ico36 usr\"";
  stack1 = helpers['if'].call(depth0, depth0.profileImageUrl, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " data-user-id=\"";
  if (stack1 = helpers.userId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.userId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\"></div>\n    </div>\n    <div class=\"itm vaM\">\n      <p class=\"lead lineBreak\">";
  if (stack1 = helpers.nickname) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.nickname; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  stack1 = helpers['if'].call(depth0, depth0.online, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </p>\n    </div>\n  </div><!-- {* /.flex *} -->\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/intro.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing;


  buffer += "<section class=\"unit\">\n  <h1 class=\"hl\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.intro_title_ga", options) : helperMissing.call(depth0, "t", "chat.intro_title_ga", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</h1>\n  <div class=\"cst\">\n    <div class=\"in\">\n      <p class=\"lineM\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.intro_content_ga", options) : helperMissing.call(depth0, "t", "chat.intro_content_ga", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n    </div>\n  </div><!-- {* /.cst *} -->\n  <h2 class=\"cptn\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.intro_title_group", options) : helperMissing.call(depth0, "t", "chat.intro_title_group", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</h2>\n  <div class=\"cst\">\n    <div class=\"in\">\n      <div class=\"taC\">\n        <img src=\"img/v2/2x/chat/tutorial/notice_group_chat.png\" alt=\"\" class=\"img282\">\n      </div>\n    </div>\n  </div>\n  <h2 class=\"cptn\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.intro_title_1on1", options) : helperMissing.call(depth0, "t", "chat.intro_title_1on1", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</h2>\n  <div class=\"cst\">\n    <div class=\"in\">\n      <div class=\"taC space6\">\n        <img src=\"img/v2/2x/chat/tutorial/notice_single_chat.png\" alt=\"\" class=\"img282\">\n      </div>\n      <div class=\"space6\">\n        <div class=\"emgCst\">\n          <div class=\"in\">\n            <p class=\"fwN\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.intro_note_ga", options) : helperMissing.call(depth0, "t", "chat.intro_note_ga", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n<section class=\"unit\">\n  <div class=\"cst\">\n    <a class=\"tap\" id=\"exit-intro\">\n      <div class=\"inFat\">\n        <div class=\"flex\">\n          <div class=\"itm vaM\">\n            <p class=\"lead\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.intro_link", options) : helperMissing.call(depth0, "t", "chat.intro_link", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n          </div>\n          <div class=\"itmCaret\">\n            <span class=\"spr ia18_arw_r\"></span>\n          </div>\n        </div><!-- {* /.flex *} -->\n      </div>\n    </a>\n  </div>\n</section>";
  return buffer;
  });

this["HBS"]["tpl/chat/list/announce-mail-close.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"emgCst\">\n  <div class=\"tap js-announce-mail-close\">\n    <div class=\"in\">\n      <div class=\"flex\">\n        <div class=\"itm vaM\">\n          <p>";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "mail.announce_close", options) : helperMissing.call(depth0, "t", "mail.announce_close", options)))
    + "</p>\n        </div>\n        <div class=\"itmCaret\">\n          <span class=\"spr ia18_arw_r\"></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/collection-header.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"flex\" id=\"collectionHeader\">\n  <div class=\"itm vaM\">";
  if (stack1 = helpers.headerName) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.headerName; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/conversation-content.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n                <span class=\"spr ia18_minor_friend spaceL6 vaM\"></span>\n                &nbsp<span data-participant-num=\"";
  if (stack1 = helpers.participantNum) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.participantNum; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (stack1 = helpers.participantNum) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.participantNum; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</span>\n            ";
  return buffer;
  }

function program3(depth0,data) {


  return "\n              <span class=\"spr ia18_minor_bell_off spaceL6 vaM\"></span>\n            ";
  }

  buffer += "<a class=\"tap\">\n  <div class=\"in\">\n    <div class=\"flex\">\n      ";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers.conversationIcon || depth0.conversationIcon),stack1 ? stack1.call(depth0, depth0.filteredParticipants, options) : helperMissing.call(depth0, "conversationIcon", depth0.filteredParticipants, options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n      <div class=\"itm\">\n        <div class=\"lead ellp stroke lineM\">";
  if (stack2 = helpers.name) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.name; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</div>\n        <div class=\"minor fsS ellp\">\n          ";
  if (stack2 = helpers.escapedMessage) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.escapedMessage; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n        </div>\n        <p class=\"minor fsS\">\n            <span>";
  if (stack2 = helpers.messageCreatedTime) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.messageCreatedTime; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</span>\n            ";
  stack2 = helpers['if'].call(depth0, depth0.isGroup, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n            ";
  stack2 = helpers.unless.call(depth0, depth0.isNotified, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n        </p>\n      </div>\n      <div class=\"itm w45 taR vaM\">\n        <div class=\"tag skYellow\" style=\"display:none\">\n          <span class=\"tagCont\"></span>\n        </div>\n      </div>\n      ";
  if (stack2 = helpers.arrow) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.arrow; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "\n    </div>\n  </div>\n</a>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/conversation-delivery-content.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", self=this, escapeExpression=this.escapeExpression;

function program1(depth0,data) {


  return "\n            <span class=\"spr ia18_minor_bell_off spaceL6 vaM\"></span>\n          ";
  }

  buffer += "<a class=\"tap\">\n  <div class=\"in\">\n    <div class=\"flex\">\n      <div class=\"wrapIco48\">\n          ";
  if (stack1 = helpers.icon) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.icon; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </div>\n      <div class=\"itm\">\n        <div class=\"lead ellp\">\n            ";
  if (stack1 = helpers.mark) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.mark; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </div>\n        <p class=\"minor fsS ellp\"></p>\n        <p class=\"minor fsS\">\n          <span></span>"
    + "\n          ";
  stack1 = helpers.unless.call(depth0, depth0.isNotified, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </p>\n      </div>\n      <div class=\"itm w45 taR vaM\">\n        <div class=\"tag skYellow\" style=\"display:none\">\n          <span class=\"tagCont\"></span>\n        </div>\n      </div>\n        ";
  if (stack1 = helpers.arrow) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.arrow; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\n    </div>\n  </div>\n</a>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/create-conversation-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<div class=\"btn prim\" id=\"chatCreateConversation\">\n    <span class=\"spr s18_btn_plus\"></span>\n</div>\n";
  });

this["HBS"]["tpl/chat/list/edit-conversation-collection-mode-button/complete.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"btn\" id=\"conversationDisplaySetting\">\n    <span>";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.edit_conversation_display_setting_button_complete", options) : helperMissing.call(depth0, "t", "chat.edit_conversation_display_setting_button_complete", options)))
    + "</span>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/edit-conversation-collection-mode-button/normal.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<div class=\"btn\" id=\"conversationDisplaySetting\">\n    <span class=\"spr s18_btn_gear\"></span>\n</div>\n";
  });

this["HBS"]["tpl/chat/list/empty-collection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"cst\">\n  <div class=\"in\">\n    <div class=\"taC\">\n      <span class=\"spr ia36_krillin_chat\"></span>\n    </div>\n    <p class=\"sen emptyMsg taC\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.empty_collection", options) : helperMissing.call(depth0, "t", "chat.empty_collection", options)))
    + "</p>\n  </div>\n</div>";
  return buffer;
  });

this["HBS"]["tpl/chat/list/hidden-chat-list-link.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"cst\">\n  <div class=\"tap js-list-item-link\" data-url=\"";
  if (stack1 = helpers.url) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.url; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n    <div class=\"inFat\">\n      <div class=\"flex\">\n        <div class=\"itm vaM\">\n          <p class=\"lead\">";
  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n        </div>\n        <div class=\"itm w45 taR vaM\">\n          <div class=\"tag skYellow\" style=\"display:none\">\n            <span class=\"tagCont\"></span>\n          </div>\n        </div>\n          ";
  if (stack1 = helpers.arrow) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.arrow; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\n      </div>\n    </div>\n  </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/not-supported-device.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing;


  buffer += "<div class=\"emgCst\">\n  <div class=\"tap js-not-supported-device\">\n    <div class=\"in\">\n      <div class=\"flex\">\n        <div class=\"itm vaM\">\n          <p>";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.not_supported_device", options) : helperMissing.call(depth0, "t", "chat.not_supported_device", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n        </div>\n        <div class=\"itmCaret\">\n          <span class=\"spr ia18_arw_r\"></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/toggle-display-button/hide-conversation-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"js-toggle-display\">\n  <div class=\"btn mid\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.hide_conversation_button", options) : helperMissing.call(depth0, "t", "chat.hide_conversation_button", options)))
    + "</div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/toggle-display-button/hide-conversation-loading-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<button class=\"btn mid\">\n  <span class=\"spr throb18\"></span>\n</button>\n";
  });

this["HBS"]["tpl/chat/list/toggle-display-button/hide-must-read-conversation-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"js-toggle-display\">\n  <div class=\"btn mid disabled\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.hide_conversation_button", options) : helperMissing.call(depth0, "t", "chat.hide_conversation_button", options)))
    + "</div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/toggle-display-button/redisplay-conversation-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"js-toggle-display\">\n  <div class=\"btn mid prim\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.redisplay_conversation_button", options) : helperMissing.call(depth0, "t", "chat.redisplay_conversation_button", options)))
    + "</div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/list/toggle-display-button/redisplay-conversation-loading-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<button class=\"btn mid prim\">\n  <span class=\"spr throbWhite18\"></span>\n</button>\n";
  });

this["HBS"]["tpl/chat/maintenance-announce.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<section class=\"unit\">\n  <div class=\"space6\">\n    <h1 class=\"hl\">";
  if (stack1 = helpers.head) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.head; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</h1>\n    <div class=\"cst\">\n      <div class=\"in\">\n        ";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </div>\n    </div>\n  </div>\n</section>\n<section class=\"unit\">\n  <div class=\"cst\">\n    <a class=\"tap\" id=\"exit-intro\">\n      <div class=\"inFat\">\n        <div class=\"flex\">\n          <div class=\"itm vaM\">\n            <p class=\"lead\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.intro_link", options) : helperMissing.call(depth0, "t", "chat.intro_link", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n          </div>\n          <div class=\"itmCaret\">\n            <span class=\"spr ia18_arw_r\"></span>\n          </div>\n        </div><!-- {* /.flex *} -->\n      </div>\n    </a>\n  </div>\n</section>";
  return buffer;
  });

this["HBS"]["tpl/chat/no-support.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "      <div class=\"contr\">\n        <article class=\"notFound\">\n          <div class=\"notFoundCst\">\n            <div class=\"notFoundIn\">\n              <span class=\"notFoundTtl\">Sorry...</span>\n            </div>\n          </div>\n        </article>\n\n        <section class=\"unit\">\n          <div class=\"btns\">\n            <div class=\"sen taC fwB space10\">申し訳ありません。本機能ではお客様の端末をサポートしておりません。</div>\n            <div><a class=\"btn lrg\">戻る</a></div>\n          </div>\n        </section>\n      </div><!-- {* /.contr *} -->\n";
  });

this["HBS"]["tpl/chat/setting/back-to-top-link.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<section class=\"unit\">\n  <div class=\"cst\">\n    <a class=\"tap\" id=\"backToChatTop\">\n      <div class=\"inFat\">\n        <div class=\"flex\">\n          <div class=\"itm vaM\">\n            <p class=\"lead\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.back_to_top", options) : helperMissing.call(depth0, "t", "chat.back_to_top", options)))
    + "</p>\n          </div>\n          <div class=\"itmCaret\">\n            <span class=\"spr ia18_arw_r\"></span>\n          </div>\n        </div><!-- {* /.flex *} -->\n      </div>\n    </a>\n  </div>\n</section>";
  return buffer;
  });

this["HBS"]["tpl/chat/setting/download-link.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {


  return "\n        <li>\n          <a class=\"tap imgLnk\" id=\"appStoreLink\">\n            <img src=\"../../img/v2/2x/common/badge_appstore.png\" height=\"45\">\n          </a>\n        </li>\n        ";
  }

function program3(depth0,data) {


  return "\n        <li>\n          <a class=\"tap imgLnk\" id=\"googlePlayLink\">\n            <img src=\"../../img/v2/2x/common/badge_googleplay.png\" height=\"45\">\n          </a>\n        </li>\n        ";
  }

  buffer += "<section class=\"unit\" style=\"min-width:310px\">\n  <div class=\"cst\">\n    <div class=\"in\">\n      <div class=\"flex space6\">\n        <div class=\"wrapIco48\">\n          <div class=\"spr s48_service_gree_app\"></div>\n        </div>\n        <div class=\"itm\">\n          <p class=\"lead space\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.app_download_message", options) : helperMissing.call(depth0, "t", "chat.app_download_message", options)))
    + "</p>\n        </div>\n      </div>\n      <ul class=\"unstyl hrz\">\n        ";
  stack2 = helpers['if'].call(depth0, depth0.isIOS, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n        ";
  stack2 = helpers['if'].call(depth0, depth0.isAndroid, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n      </ul>\n    </div>\n  </div>\n</section>";
  return buffer;
  });

this["HBS"]["tpl/chat/setting/notification.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {


  return "checked";
  }

function program3(depth0,data,depth1) {

  var buffer = "", stack1, stack2, options;
  buffer += "\n                <option\n                    value=";
  if (stack1 = helpers.minutes) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.minutes; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.selected || depth0.selected),stack1 ? stack1.call(depth0, depth0.minutes, ((stack1 = depth1.notificationSetting),stack1 == null || stack1 === false ? stack1 : stack1.mailIntervalMinutes), options) : helperMissing.call(depth0, "selected", depth0.minutes, ((stack1 = depth1.notificationSetting),stack1 == null || stack1 === false ? stack1 : stack1.mailIntervalMinutes), options)))
    + ">";
  if (stack2 = helpers.message) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.message; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</option>\n              ";
  return buffer;
  }

  buffer += "<div class=\"contr\">\n  <section class=\"unit\">\n    <h1 class=\"hl\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.notification_setting_title", options) : helperMissing.call(depth0, "t", "chat.notification_setting_title", options)))
    + "</h1>\n\n    <div class=\"cst\">\n      <div class=\"in\">\n        <div class=\"flex\">\n          <label for=\"notificationSettingPush\">\n            <div class=\"wrapCheckbox\">\n              <input id=\"notificationSettingPush\" type=\"checkbox\" class=\"spr form_check\"\n                     ";
  stack2 = helpers['if'].call(depth0, ((stack1 = depth0.notificationSetting),stack1 == null || stack1 === false ? stack1 : stack1.push), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += ">\n            </div>\n            <div class=\"itm vaM\">\n              <p class=\"lead\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.notification_setting_push", options) : helperMissing.call(depth0, "t", "chat.notification_setting_push", options)))
    + "</p>\n            </div>\n          </label>\n        </div>\n      </div>\n    </div>\n    <!-- {* /.cst *} -->\n    <div class=\"cst\">\n      <div class=\"in\">\n        <div class=\"flex space10\">\n          <label for=\"notificationSettingMail\">\n            <div class=\"wrapCheckbox\">\n              <input id=\"notificationSettingMail\" type=\"checkbox\" class=\"spr form_check\"\n                     ";
  stack2 = helpers['if'].call(depth0, ((stack1 = depth0.notificationSetting),stack1 == null || stack1 === false ? stack1 : stack1.mail), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += ">\n            </div>\n            <div class=\"itm vaM\">\n              <p class=\"lead\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.notification_setting_mail", options) : helperMissing.call(depth0, "t", "chat.notification_setting_mail", options)))
    + "</p>\n            </div>\n          </label>\n        </div>\n        <div class=\"space5\">\n          <select id=\"mailIntervals\" class=\"input_value needsclick\">\n              ";
  stack2 = helpers.each.call(depth0, depth0.mailIntervals, {hash:{},inverse:self.noop,fn:self.programWithDepth(3, program3, data, depth0),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- {* /.cst *} -->\n  </section>\n  <section class=\"unit\">\n    <div class=\"cst\">\n      <button class=\"btn lrg prim\" id=\"saveNotificationSettingBtn\">\n        <span class=\"vaM\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.save", options) : helperMissing.call(depth0, "t", "chat.save", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</span>\n      </button>\n    </div>\n  </section>\n</div>";
  return buffer;
  });

this["HBS"]["tpl/chat/setting/theme.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {


  return "checked";
  }

  buffer += "<div class=\"contr\">\n  <section class=\"unit\">\n    <h1 class=\"hl\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.theme_setting_title", options) : helperMissing.call(depth0, "t", "chat.theme_setting_title", options)))
    + "</h1>\n\n    <div class=\"cst\">\n      <div class=\"in\">\n        <div class=\"flex\">\n          <label for=\"themeSetting\">\n            <div class=\"wrapCheckbox\">\n              <input id=\"themeSetting\" type=\"checkbox\" class=\"spr form_check\"\n                     ";
  stack2 = helpers['if'].call(depth0, depth0.isUsed, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += ">\n            </div>\n            <div class=\"itm vaM\">\n              <p class=\"lead\">";
  if (stack2 = helpers.itemDesc) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.itemDesc; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</p>\n            </div>\n            ";
  if (stack2 = helpers.optionalDesc) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.optionalDesc; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "\n          </label>\n        </div>\n      </div>\n    </div>\n  </section>\n  <section class=\"unit\">\n    <div class=\"cst\">\n      <button class=\"btn lrg prim\" id=\"saveSettingBtn\">\n        <span class=\"vaM\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.save", options) : helperMissing.call(depth0, "t", "chat.save", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</span>\n      </button>\n    </div>\n  </section>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/1on1-welcome-event.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing;


  buffer += "<section class=\"unit\" data-eventType=\"1on1welcome\">\n  <section class=\"cst\">\n    <div class=\"in\">\n      <p class=\"taC lineM\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.chat_event_welcome_1on1", options) : helperMissing.call(depth0, "t", "chat.chat_event_welcome_1on1", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n    </div>\n  </section>\n</section>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/agreement-message.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function";


  buffer += "<aside class=\"brd\" style=\"display: none;\" id=\"agreement-message\">\n    <div class=\"contr\">\n        <div class=\"brdFlex\">\n            <div class=\"brdItm\">\n                <p class=\"fsT\">";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n            </div>\n        </div>\n    </div>\n</aside>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/dummy-palette-space.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<div id=\"dummyPaletteSpace\" style=\"width: 100%; display: none\"></div>\n";
  });

this["HBS"]["tpl/chat/view/error-message.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<aside class=\"emgBrd\" id=\"error-message\">\n    <div class=\"contr\">\n        <div class=\"brdFlex\">\n            <div class=\"wrapBrdIco18\">\n                <span class=\"spr s18_etc_alert\"></span>\n            </div>\n            <div class=\"brdItm\">\n                <p class=\"fsS\"></p>\n            </div>\n        </div>\n    </div>\n</aside>";
  });

this["HBS"]["tpl/chat/view/event.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function";


  buffer += "  <p class=\"minor fsS update\">";
  if (stack1 = helpers.text) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.text; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/message-separator.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function";


  buffer += "<hr class=\"hr space6\">\n<p class=\"minor fsS taC\">";
  if (stack1 = helpers.dateSeparator) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.dateSeparator; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/message-stamp-other.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"flex flStamp\">\n  ";
  if (stack1 = helpers.userIcon) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.userIcon; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  <div class=\"wrapStamp\">\n    <p class=\"minor fsT fwB ellp space\">";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n    <img src=\"";
  if (stack1 = helpers.stampImgUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampImgUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"stamp132\">\n  </div>\n  <div class=\"wrapTime\">\n    <p class=\"minor fsT\">";
  if (stack1 = helpers.createTime) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.createTime; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</p>\n  </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/message-stamp-self.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"flex flStamp\">\n  <div class=\"wrapTime first\">\n    <p class=\"minor fsT\">";
  if (stack1 = helpers.createTime) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.createTime; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</p>\n  </div>\n  <div class=\"wrapStamp\">\n    <img src=\"";
  if (stack1 = helpers.stampImgUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampImgUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"stamp132\">\n  </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/message-text-other.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, functionType="function", escapeExpression=this.escapeExpression, self=this, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {

  var stack1;
  if (stack1 = helpers.text) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.text; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }

  buffer += "<div class=\"flex\">\n    ";
  if (stack1 = helpers.userIcon) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.userIcon; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <div class=\"itm\">\n        <p class=\"minor fsT fwB ellp space\">";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n        <div class=\"wrapBllnL\" data-urn=\"";
  if (stack1 = helpers.urn) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.urn; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" data-sender-id=\"";
  if (stack1 = helpers.senderId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.senderId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n            <div class=\"bllnL posT8 sen\">\n                ";
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data};
  if (stack1 = helpers.anchorize) { stack1 = stack1.call(depth0, options); }
  else { stack1 = depth0.anchorize; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if (!helpers.anchorize) { stack1 = blockHelperMissing.call(depth0, stack1, options); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            </div>\n        </div>\n    </div>\n    <div class=\"wrapTime\">\n        <p class=\"minor fsT\">";
  if (stack1 = helpers.createTime) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.createTime; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</p>\n    </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/message-text-self.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, functionType="function", escapeExpression=this.escapeExpression, self=this, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {

  var stack1;
  if (stack1 = helpers.text) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.text; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }

  buffer += "<div class=\"flex\">\n    <div class=\"wrapIco36\"> </div>\n    <div class=\"wrapTime first\">\n        <p class=\"minor fsT\">";
  if (stack1 = helpers.createTime) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.createTime; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</p>\n    </div>\n    <div class=\"itm\">\n        <div class=\"wrapBllnR\">\n            <div class=\"bllnR posT8 sen\">\n                ";
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data};
  if (stack1 = helpers.anchorize) { stack1 = stack1.call(depth0, options); }
  else { stack1 = depth0.anchorize; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if (!helpers.anchorize) { stack1 = blockHelperMissing.call(depth0, stack1, options); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            </div>\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/new-message-notification-footer.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function";


  buffer += "<div class=\"contr\">\n    <div class=\"brdFlex\">\n        <div class=\"brdItm\">\n            <p class=\"fwB fsT\">";
  if (stack1 = helpers.senderName) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.senderName; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n            <div class=\"fsT ellp\">";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</div>\n        </div>\n        <div class=\"brdCaret\"><span class=\"spr ia18_arw_b\"></span></div>\n    </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/new-message-notification-header.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing;


  buffer += "<div class=\"contr\">\n    <div class=\"brdFlex\">\n        <div class=\"brdItm\">\n            <p class=\"fwB fsS\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.conversation_notify_new_message", options) : helperMissing.call(depth0, "t", "chat.conversation_notify_new_message", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n        </div>\n        <div class=\"brdCaret\"><span class=\"spr ia18_arw_r\"></span></div>\n    </div>\n</div>";
  return buffer;
  });

this["HBS"]["tpl/chat/view/option-1on1.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"optionWrap\">\n    <div class=\"flex\">\n        <div class=\"itm notificationSettingElement\" id=\"notification\">\n            <a class=\"tap notificationSettingElement\">\n                <div class=\"in notificationSettingElement\">\n                    <span id=\"notificationSetting\" class=\"spr throb24 notificationSettingElement\"></span>\n                    <p class=\"txt notificationSettingElement\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.conversation_option_notify_on", options) : helperMissing.call(depth0, "t", "chat.conversation_option_notify_on", options)))
    + "</p>\n                </div>\n            </a>\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/option.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"optionWrap\">\n    <div class=\"flex\">\n        <div class=\"itm\" id=\"addFriendOption\">\n            <a class=\"tap\">\n                <div class=\"in\">\n                    <span class=\"spr ia24_option_add_friend\"></span>\n                    <p class=\"txt\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.conversation_option_add_members", options) : helperMissing.call(depth0, "t", "chat.conversation_option_add_members", options)))
    + "</p>\n                </div>\n            </a>\n        </div>\n        <div class=\"itm\" id=\"groupSetting\">\n            <a class=\"tap\">\n                <div class=\"in\">\n                    <span class=\"spr ia24_option_conf\"></span>\n                    <p class=\"txt\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.conversation_option_group_settings", options) : helperMissing.call(depth0, "t", "chat.conversation_option_group_settings", options)))
    + "</p>\n                </div>\n            </a>\n        </div>\n        <div class=\"itm notificationSettingElement\" id=\"notification\">\n            <a class=\"tap notificationSettingElement\">\n                <div class=\"in notificationSettingElement\">\n                    <span id=\"notificationSetting\" class=\"spr throb24 notificationSettingElement\"></span>\n                    <p class=\"txt notificationSettingElement\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.conversation_option_notify_on", options) : helperMissing.call(depth0, "t", "chat.conversation_option_notify_on", options)))
    + "</p>\n                </div>\n            </a>\n        </div>\n        <div class=\"itm\" id=\"leaveConversationOption\">\n            <a class=\"tap\">\n                <div class=\"in\">\n                    <span class=\"spr ia24_option_leave\"></span>\n                    <p class=\"txt\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.conversation_option_leave", options) : helperMissing.call(depth0, "t", "chat.conversation_option_leave", options)))
    + "</p>\n                </div>\n            </a>\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/chat/view/penalty-message.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function";


  buffer += "<aside class=\"ntcBrd tap\" id=\"penalty-message\" style=\"display: none;\">\n    <div class=\"contr\">\n        <div class=\"brdFlex\">\n            <div class=\"wrapBrdIco18\">\n                <span class=\"spr s18_etc_alert\"></span>\n            </div>\n            <div class=\"brdItm\">\n                <p class=\"fsS\">";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n            </div>\n            <div class=\"brdCaret\">\n                <span class=\"spr ia18_arw_r\"></span>\n            </div>\n        </div>\n    </div>\n</aside>";
  return buffer;
  });

this["HBS"]["tpl/chat/view/textarea.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<div class=\"contr\">\n  <div class=\"mdlFoot\">\n    <div class=\"flex\">\n      <div class=\"itm upImgFramePanel vaM wrapIco24\" id=\"emojiPaletteWrapper\">\n        <div class=\"modalControlPanel vaM taC tap\" id=\"emojiPaletteToggleButton\">\n          <span class=\"spr ia24_emocon_pictogram\" id=\"emojiPaletteOpenButton\"></span>\n          <span class=\"spr ia24_emocon_close\" id=\"emojiPaletteCloseButton\" style=\"display:none;\"></span>\n        </div>\n        <span class=\"att fsT spaceL\" id=\"paletteNewBadge\" style=\"display:none;\">NEW</span>\n      </div>\n      <div class=\"itm\">\n        <div class=\"txtarea\">\n          <textarea class=\"twoline\"></textarea>\n        </div>\n      </div>\n      <div class=\"wrapBtnS vaT\">\n        <button class=\"agreeSendBtn disabled\">\n          <span class=\"agreeSendTxt\"></span>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n";
  });

this["HBS"]["tpl/collection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"";
  if (stack1 = helpers.collectionClass) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.collectionClass; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " patty\"></div>";
  return buffer;
  });

this["HBS"]["tpl/contact/find-friend.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing;


  buffer += "<div class=\"in\">\n  <div class=\"taC space6\">\n    <img src=\"img/v2/2x/common/friends_find.png\" class=\"img282\">\n  </div>\n  <p class=\"space6 fwB\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.contact_list_tutorial", options) : helperMissing.call(depth0, "t", "chat.contact_list_tutorial", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n  <button class=\"btn lrg prim\">\n    <span class=\"vaM\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.find_friends", options) : helperMissing.call(depth0, "t", "chat.find_friends", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</span>\n  </button>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/contact/list-label.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<h2 class=\"";
  if (stack1 = helpers['class']) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0['class']; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "<span class=\"fwN\">(";
  if (stack1 = helpers.count) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.count; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ")</span></h2>";
  return buffer;
  });

this["HBS"]["tpl/contact/search-box.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<article class=\"cst\">\n    <div class=\"in\">\n        <div class=\"findInpt\">\n            <input type=\"search\">\n        </div>\n    </div>\n</article>\n";
  });

this["HBS"]["tpl/contact/user-info.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += " style=\"background-image:url(";
  if (stack1 = helpers.profileImageUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.profileImageUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ")\"";
  return buffer;
  }

function program3(depth0,data) {

  var buffer = "", stack1, stack2, options;
  buffer += "\n          <span class=\"tag skGreen spaceL6\">\n            <span class=\"tagCont\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.online", options) : helperMissing.call(depth0, "t", "chat.online", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</span>\n          </span>\n          ";
  return buffer;
  }

  buffer += "<a class=\"tap\" data-user-id=\"";
  if (stack1 = helpers.userId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.userId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n  <div class=\"in\">\n    <div class=\"flex\">\n      <div class=\"wrapIco36\">\n        <div class=\"ico36 tap usr\"";
  stack1 = helpers['if'].call(depth0, depth0.profileImageUrl, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "></div>\n      </div>\n      <div class=\"itm vaM\">\n        <p class=\"lead lineBreak\">";
  if (stack1 = helpers.nickname) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.nickname; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          ";
  stack1 = helpers['if'].call(depth0, depth0.isOnline, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </p>\n      </div>\n      <div class=\"itmCaret\">\n        <span class=\"spr ia18_arw_r\"></span>\n      </div>\n    </div><!-- {* /.flex *} -->\n  </div>\n</a>\n";
  return buffer;
  });

this["HBS"]["tpl/delivery/optout/main.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this, functionType="function";

function program1(depth0,data) {


  return "checked";
  }

  buffer += "<div class=\"contr\">\n  <section class=\"unit\">\n    <h1 class=\"hl\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.optout_title", options) : helperMissing.call(depth0, "t", "chat.optout_title", options)))
    + "</h1>\n\n    <div class=\"cst\">\n      <div class=\"in\">\n        <div class=\"flex\">\n          <label for=\"receiveDelivery\">\n            <div class=\"wrapCheckbox\">\n              <input id=\"receiveDelivery\" type=\"checkbox\" class=\"spr form_check\"\n                     ";
  stack2 = helpers.unless.call(depth0, depth0.isOptout, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += ">\n            </div>\n            <div class=\"itm vaM\">\n              <p class=\"lead\">";
  if (stack2 = helpers.receiveMessage) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.receiveMessage; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</p>\n            </div>\n          </label>\n        </div>\n      </div>\n    </div>\n  </section>\n  <section class=\"unit\">\n    <div class=\"cst\">\n      <button class=\"btn lrg prim\" id=\"saveOptoutSettingBtn\">\n        <span class=\"vaM\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.save", options) : helperMissing.call(depth0, "t", "chat.save", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</span>\n      </button>\n    </div>\n  </section>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/delivery/view/alert-message.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"unit taC\">\n  <p class=\"minor fsS update\">\n    ";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\n  </p>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/delivery/view/message.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n              ";
  stack1 = helpers['if'].call(depth0, depth0.isCommunity, {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n              ";
  if (stack1 = helpers.body) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.body; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          ";
  return buffer;
  }
function program2(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n                  ";
  stack1 = helpers.unless.call(depth0, depth0.isModerationNg, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n              ";
  return buffer;
  }
function program3(depth0,data) {

  var buffer = "", stack1, options;
  buffer += "\n                    <p class=\"space10\" id=\"sender-profile-link\">\n                      <a href=";
  if (stack1 = helpers.senderProfileUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.senderProfileUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ">\n                          ";
  if (stack1 = helpers.senderName) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.senderName; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\n                      </a>\n                        ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.link_sender_profile_community", options) : helperMissing.call(depth0, "t", "chat.link_sender_profile_community", options)))
    + "\n                    </p>\n                  ";
  return buffer;
  }

  buffer += "<div class=\"flex\">\n    ";
  if (stack1 = helpers.userIcon) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.userIcon; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  <div class=\"itm\">\n    <p class=\"minor fsT fwB ellp space\">\n        ";
  if (stack1 = helpers.mark) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.mark; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        ";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </p>\n\n    <div class=\"wrapBllnL\" data-urn=\"";
  if (stack1 = helpers.urn) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.urn; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" data-sender-id=\"";
  if (stack1 = helpers.senderId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.senderId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n      <div class=\"bllnL posT8 sen\">\n          ";
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data};
  if (stack1 = helpers.anchorize) { stack1 = stack1.call(depth0, options); }
  else { stack1 = depth0.anchorize; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if (!helpers.anchorize) { stack1 = blockHelperMissing.call(depth0, stack1, options); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </div>\n    </div>\n  </div>\n  <div class=\"wrapTime\">\n    <p class=\"minor fsT\">";
  if (stack1 = helpers.createTime) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.createTime; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</p>\n  </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/delivery/view/official-user-profile-dialog.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {

  var buffer = "", stack1, options;
  buffer += "\n            ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_suspend_reception_button_community", options) : helperMissing.call(depth0, "t", "chat.dialog_suspend_reception_button_community", options)))
    + "\n        ";
  return buffer;
  }

function program3(depth0,data) {

  var buffer = "", stack1, options;
  buffer += "\n            ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_suspend_reception_button", options) : helperMissing.call(depth0, "t", "chat.dialog_suspend_reception_button", options)))
    + "\n        ";
  return buffer;
  }

  buffer += "<div class=\"popDlog popChat\" id=\"popDlog\">\n  <div class=\"popDlogIn\" id=\"popDlogIn\">\n    <div class=\"popBtnCloseWhite\" id=\"popBtnCloseWhite\"><span class=\"spr ia18_close_popup\"></span></div>\n    <div class=\"space\">\n      <span class=\"lead lineBreak vaM fsL\">";
  stack2 = ((stack1 = ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.nickname)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</span>\n    </div>\n    <div class=\"taC space8\">\n      <div class=\"profThumWide tap dIb\"\n           style=\"background-image:url("
    + escapeExpression(((stack1 = ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.profileImageUrl)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")\">\n      </div>\n    </div>\n\n    <div class=\"btn prim lrg\" id=\"link-to-detail\">\n        ";
  stack2 = helpers['if'].call(depth0, depth0.isCommunity, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n    </div>\n  </div>\n</div>";
  return buffer;
  });

this["HBS"]["tpl/delivery/view/option-community.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"optionWrap\">\n  <div class=\"flex\">\n    <div class=\"itm\" id=\"suspendReception\">\n      <a class=\"tap\">\n        <div class=\"in\">\n          <span class=\"spr ia24_option_denied\"></span>\n\n          <p class=\"txt\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.header_option_suspend_reception", options) : helperMissing.call(depth0, "t", "chat.header_option_suspend_reception", options)))
    + "</p>\n        </div>\n      </a>\n    </div>\n    <div class=\"itm notificationElement\" id=\"notification\">\n      <a class=\"tap notificationElement\">\n        <div class=\"in notificationElement\">\n          <span class=\"spr throb24 notificationElement\" id=\"notificationBtn\"></span>\n\n          <p class=\"txt notificationElement\" id=\"notificationTxt\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.header_option_notify_to_off", options) : helperMissing.call(depth0, "t", "chat.header_option_notify_to_off", options)))
    + "</p>\n        </div>\n      </a>\n    </div>\n  </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/delivery/view/option.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"optionWrap\">\n    <div class=\"flex\">\n        <div class=\"itm\" id=\"suspendReception\">\n            <a class=\"tap\">\n                <div class=\"in\">\n                    <span class=\"spr ia24_option_denied\"></span>\n                    <p class=\"txt\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.header_option_suspend_reception", options) : helperMissing.call(depth0, "t", "chat.header_option_suspend_reception", options)))
    + "</p>\n                </div>\n            </a>\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/delivery/view/suspend_reception_dialog.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {

  var buffer = "", stack1, stack2, options;
  buffer += "\n        <p class=\"space\">\n            ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_suspend_reception_description_user_id_pc", options) : helperMissing.call(depth0, "t", "chat.dialog_suspend_reception_description_user_id_pc", options)))
    + ": ";
  if (stack2 = helpers.publisherId) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.publisherId; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "\n        </p>\n      ";
  return buffer;
  }

  buffer += "<div class=\"popDlog popChat\" id=\"popDlog\">\n  <div class=\"popDlogIn\" id=\"popDlogIn\">\n    <div class=\"popBtnCloseWhite\" id=\"popBtnCloseWhite\"><span class=\"spr ia18_close_popup\"></span></div>\n    <div class=\"taC space\">\n      <div class=\"profThumWide tap dIb\"\n           style=\"background-image:url(";
  if (stack1 = helpers.imageIconUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.imageIconUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ")\">\n      </div>\n    </div>\n    <div class=\"ntcCst first last space8\">\n      <div class=\"in\">\n        <div class=\"flex\">\n          <div class=\"wrapIco18 vaM\">\n            <span class=\"spr s18_etc_alert\"></span>\n          </div>\n          <div class=\"itm taL vaM\">\n            <p class=\"sen fsS\">\n                ";
  if (stack1 = helpers.notice) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.notice; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <p class=\"space\">\n        ";
  if (stack1 = helpers.description) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.description; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </p>\n    <p class=\"minor space8\">\n        ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_suspend_reception_annotation", options) : helperMissing.call(depth0, "t", "chat.dialog_suspend_reception_annotation", options)))
    + "\n    </p>\n      ";
  stack2 = helpers['if'].call(depth0, depth0.publisherId, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n    <div class=\"btn prim lrg\">\n        ";
  if (stack2 = helpers.buttonLabel) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.buttonLabel; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "\n    </div>\n  </div>\n</div>";
  return buffer;
  });

this["HBS"]["tpl/dialog.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n            <div class=\"itm\" id=\"secondary\">\n                <button class=\"btn mid\">";
  if (stack1 = helpers.secondary) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.secondary; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</button>\n            </div>\n            ";
  return buffer;
  }

  buffer += "<div class=\"popDlog\">\n    <div class=\"popDlogIn\">\n        <p class=\"lead taC space10\">";
  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</p>\n        <p class=\"minorL space6\">";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n        <div class=\"flex flCol\">\n            ";
  stack1 = helpers['if'].call(depth0, depth0.secondary, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            <div class=\"itm\" id=\"primary\">\n                <button class=\"btn mid prim\">";
  if (stack1 = helpers.primary) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.primary; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</button>\n            </div>\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/dialog/release-announce-dialog.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n      <div class=\"popChatBnr space10\">\n        <img src=\"";
  if (stack1 = helpers.imagePath) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.imagePath; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"img282\">\n      </div>\n    ";
  return buffer;
  }

  buffer += "<div class=\"popDlog popChat\" id=\"popDlog\">\n  <div class=\"popDlogIn\" id=\"popDlogIn\">\n    ";
  stack1 = helpers['if'].call(depth0, depth0.imagePath, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <p class=\"space6 lineM\">";
  if (stack1 = helpers.body) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.body; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</p>\n    <button class=\"btn lrg prim js-action\"><span class=\"vaM\">";
  if (stack1 = helpers.actionLabel) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.actionLabel; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</span></button>\n  </div>\n</div>";
  return buffer;
  });

this["HBS"]["tpl/error.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n          <span class=\"notFoundTtl\">";
  if (stack1 = helpers.errorCode) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.errorCode; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</span>\n          <span class=\"notFoundTxt\">";
  if (stack1 = helpers.errorCodeMessage) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.errorCodeMessage; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</span>\n        ";
  return buffer;
  }

function program3(depth0,data) {


  return "\n          <span class=\"notFoundTtl\">Sorry...</span>\n        ";
  }

  buffer += "<article class=\"notFound\">\n  <div class=\"notFoundCst\">\n    <div class=\"notFoundIn\">\n        ";
  options = {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data};
  stack2 = ((stack1 = helpers.ifx || depth0.ifx),stack1 ? stack1.call(depth0, depth0.errorCode, "&&", depth0.errorCodeMessage, options) : helperMissing.call(depth0, "ifx", depth0.errorCode, "&&", depth0.errorCodeMessage, options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n    </div>\n  </div>\n</article>\n\n<section class=\"unit\">\n  <div class=\"sen taC fwB space10\">";
  if (stack2 = helpers.message) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.message; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</div>\n  <div class=\"btns\">\n    <div class=\"space8\"><a class=\"btn lrg prim js-action\">";
  if (stack2 = helpers.action) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.action; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</a></div>\n  </div>\n</section>\n";
  return buffer;
  });

this["HBS"]["tpl/friend-request-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"btn prim space6\" id=\"do-link-request\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_friend_request", options) : helperMissing.call(depth0, "t", "chat.dialog_friend_request", options)))
    + "</div>";
  return buffer;
  });

this["HBS"]["tpl/friend-request-incoming-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"btn primOrange space6\" id=\"confirm-link-request\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_friend_request_incoming", options) : helperMissing.call(depth0, "t", "chat.dialog_friend_request_incoming", options)))
    + "</div>\n";
  return buffer;
  });

this["HBS"]["tpl/friend-request-outgoing-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"btn suc space6\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_friend_request_outgoing", options) : helperMissing.call(depth0, "t", "chat.dialog_friend_request_outgoing", options)))
    + "</div>";
  return buffer;
  });

this["HBS"]["tpl/intro-link.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"infCst\">\n  <div class=\"tap\">\n    <div class=\"in\">\n      <div class=\"flex\">\n        <div class=\"itm vaM\">\n          <p>";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</p>\n        </div>\n        <div class=\"itmCaret\">\n          <span class=\"spr ia18_arw_r\"></span>\n        </div>\n      </div><!-- {* /.flex *} -->\n    </div>\n  </div><!-- {* /.tap *} -->\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/jump-to-chat-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"btn space6\" id=\"link-to-chat\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_jump_to_chat", options) : helperMissing.call(depth0, "t", "chat.dialog_jump_to_chat", options)))
    + "</div>";
  return buffer;
  });

this["HBS"]["tpl/jump-to-profile-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"btn space6\" id=\"link-to-profile\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_jump_to_profile", options) : helperMissing.call(depth0, "t", "chat.dialog_jump_to_profile", options)))
    + "</div>";
  return buffer;
  });

this["HBS"]["tpl/jump-to-report-button.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"btn space6\" id=\"link-to-report\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.dialog_jump_to_report", options) : helperMissing.call(depth0, "t", "chat.dialog_jump_to_report", options)))
    + "</div>";
  return buffer;
  });

this["HBS"]["tpl/list-item-link.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"cst\">\n  <div class=\"tap js-list-item-link\" data-url=\"";
  if (stack1 = helpers.url) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.url; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n    <div class=\"inFat\">\n      <div class=\"flex\">\n        <div class=\"itm vaM\">\n          <p class=\"lead\">";
  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n        </div>\n          ";
  if (stack1 = helpers.arrow) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.arrow; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\n      </div>\n    </div>\n  </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/load-more.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<a class=\"tap\">\n    <div class=\"in\" id=\"more-button-view\">\n        <p class=\"sMorePgr\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.see_more", options) : helperMissing.call(depth0, "t", "chat.see_more", options)))
    + "\n            <span class=\"spr ia18_arw_b\"></span>\n        </p>\n    </div>\n</a>\n<div class=\"in\" id=\"more-loading-view\" style=\"display: none;\">\n    <p class=\"taC\">\n        <span class=\"spr throb24\"></span>\n    </p>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/loading.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<span class=\"spr throb24\"></span>\n";
  });

this["HBS"]["tpl/loadmore-collection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n<section class=\"";
  if (stack1 = helpers.loadMoreClass) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.loadMoreClass; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\"></section>\n";
  return buffer;
  }

  buffer += "<div class=\"";
  if (stack1 = helpers.collectionClass) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.collectionClass; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " patty\"></div>\n";
  stack1 = helpers.unless.call(depth0, depth0.allLoaded, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  });

this["HBS"]["tpl/loadmore-history-collection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n<section class=\"";
  if (stack1 = helpers.loadMoreClass) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.loadMoreClass; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\"></section>\n";
  return buffer;
  }

  stack1 = helpers.unless.call(depth0, depth0.allLoaded, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n<div class=\"";
  if (stack1 = helpers.collectionClass) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.collectionClass; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\"></div>\n";
  return buffer;
  });

this["HBS"]["tpl/modal-header.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};



  return "<header class=\"mdlWrap fixed\">\n    <div class=\"contr\">\n        <div class=\"mdl\"></div>\n    </div>\n</header>\n";
  });

this["HBS"]["tpl/note.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n        <h1 class=\"hl\">";
  if (stack1 = helpers.head) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.head; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</h1>\n      ";
  return buffer;
  }

  buffer += "<section class=\"unit\">\n  <div class=\"space6\">\n      ";
  stack1 = helpers['if'].call(depth0, depth0.head, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <div class=\"cst\">\n      <div class=\"in\">\n          ";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </div>\n    </div>\n  </div>\n</section>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/emoji-palette-category.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n      <li>\n        <div class=\"tap js-emoji-category\" id=\"";
  if (stack1 = helpers.eventId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.eventId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\"><span class=\"spr ";
  if (stack1 = helpers.className) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.className; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " vaM\"></span></div>\n      </li>\n    ";
  return buffer;
  }

  buffer += "<section class=\"modalControlEmojiTab\">\n  <ul class=\"unstyl\">\n    ";
  stack1 = helpers.each.call(depth0, depth0.categories, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <li>\n      <div class=\"tap js-emoji-delete\"><span class=\"spr ia24_emocon_delete vaM\"></span></div>\n    </li>\n  </ul>\n</section>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/emoji-palette-partial.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n      <li>\n        <div class=\"tap js-emoji\" emoji_id=\"";
  if (stack1 = helpers.id) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.id; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" emoji_name=\"";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n          <div class=\"emoji ";
  if (stack1 = helpers.id) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.id; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" data-emoji-name=\"";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\"></div>\n        </div>\n      </li>\n      ";
  return buffer;
  }

  buffer += "<div class=\"carlEmojiCol\">\n  <div class=\"carlEmojiImg\">\n    <ul class=\"emojiPalette unstyl hrz space10\">\n      ";
  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </ul>\n  </div>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/emoji-palette-pc.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n      <div class=\"carlEmojilist\" id=\"carlEmojilist";
  if (stack1 = helpers.index) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.index; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n        <div id=\"carlEmojiCont";
  if (stack1 = helpers.index) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.index; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"clearfix\">\n          ";
  stack1 = helpers.each.call(depth0, depth0.partials, {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </div>\n      </div>\n    ";
  return buffer;
  }
function program2(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n            ";
  stack1 = (typeof depth0 === functionType ? depth0.apply(depth0) : depth0);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          ";
  return buffer;
  }

  buffer += "<section class=\"modalControlEmojiCst\" id=\"modalControlEmojiCst\" style=\"overflow-y: auto; overflow-x: hidden\">\n  <div class=\"modalControlEmojiIn\">\n    ";
  stack1 = helpers.each.call(depth0, depth0.categories, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n</section>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/emoji-palette.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n      <div class=\"carlEmojilist\" id=\"carlEmojilist";
  if (stack1 = helpers.index) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.index; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n        <div id=\"carlEmojiCont";
  if (stack1 = helpers.index) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.index; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"clearfix carlEmojiCont\">\n          ";
  stack1 = helpers.each.call(depth0, depth0.partials, {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </div>\n        <div class=\"carlEmojiLmp\" id=\"carlEmojiLmp";
  if (stack1 = helpers.index) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.index; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\"></div>\n      </div>\n    ";
  return buffer;
  }
function program2(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n            ";
  stack1 = (typeof depth0 === functionType ? depth0.apply(depth0) : depth0);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          ";
  return buffer;
  }

  buffer += "<section class=\"modalControlEmojiCst\" id=\"modalControlEmojiCst\">\n  <div class=\"modalControlEmojiIn\">\n    ";
  stack1 = helpers.each.call(depth0, depth0.categories, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n</section>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/stamp-palette-category.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n        <li>\n          <div class=\"js-stamp-category\" stamp_id=\"";
  if (stack1 = helpers.stampId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n            <img src=\"";
  if (stack1 = helpers.thumbnailUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.thumbnailUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"stamp30 vaT\">\n          </div>\n        </li>\n      ";
  return buffer;
  }

  buffer += "<section class=\"modalControlStampTab\">\n  <div class=\"contr\">\n    <ul class=\"unstyl\" id=\"selectStamp\">\n      <!--<li>-->\n        <!--<div class=\"js-stamp-hisory\">-->\n          <!--<span class=\"spr ia24_emocon_history vaT spaceT\"></span>-->\n        <!--</div>-->\n      <!--</li>-->\n      ";
  stack1 = helpers.each.call(depth0, depth0.stampSets, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      <!--TODO: ミッションスタンプリリース時に導線追加-->\n      <!--<li>-->\n        <!--<div class=\"js-stamp-add\">-->\n          <!--<span class=\"spr ia24_emocon_add vaT spaceT\"></span>-->\n        <!--</div>-->\n      <!--</li>-->\n      <!--<li>-->\n        <!--<div class=\"js-stamp-setting\">-->\n          <!--<span class=\"spr ia24_emocon_gear vaT spaceT\"></span>-->\n        <!--</div>-->\n      <!--</li>-->\n    </ul>\n  </div>\n</section>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/stamp-palette-partial.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n      <li>\n        <div class=\"js-stamp\" stamp_unit_id=\"";
  if (stack1 = helpers.stamp_unit_id) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stamp_unit_id; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n          <img src=\"";
  if (stack1 = helpers.stamp_unit_img_url) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stamp_unit_img_url; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"stamp66\">\n        </div>\n      </li>\n    ";
  return buffer;
  }

  buffer += "<div class=\"carlStampCol\">\n  <ul class=\"stampPalette unstyl hrz space10\">\n    ";
  stack1 = helpers.each.call(depth0, depth0.stampUnits, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </ul>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/stamp-palette-pc.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n      <div class=\"carlStamplist\" id=\"carlStamplist";
  if (stack1 = helpers.stampId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n        <div id=\"carlStampCont";
  if (stack1 = helpers.stampId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"clearfix carlStampCont stampUnitWrapper";
  if (stack1 = helpers.stampId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n        </div>\n      </div>\n    ";
  return buffer;
  }

  buffer += "<section class=\"modalControlStampCst\" id=\"modalControlStampCst\" style=\"overflow-y: auto; overflow-x: hidden\">\n  <div class=\"modalControlStampIn\">\n    ";
  stack1 = helpers.each.call(depth0, depth0.stampSets, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n</section>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/stamp-palette.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n      <div class=\"carlStamplist\" id=\"carlStamplist";
  if (stack1 = helpers.stampId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n        <div id=\"carlStampCont";
  if (stack1 = helpers.stampId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"clearfix carlStampCont stampUnitWrapper";
  if (stack1 = helpers.stampId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n        </div>\n        <div class=\"carlStampLmp\" id=\"carlStampLmp";
  if (stack1 = helpers.stampId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.stampId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\"></div>\n      </div>\n    ";
  return buffer;
  }

  buffer += "<section class=\"modalControlStampCst\" id=\"modalControlStampCst\">\n  <div class=\"modalControlStampIn\">\n    ";
  stack1 = helpers.each.call(depth0, depth0.stampSets, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n</section>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/tab-using-emoji.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"contr\">\n  <ul class=\"unstyl\" id=\"tabs\">\n    <li class=\"js-tab-stamp\">\n      <div class=\"tap\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.stamp", options) : helperMissing.call(depth0, "t", "chat.stamp", options)))
    + "</div>\n    </li>\n    <li class=\"cur js-tab-emoji\">\n      <div>";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.emoji", options) : helperMissing.call(depth0, "t", "chat.emoji", options)))
    + "</div>\n    </li>\n  </ul>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/palette/tab-using-stamp.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<div class=\"contr\">\n  <ul class=\"unstyl\" id=\"tabs\">\n    <li class=\"cur js-tab-stamp\">\n      <div>";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.stamp", options) : helperMissing.call(depth0, "t", "chat.stamp", options)))
    + "</div>\n    </li>\n    <li class=\"js-tab-emoji\">\n      <div class=\"tap\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.emoji", options) : helperMissing.call(depth0, "t", "chat.emoji", options)))
    + "</div>\n    </li>\n  </ul>\n</div>\n";
  return buffer;
  });

this["HBS"]["tpl/selectable-member-info.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {

  var buffer = "", stack1;
  buffer += " style=\"background-image:url(";
  if (stack1 = helpers.profileImageUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.profileImageUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ")\"";
  return buffer;
  }

function program3(depth0,data) {

  var buffer = "", stack1, options;
  buffer += "\n          <span class=\"tag skGreen spaceL6\"><span class=\"tagCont\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.online", options) : helperMissing.call(depth0, "t", "chat.online", options)))
    + "</span></span>\n          ";
  return buffer;
  }

  buffer += "<label class=\"tap\">\n  <div class=\"in\">\n    <div class=\"flex\">\n      <div class=\"wrapIco36\">\n        <div class=\"ico36 tap usr\"";
  stack1 = helpers['if'].call(depth0, depth0.profileImageUrl, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "></div>\n      </div>\n      <div class=\"itm vaM\">\n        <p class=\"lead lineBreak\">";
  if (stack1 = helpers.nickname) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.nickname; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          ";
  stack1 = helpers['if'].call(depth0, depth0.isOnline, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </p>\n      </div>\n      <div class=\"wrapCheckbox\">\n        <input type=\"checkbox\" class=\"spr form_check\" value=\"";
  if (stack1 = helpers.userId) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.userId; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n      </div>\n    </div>\n  </div>\n</label>\n";
  return buffer;
  });

this["HBS"]["tpl/sns-profile-dialog.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", self=this;

function program1(depth0,data) {

  var buffer = "", stack1, options;
  buffer += "\n        <div class=\"tag skGreen\">\n          <span class=\"tagCont\">";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers['t'] || depth0['t']),stack1 ? stack1.call(depth0, "chat.online", options) : helperMissing.call(depth0, "t", "chat.online", options)))
    + "</span>\n        </div>\n        ";
  return buffer;
  }

function program3(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n          <div class=\"profThumWide tap\" style=\"background-image:url("
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.profileAvatar)),stack1 == null || stack1 === false ? stack1 : stack1.entireAvatarImageUrl)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")\"></div>\n          ";
  return buffer;
  }

function program5(depth0,data) {

  var buffer = "", stack1;
  buffer += "\n          <div class=\"profThumWide tap\" style=\"background-image:url("
    + escapeExpression(((stack1 = ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.profileImageUrl)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")\"></div>\n          ";
  return buffer;
  }

  buffer += "<div class=\"popDlog popChat\" id=\"popDlog\">\n  <div class=\"popDlogIn\" id=\"popDlogIn\">\n    <div class=\"popBtnCloseWhite\" id=\"popBtnCloseWhite\">\n      <span class=\"spr ia18_close_popup\"></span>\n    </div>\n    <div class=\"in\">\n      <div class=\"space\">\n        <span class=\"lead lineBreak vaM fsL\">";
  stack2 = ((stack1 = ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.nickname)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</span>\n        ";
  stack2 = helpers['if'].call(depth0, ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.isOnline), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n      </div>\n      <p class=\"minorL lineBreak vaM space6\">";
  stack2 = ((stack1 = ((stack1 = ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.fullname)),stack1 == null || stack1 === false ? stack1 : stack1.lastname)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += " ";
  stack2 = ((stack1 = ((stack1 = ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.fullname)),stack1 == null || stack1 === false ? stack1 : stack1.middlename)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += " ";
  stack2 = ((stack1 = ((stack1 = ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.fullname)),stack1 == null || stack1 === false ? stack1 : stack1.firstname)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</p>\n      <div class=\"flex\">\n        <div class=\"wrapProfThum165\">\n          ";
  stack2 = helpers['if'].call(depth0, ((stack1 = ((stack1 = depth0.user),stack1 == null || stack1 === false ? stack1 : stack1.profileAvatar)),stack1 == null || stack1 === false ? stack1 : stack1.isCurrent), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n        </div>\n        <div class=\"itm\"></div>\n      </div>\n    </div>\n  </div>\n</div>";
  return buffer;
  });
var AsyncStorage;
(function (AsyncStorage) {
    AsyncStorage.prefix = 'blz-';
    AsyncStorage._private_storage = {
        'Local': {},
        'Session': {}
    };
    AsyncStorage._localSettingCacheKeys = [
        "COBIT_LOGIN",
        "MY_CONVERSATION",
        "UNRESOLVED_IDENTITY_USER"
    ];

    AsyncStorage.init = function () {
        var key = AsyncStorage.prefix + 'write-test';
        try  {
            localStorage[key] = 'test';
        } catch (e) {
            var priv = AsyncStorage._private_storage;
            AsyncStorage.makeAccessor(priv['Local'], priv['Session']);
            return false;
        }
        AsyncStorage.makeAccessor(localStorage, sessionStorage);
        return true;
    };

    AsyncStorage.clear = function () {
        localStorage.clear();
        sessionStorage.clear();
    };

    AsyncStorage.clearLocalSettings = function () {
        try  {
            AsyncStorage._localSettingCacheKeys.forEach(function (key) {
                AsyncStorage.Local.removeItem(key);
            });
        } catch (e) {
            debug(e);
            return false;
        }
        return true;
    };

    AsyncStorage.currentTime = function () {
        return new Date().getTime();
    };

    AsyncStorage.makeAccessor = function (local, session) {
        [
            {
                'name': 'Local',
                'storage': local
            },
            {
                'name': 'Session',
                'storage': session
            }
        ].forEach(function (storage) {
            AsyncStorage[storage.name] = {};

            AsyncStorage[storage.name].getItem = function (key) {
                return storage.storage[AsyncStorage.prefix + key];
            };

            AsyncStorage[storage.name].getJson = function (key) {
                var storageKey = AsyncStorage.prefix + key;
                if (typeof storage.storage[storageKey] == 'undefined') {
                    return undefined;
                }
                var text = storage.storage[storageKey];
                try  {
                    var json = JSON.parse(text);
                    var timestamp = AsyncStorage.currentTime();
                    var expires = json['expires'];
                    var expiredTime = json['timestamp'] + expires;
                    if (expires === 0 || timestamp < expiredTime) {
                        return json['data'];
                    }
                    AsyncStorage[storage.name].removeItem(storageKey);
                    return undefined;
                } catch (e) {
                    debug('Invalid json');
                }
            };

            AsyncStorage[storage.name].setItem = function (key, data) {
                var defer = new Deferred();
                try  {
                    storage.storage[AsyncStorage.prefix + key] = data;
                } catch (e) {
                    setTimeout(function () {
                        return defer.fail(e);
                    });
                }
                setTimeout(function () {
                    return defer.call();
                });
                return defer;
            };

            AsyncStorage[storage.name].removeItem = function (key) {
                try  {
                    delete storage.storage[AsyncStorage.prefix + key];
                    return true;
                } catch (e) {
                    throw new Error('fail to remove item from storage');
                }
            };
        });
    };
})(AsyncStorage || (AsyncStorage = {}));
var Service;
(function (Service) {
    Service.CACHE_TYPE_NO_CACHE = -1;
    Service.CACHE_TYPE_PERMANENT = 0;

    var Request = (function () {
        function Request(apiName, params, expires) {
            if (typeof apiName === "undefined") { apiName = '***'; }
            if (typeof params === "undefined") { params = {}; }
            if (typeof expires === "undefined") { expires = 60 * 60 * 3; }
            this.apiName = apiName;
            this.params = params;
            this.expires = expires;
        }
        Request.prototype.getRequestKey = function () {
            var _this = this;
            var key = this.apiName;
            Object.keys(this.params).forEach(function (index) {
                key += '_' + _this.params[index];
            });
            return key;
        };

        Request.prototype.getApiName = function () {
            return this.apiName;
        };

        Request.prototype.getParams = function () {
            return this.params;
        };

        Request.prototype.get = function () {
            if (this.expires === Service.CACHE_TYPE_NO_CACHE) {
                return undefined;
            } else {
                return AsyncStorage.Local.getJson(this.getRequestKey());
            }
        };

        Request.prototype.set = function (result) {
            if (this.expires === Service.CACHE_TYPE_NO_CACHE) {
                return true;
            }
            try  {
                AsyncStorage.Local.setItem(this.getRequestKey(), JSON.stringify({
                    'timestamp': new Date().getTime(),
                    'expires': this.expires,
                    'data': result
                }));
            } catch (e) {
                debug(e);
                return false;
            }
            return true;
        };

        Request.prototype.remove = function () {
            try  {
                AsyncStorage.Local.removeItem(this.getRequestKey());
            } catch (e) {
                debug(e);
                return false;
            }
            return true;
        };
        return Request;
    })();
    Service.Request = Request;
})(Service || (Service = {}));
var Blitz;
(function (Blitz) {
    (function (ConversationType) {
        ConversationType[ConversationType["Group"] = 0] = "Group";
        ConversationType[ConversationType["OneOnOne"] = 1] = "OneOnOne";
        ConversationType[ConversationType["OneOnOneWithBlockUser"] = 2] = "OneOnOneWithBlockUser";
        ConversationType[ConversationType["My"] = 3] = "My";
        ConversationType[ConversationType["Game"] = 4] = "Game";
        ConversationType[ConversationType["Official"] = 5] = "Official";
        ConversationType[ConversationType["Staff"] = 6] = "Staff";
        ConversationType[ConversationType["Community"] = 7] = "Community";
        ConversationType[ConversationType["Special"] = 8] = "Special";
    })(Blitz.ConversationType || (Blitz.ConversationType = {}));
    var ConversationType = Blitz.ConversationType;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var UserFullName = (function () {
        function UserFullName(firstname, middlename, lastname) {
            this.firstname = firstname;
            this.middlename = middlename;
            this.lastname = lastname;
        }
        return UserFullName;
    })();
    Blitz.UserFullName = UserFullName;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ProfileAvatar = (function () {
        function ProfileAvatar(entireAvatarImageUrl, isCurrent) {
            this.entireAvatarImageUrl = entireAvatarImageUrl;
            this.isCurrent = isCurrent;
        }
        return ProfileAvatar;
    })();
    Blitz.ProfileAvatar = ProfileAvatar;
})(Blitz || (Blitz = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Blitz;
(function (Blitz) {
    var User = (function (_super) {
        __extends(User, _super);
        function User(userId, nickname, fullname, profileImageUrl, profileAvatar) {
            _super.call(this, userId);
            this.nickname = nickname;
            this.fullname = fullname;
            this.profileImageUrl = profileImageUrl;
            this.profileAvatar = profileAvatar;
        }
        User.prototype.getUserId = function () {
            return this.getIdentity().getValue();
        };

        User.prototype.getProfileUrl = function () {
            if (SNS.Config.isPC()) {
                return SNS.Config.getGreeJpUserProfileURL(this.getUserId());
            } else {
                return SNS.Config.getSnsUserProfileUrl(this.getUserId());
            }
        };

        User.prototype.getNickname = function () {
            return this.nickname.trim();
        };
        return User;
    })(DDD.Entity);
    Blitz.User = User;

    var SnsUserId = (function (_super) {
        __extends(SnsUserId, _super);
        function SnsUserId(userId) {
            _super.call(this, userId);
        }
        SnsUserId.createFromString = function (userId) {
            return new SnsUserId(parseInt(userId));
        };
        return SnsUserId;
    })(DDD.NumberIdentity);
    Blitz.SnsUserId = SnsUserId;

    var CobitUserId = (function (_super) {
        __extends(CobitUserId, _super);
        function CobitUserId(userId) {
            _super.call(this, userId);
        }
        return CobitUserId;
    })(DDD.Identity);
    Blitz.CobitUserId = CobitUserId;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationDisplaySettingService = (function () {
        function ConversationDisplaySettingService(client) {
            this.client = client;
        }
        ConversationDisplaySettingService.prototype.hide = function (conversationId) {
            return this.update(conversationId, false);
        };

        ConversationDisplaySettingService.prototype.display = function (conversationId) {
            return this.update(conversationId, true);
        };

        ConversationDisplaySettingService.prototype.update = function (conversationId, displays) {
            var promise = new monapt.Promise();
            this.client.updateConversationDisplaySetting(conversationId.getValue(), displays).next(function (response) {
                var updated = response['personal_setting']['displayed'];
                promise.success(updated);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };
        return ConversationDisplaySettingService;
    })();
    Blitz.ConversationDisplaySettingService = ConversationDisplaySettingService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationSetting = (function () {
        function ConversationSetting(isDisplayed, isNotified) {
            this.isDisplayed = isDisplayed;
            this.isNotified = isNotified;
            this.displaySettingService = new Blitz.ConversationDisplaySettingService(app.cobit);
        }
        ConversationSetting.prototype.hide = function (conversationId) {
            return this.displaySettingService.hide(conversationId);
        };

        ConversationSetting.prototype.display = function (conversationId) {
            return this.displaySettingService.display(conversationId);
        };
        return ConversationSetting;
    })();
    Blitz.ConversationSetting = ConversationSetting;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var Message = (function () {
        function Message(toConversationId, senderId, meta) {
            this.toConversationId = toConversationId;
            this.senderId = senderId;
            this.meta = meta;
        }
        Message.prototype.isMine = function (myId) {
            return myId.equals(this.senderId);
        };

        Message.prototype.getToConversationId = function () {
            return this.toConversationId;
        };
        return Message;
    })();
    Blitz.Message = Message;

    var TextMessage = (function (_super) {
        __extends(TextMessage, _super);
        function TextMessage(toConversationId, senderId, meta, text) {
            _super.call(this, toConversationId, senderId, meta);
            this.text = text;
        }
        TextMessage.empty = function (toConversationId, senderId, meta) {
            return new this(toConversationId, senderId, meta, "");
        };

        TextMessage.prototype.getText = function () {
            return this.text;
        };

        TextMessage.prototype.getTextCount = function () {
            return this.text.trim().length;
        };

        TextMessage.prototype.textForRender = function () {
            return new Util.Text(this.text).escape().convertEmoji().disableATag().text;
        };
        TextMessage.maxInputLength = 1000;
        return TextMessage;
    })(Message);
    Blitz.TextMessage = TextMessage;

    var StampMessage = (function (_super) {
        __extends(StampMessage, _super);
        function StampMessage(stampUnit, stampName, toConversationId, senderId, meta) {
            _super.call(this, toConversationId, senderId, meta);
            this.stampUnit = stampUnit;
            this.stampName = stampName;
        }
        return StampMessage;
    })(Message);
    Blitz.StampMessage = StampMessage;

    var DeliveryHeadline = (function (_super) {
        __extends(DeliveryHeadline, _super);
        function DeliveryHeadline(toConversationId, senderId, meta, text) {
            _super.call(this, toConversationId, senderId, meta, text);
        }
        DeliveryHeadline.prototype.textForRender = function () {
            return new Util.Text(this.text).escape().convertEmoji().disableATag().text;
        };
        return DeliveryHeadline;
    })(TextMessage);
    Blitz.DeliveryHeadline = DeliveryHeadline;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var Headline = (function () {
        function Headline(message) {
            this.message = message;
        }
        Headline.prototype.conversationId = function () {
            return this.message.getToConversationId();
        };

        Headline.prototype.formattedCtime = function () {
            return this.message.meta.getFormattedCTime();
        };

        Headline.prototype.value = function () {
            if (this.message instanceof Blitz.TextMessage) {
                var textMessage = this.message;
                return new Util.Text(textMessage.text).escape().convertEmoji().disableATag().text;
            } else if (this.message instanceof Blitz.StampMessage) {
                var stampMessage = this.message;
                return stampMessage.isMine(Blitz.Myself.getMe().getIdentity()) ? Blitz.Language.getMessage("chat.sent_stamp") : Blitz.Language.getMessage("chat.received_stamp");
            } else {
                debugAsError("invalid message type");
            }
        };
        return Headline;
    })();
    Blitz.Headline = Headline;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var CobitUser = (function (_super) {
        __extends(CobitUser, _super);
        function CobitUser(greeUserId, cobitUserId) {
            _super.call(this, greeUserId);
            this.cobitUserId = cobitUserId;
        }
        CobitUser.prototype.getCobitUserId = function () {
            return this.cobitUserId;
        };

        CobitUser.prototype.isSystemUser = function () {
            return !this.getCobitUserId().getValue();
        };
        return CobitUser;
    })(DDD.Entity);
    Blitz.CobitUser = CobitUser;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var Myself = (function (_super) {
        __extends(Myself, _super);
        function Myself(userId, nickname, fullname, profileImageUrl, profileAvatar, hasPenalty, permission, cobitUserId, isOfficialUser) {
            _super.call(this, userId, nickname, fullname, profileImageUrl, profileAvatar);
            this.hasPenalty = hasPenalty;
            this.permission = permission;
            this.cobitUserId = cobitUserId;
            this.isOfficialUser = isOfficialUser;
            this.region = "JP";
            this.user_id = userId.getValue();
        }
        Myself.prototype.getProfileImageUrlS = function () {
            return this.profileImageUrl;
        };

        Myself.create = function (cobitUserId) {
            var userFactory = new Blitz.UserFactory();
            this.myself = userFactory.createMyself(SNS.Config.getMyself(), cobitUserId);
            return this.myself;
        };

        Myself.createAsGreeUser = function () {
            var userFactory = new Blitz.UserFactory();
            this.myself = userFactory.createMyself(SNS.Config.getMyself(), null);
            return this.myself;
        };

        Myself.getMe = function () {
            return this.myself;
        };
        return Myself;
    })(Blitz.User);
    Blitz.Myself = Myself;

    var Permission = (function () {
        function Permission(chatReadable, chatWritable) {
            this.chatReadable = chatReadable;
            this.chatWritable = chatWritable;
        }
        Permission.prototype.isChatReadable = function () {
            return this.chatReadable;
        };

        Permission.prototype.isChatWritable = function () {
            return this.chatWritable;
        };
        return Permission;
    })();
    Blitz.Permission = Permission;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var GreeUser = (function (_super) {
        __extends(GreeUser, _super);
        function GreeUser(userId, nickname, fullname, profileImageUrl, profileAvatar, relation, isOnline) {
            _super.call(this, userId, nickname, fullname, profileImageUrl, profileAvatar);
            this.relation = relation;
            this.isOnline = isOnline;
        }
        return GreeUser;
    })(Blitz.User);
    Blitz.GreeUser = GreeUser;
})(Blitz || (Blitz = {}));
var SNS;
(function (SNS) {
    var Range = (function () {
        function Range(limit, offset) {
            this.limit = limit;
            this.offset = offset;
        }
        return Range;
    })();
    SNS.Range = Range;
})(SNS || (SNS = {}));
var Blitz;
(function (Blitz) {
    var UserFactory = (function () {
        function UserFactory() {
        }
        UserFactory.prototype.create = function (params) {
            var user = params.user;
            var userId = new Blitz.SnsUserId(user.user_id);
            var nickname = user.nickname;
            var fullname = new Blitz.UserFullName(user.firstname, user.middlename, user.lastname);
            var profileImageUrl = user.profile_image_url;
            var relation = new Blitz.Relation(params.link_status, params.permissions);
            var isOnline = params.is_online;
            var profileAvatar = new Blitz.ProfileAvatar(params.user.profile_avatar.web_path_360285, params.user.profile_avatar.is_current);

            return new Blitz.GreeUser(userId, nickname, fullname, profileImageUrl, profileAvatar, relation, isOnline);
        };

        UserFactory.prototype.createUsers = function (params) {
            var _this = this;
            return Object.keys(params).map(function (index) {
                return _this.create(params[index]);
            });
        };

        UserFactory.prototype.createMyself = function (myself, cobitUserId) {
            var userId = Blitz.SnsUserId.createFromString(myself['user_id']);
            var nickname = myself['nickname'];
            var fullname = new Blitz.UserFullName(myself['firstname'], myself['middlename'], myself['lastname']);
            var profileImageUrl = myself['profile_image_url'];
            var hasPenalty = myself['hasPenalty'];
            var permission = new Blitz.Permission(myself['permissions']['chat_read']['is_permitted'], myself['permissions']['chat_write']['is_permitted']);
            var cobitId = new Blitz.CobitUserId(cobitUserId);
            var profileAvatar = new Blitz.ProfileAvatar(myself['profile_avatar']['web_path_360285'], myself['profile_avatar']['is_current']);
            var isOfficialUser = myself['official_user']['is_official'];

            return new Blitz.Myself(userId, nickname, fullname, profileImageUrl, profileAvatar, hasPenalty, permission, cobitId, isOfficialUser);
        };

        UserFactory.prototype.createUserFromCache = function (params) {
            var userId = new Blitz.SnsUserId(params.identity.value);
            var nickname = params.nickname;
            var fullname = new Blitz.UserFullName(params.fullname ? params.fullname.firstname : '', params.fullname ? params.fullname.middlename : '', params.fullname ? params.fullname.lastname : '');
            var profileImageUrl = params.profileImageUrl;
            var relation = new Blitz.Relation(params.relation ? params.relation.linkStatus : {}, params.relation ? params.relation.permissions : {});
            var isOnline = params.isOnline ? params.isOnline : false;
            var profileAvatar = new Blitz.ProfileAvatar(params.profileAvatar ? params.profileAvatar.entireAvatarImageUrl : '', params.profileAvatar ? params.profileAvatar.isCurrent : false);

            return new Blitz.GreeUser(userId, nickname, fullname, profileImageUrl, profileAvatar, relation, isOnline);
        };

        UserFactory.prototype.createBlockUser = function (userId) {
            return new Blitz.GreeUser(Blitz.SnsUserId.createFromString(userId), null, null, null, null, null, null);
        };

        UserFactory.prototype.createCobitUser = function (refKey, identity) {
            var userId = Blitz.SnsUserId.createFromString(refKey);
            var cobitUserId = new Blitz.CobitUserId(identity);
            return new Blitz.CobitUser(userId, cobitUserId);
        };
        return UserFactory;
    })();
    Blitz.UserFactory = UserFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var NotificationSetting = (function () {
        function NotificationSetting(push, mail, mailIntervalMinutes, mailIntervalMinutesAll) {
            this.push = push;
            this.mail = mail;
            this.mailIntervalMinutes = mailIntervalMinutes;
            this.mailIntervalMinutesAll = mailIntervalMinutesAll;
        }
        NotificationSetting.prototype.notifiesMail = function () {
            return this.mail;
        };
        return NotificationSetting;
    })();
    Blitz.NotificationSetting = NotificationSetting;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {


    var UserRepository = (function () {
        function UserRepository(client) {
            this.client = client;
            this.UPDATE_USERS_LIMIT = 50;
            this.contactListNum = 0;
            this.userFactory = new Blitz.UserFactory();
        }
        UserRepository.ofApi = function () {
            return new UserRepository(new SnsApi.UserClient());
        };

        UserRepository.prototype.getContactList = function (range) {
            var _this = this;
            var defer = new Deferred();
            this.client.getChatFriendList(range).next(function (result) {
                _this.contactListNum = result.count;
                var contactListUsers = _this.userFactory.createUsers(result.items);

                _this.storeCacheList(contactListUsers);
                defer.call(contactListUsers);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        UserRepository.prototype.getCount = function () {
            return this.contactListNum;
        };

        UserRepository.prototype.getIdentityCacheKey = function (identity) {
            return 'User_' + identity.getValue();
        };

        UserRepository.prototype.getUserInfo = function (userId) {
            var _this = this;
            var defer = new Deferred();
            var user = this.getCache(userId);
            if (!_.isUndefined(user)) {
                setTimeout(function () {
                    return defer.call(user);
                });
                return defer;
            }
            this.client.getUserInfo([userId.getValue()]).next(function (res) {
                var user = _this.userFactory.create(res[0]);
                _this.storeCache(user.getIdentity(), user);
                defer.call(user);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        UserRepository.prototype.getCache = function (identity) {
            var userInfo = AsyncStorage.Local.getJson(this.getIdentityCacheKey(identity));
            if (_.isUndefined(userInfo)) {
                return undefined;
            }
            return this.userFactory.createUserFromCache(userInfo);
        };

        UserRepository.prototype.storeCacheList = function (list) {
            var _this = this;
            list.forEach(function (contactListUser) {
                _this.storeCache(contactListUser.getIdentity(), contactListUser);
            });
        };

        UserRepository.prototype.storeCache = function (identity, result) {
            AsyncStorage.Local.setItem(this.getIdentityCacheKey(identity), JSON.stringify({
                'timestamp': new Date().getTime(),
                'expires': 60 * 5 * 1000,
                'data': result
            })).error(function (error) {
                return debug(error.message);
            });
        };

        UserRepository.prototype.removeCache = function (userId) {
            var key = this.getIdentityCacheKey(userId);
            AsyncStorage.Local.removeItem(key);
            debug('remove cache: ' + key);
        };

        UserRepository.prototype.getNotificationSetting = function () {
            var promise = new monapt.Promise();
            this.client.getNotificationSetting().next(function (result) {
                promise.success(new Blitz.NotificationSetting(result.push, result.mail, result.mail_interval_minutes, result.mail_interval_minutes_all));
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        UserRepository.prototype.updateNotificationSetting = function (setting) {
            var promise = new monapt.Promise();
            this.client.updateNotificationSetting(setting.push, setting.mail, setting.mailIntervalMinutes).next(function (result) {
                promise.success(result);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        UserRepository.prototype.getUsersInfo = function (userIds) {
            var _this = this;
            var defer = new Deferred();
            var usersInfo;
            usersInfo = $.map(userIds, function (userId, idx) {
                var cached = _this.getCache(new Blitz.SnsUserId(userId));
                if (!_.isUndefined(cached)) {
                    userIds.splice(idx, 1);
                }
                return cached;
            });

            if (!userIds.length) {
                setTimeout(function () {
                    return defer.call(usersInfo);
                });
                return defer;
            }

            this.client.getUserInfo(userIds).next(function (result) {
                var appendUsersInfo = _this.userFactory.createUsers(result);
                _this.storeCacheList(appendUsersInfo);
                defer.call(usersInfo.concat(appendUsersInfo));
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        UserRepository.prototype.updateIdentities = function () {
            var _this = this;
            var defer = new Deferred();
            var userIds = this.getUnresolvedIdentities();

            if (userIds.length) {
                this.getUsersInfo(userIds.slice(0, this.UPDATE_USERS_LIMIT)).next(function (usersInfo) {
                    _this.clearUnresolvedIdentities();
                    userIds = userIds.slice(_this.UPDATE_USERS_LIMIT);
                    if (userIds.length) {
                        _this.setUnresolvedIdentities(userIds);
                    }
                    defer.call();
                });
            } else {
                setTimeout(function () {
                    defer.fail({});
                });
            }
            return defer;
        };

        UserRepository.prototype.getUnresolvedIdentityKey = function () {
            return 'UNRESOLVED_IDENTITY_USER';
        };

        UserRepository.prototype.getUnresolvedIdentities = function () {
            var unresolvedIdentities = AsyncStorage.Local.getJson(this.getUnresolvedIdentityKey());
            if (typeof unresolvedIdentities != 'undefined') {
                return unresolvedIdentities;
            }
            return [];
        };

        UserRepository.prototype.setUnresolvedIdentity = function (identity) {
            var unresolvedIdentities = this.getUnresolvedIdentities();
            var userId = identity.getValue();
            if (unresolvedIdentities.length) {
                if (!_.contains(unresolvedIdentities, userId)) {
                    unresolvedIdentities.push(userId);
                }
            } else {
                unresolvedIdentities.push(userId);
            }
            return this.setUnresolvedIdentities(unresolvedIdentities);
        };

        UserRepository.prototype.setUnresolvedIdentities = function (unresolvedIdentities) {
            AsyncStorage.Local.setItem(this.getUnresolvedIdentityKey(), JSON.stringify({
                'timestamp': new Date().getTime(),
                'expires': Service.CACHE_TYPE_PERMANENT,
                'data': unresolvedIdentities
            })).error(function (error) {
                return debug(error.message);
            });
        };

        UserRepository.prototype.clearUnresolvedIdentities = function () {
            try  {
                AsyncStorage.Local.removeItem(this.getUnresolvedIdentityKey());
            } catch (e) {
                debug(e);
                return false;
            }
            return true;
        };
        return UserRepository;
    })();
    Blitz.UserRepository = UserRepository;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var Conversation = (function (_super) {
        __extends(Conversation, _super);
        function Conversation(conversationIdentity, participants, clientCustomField, name, unreadCount, meta, latestMessage, latestEventCreateTime, setting) {
            _super.call(this, conversationIdentity);
            this.participants = participants;
            this.clientCustomField = clientCustomField;
            this.name = name;
            this.unreadCount = unreadCount;
            this.meta = meta;
            this.latestMessage = latestMessage;
            this.latestEventCreateTime = latestEventCreateTime;
            this.setting = setting;
            this.FILTERED_MEMBER_LIMIT = 3;
        }
        Conversation.prototype.getConversationId = function () {
            return this.getIdentity().getValue();
        };

        Conversation.prototype.getName = function () {
            return this.name;
        };

        Conversation.prototype.getConversationRefKey = function () {
            return this.getIdentity().refKey;
        };

        Conversation.prototype.getParticipants = function () {
            return this.participants;
        };

        Conversation.prototype.getSenders = function (me) {
            return _.reject(this.getParticipants(), function (participant) {
                return participant.equals(me);
            });
        };

        Conversation.prototype.isConversation = function () {
            return true;
        };

        Conversation.prototype.isDelivery = function () {
            return false;
        };

        Conversation.prototype.getUpdateTime = function () {
            if (_.isUndefined(this.latestEventCreateTime)) {
                return this.meta.getMTime();
            } else {
                return this.latestEventCreateTime;
            }
        };

        Conversation.prototype.getConversationType = function () {
            return this.getIdentity().getConversationType();
        };

        Conversation.prototype.getFilteredParticipants = function () {
            var _this = this;
            var members = [];
            if (this.participants.length === 1 || this.participants.length === 3) {
                return this.participants;
            } else {
                members = this.participants.filter(function (participant) {
                    return !participant.equals(Blitz.Myself.getMe());
                });
            }
            var filteredMembers = [];
            members.some(function (member) {
                filteredMembers.push(member);
                if (filteredMembers.length === _this.FILTERED_MEMBER_LIMIT) {
                    return true;
                }
                return false;
            });
            return filteredMembers;
        };

        Conversation.prototype.getTypeShortName = function () {
            return null;
        };

        Conversation.prototype.isOneOnOne = function () {
            return this.getConversationType() === 1 /* OneOnOne */;
        };

        Conversation.prototype.isOneOnOneWithBlockUser = function () {
            return this instanceof OneOnOneConversationWithBlockUser;
        };

        Conversation.prototype.isGroup = function () {
            return this.getConversationType() === 0 /* Group */;
        };

        Conversation.prototype.isMyConversation = function () {
            return this.getConversationType() === 3 /* My */;
        };

        Conversation.prototype.isDisplayed = function () {
            return this.setting.isDisplayed;
        };

        Conversation.prototype.isHidden = function () {
            return !this.isDisplayed();
        };

        Conversation.prototype.hide = function () {
            return this.setting.hide(this.getIdentity());
        };

        Conversation.prototype.display = function () {
            return this.setting.display(this.getIdentity());
        };

        Conversation.prototype.isMustRead = function () {
            return false;
        };
        Conversation.CONVERSATION_NAME_LENGTH = 50;
        return Conversation;
    })(DDD.Entity);
    Blitz.Conversation = Conversation;

    var GroupConversation = (function (_super) {
        __extends(GroupConversation, _super);
        function GroupConversation() {
            _super.apply(this, arguments);
        }
        GroupConversation.prototype.getTargetUser = function () {
            return null;
        };

        GroupConversation.prototype.getTypeShortName = function () {
            return 'group';
        };
        GroupConversation.MEMBER_NUM_LIMIT = 100;
        return GroupConversation;
    })(Conversation);
    Blitz.GroupConversation = GroupConversation;

    var OneOnOneConversation = (function (_super) {
        __extends(OneOnOneConversation, _super);
        function OneOnOneConversation() {
            _super.apply(this, arguments);
        }
        OneOnOneConversation.prototype.getTargetUser = function () {
            var me = Blitz.Myself.getMe();
            var targetUser = null;

            if (this.participants.length !== 2) {
                var userFactory = new Blitz.UserFactory();
                return userFactory.createCobitUser(this.getTargetUserId(this.getConversationRefKey(), me), null);
            }
            this.participants.some(function (user) {
                if (!user.equals(me)) {
                    targetUser = user;
                    return true;
                }
                return false;
            });
            return targetUser;
        };

        OneOnOneConversation.prototype.getTargetUserId = function (refKey, me) {
            var keys = refKey.split('_');
            if (parseInt(keys[1]) === me.getIdentity().getValue()) {
                return keys[2];
            } else {
                return keys[1];
            }
        };

        OneOnOneConversation.prototype.getTypeShortName = function () {
            return '1on1';
        };
        OneOnOneConversation.prefixRefKey = 'o';
        return OneOnOneConversation;
    })(Conversation);
    Blitz.OneOnOneConversation = OneOnOneConversation;

    var OneOnOneConversationWithBlockUser = (function (_super) {
        __extends(OneOnOneConversationWithBlockUser, _super);
        function OneOnOneConversationWithBlockUser() {
            _super.apply(this, arguments);
        }
        return OneOnOneConversationWithBlockUser;
    })(OneOnOneConversation);
    Blitz.OneOnOneConversationWithBlockUser = OneOnOneConversationWithBlockUser;

    var MyConversation = (function (_super) {
        __extends(MyConversation, _super);
        function MyConversation() {
            _super.apply(this, arguments);
        }
        MyConversation.prototype.getTargetUser = function () {
            var me = Blitz.Myself.getMe();
            var targetUser = null;
            this.participants.some(function (user) {
                if (user.equals(me)) {
                    targetUser = user;
                    return true;
                }
                return false;
            });
            return targetUser;
        };

        MyConversation.prototype.getTypeShortName = function () {
            return 'my';
        };
        MyConversation.prefixRefKey = 'm';
        return MyConversation;
    })(Conversation);
    Blitz.MyConversation = MyConversation;

    var ConversationIdentity = (function (_super) {
        __extends(ConversationIdentity, _super);
        function ConversationIdentity(identity, refKey) {
            _super.call(this, identity);
            this.refKey = refKey;
        }
        ConversationIdentity.prototype.getConversationType = function () {
            if (this.refKey === null) {
                return 0 /* Group */;
            }
            var keys = this.refKey.split('_');
            if (keys[0] === OneOnOneConversation.prefixRefKey) {
                return 1 /* OneOnOne */;
            } else if (keys[0] === MyConversation.prefixRefKey) {
                return 3 /* My */;
            }
            debug('Invalid RefKey: ' + this.refKey);
            return null;
        };
        return ConversationIdentity;
    })(DDD.Identity);
    Blitz.ConversationIdentity = ConversationIdentity;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (MetaFormatStyle) {
        MetaFormatStyle[MetaFormatStyle["META_FORMATTED_STYLE_STANDARD"] = 0] = "META_FORMATTED_STYLE_STANDARD";
        MetaFormatStyle[MetaFormatStyle["META_FORMATTED_STYLE_LITERAL"] = 1] = "META_FORMATTED_STYLE_LITERAL";
        MetaFormatStyle[MetaFormatStyle["META_FORMATTED_STYLE_ROUNDED"] = 2] = "META_FORMATTED_STYLE_ROUNDED";
        MetaFormatStyle[MetaFormatStyle["META_FORMATTED_STYLE_TIMEAT"] = 3] = "META_FORMATTED_STYLE_TIMEAT";
    })(Blitz.MetaFormatStyle || (Blitz.MetaFormatStyle = {}));
    var MetaFormatStyle = Blitz.MetaFormatStyle;

    var Meta = (function () {
        function Meta(ctime, mtime, rawCtime, rawMtime) {
            this.ctime = ctime;
            this.mtime = mtime;
            this.rawCtime = rawCtime;
            this.rawMtime = rawMtime;
        }
        Meta.prototype.getFormattedCTime = function (style) {
            if (typeof style === "undefined") { style = 0 /* META_FORMATTED_STYLE_STANDARD */; }
            return this.getFormattedTimeString(this.ctime, style);
        };

        Meta.prototype.getFormattedMTime = function (style) {
            if (typeof style === "undefined") { style = 0 /* META_FORMATTED_STYLE_STANDARD */; }
            return this.getFormattedTimeString(this.mtime, style);
        };

        Meta.prototype.getCTime = function () {
            return this.ctime;
        };

        Meta.prototype.getMTime = function () {
            return this.mtime;
        };

        Meta.prototype.getCtimeAsRawFormat = function () {
            return this.rawCtime;
        };

        Meta.prototype.getMtimeAsRawFormat = function () {
            return this.rawMtime;
        };

        Meta.prototype.getFormattedTimeString = function (timestamp, style) {
            switch (style) {
                case 0 /* META_FORMATTED_STYLE_STANDARD */:
                    return this.formatToStandardStyle(timestamp);
                    break;
                case 1 /* META_FORMATTED_STYLE_LITERAL */:
                    return this.formatToDateLiteralStyle(timestamp);
                    break;
                case 2 /* META_FORMATTED_STYLE_ROUNDED */:
                    return this.formatToRoundedStyle(timestamp);
                    break;
                case 3 /* META_FORMATTED_STYLE_TIMEAT */:
                    return this.formatToTimeAtStyle(timestamp);
                    break;
                default:
                    return '';
            }
        };

        Meta.prototype.formatToStandardStyle = function (timestamp) {
            var c = new Date(timestamp);
            if (this.isToday(c)) {
                return Util.getFormattedDateString("chat.dateformat_time_at", c);
            } else if (this.isYesterday(c)) {
                return Blitz.Language.getMessage("chat.yesterday");
            } else if (this.isOverAYearAgo(c)) {
                return Util.getFormattedDateString("chat.dateformat_b", c);
            } else if (this.isOverAWeekAgo(c)) {
                return Util.getFormattedDateString("chat.dateformat_date_at", c);
            } else {
                return Blitz.Language.getMessage("chat.x_days_ago", [this.dateDiff(new Date(), c)]);
            }
        };

        Meta.prototype.formatToRoundedStyle = function (timestamp) {
            var c = new Date(timestamp);
            return Util.getFormattedDateString("chat.dateformat", c);
        };

        Meta.prototype.formatToDateLiteralStyle = function (timestamp) {
            var c = new Date(timestamp);
            return Util.getFormattedDateString("chat.dateformat_c", c);
        };

        Meta.prototype.formatToTimeAtStyle = function (timestamp) {
            var c = new Date(timestamp);
            return Util.getFormattedDateString('chat.dateformat_time_at', c);
        };

        Meta.prototype.isToday = function (d) {
            var today = new Date();
            return this.dayEquals(d, today);
        };

        Meta.prototype.isYesterday = function (d) {
            var today = new Date();
            var yesterday = this.addDate(today, -1);
            return this.dayEquals(d, yesterday);
        };

        Meta.prototype.isOverAWeekAgo = function (d) {
            var weekAgo = this.addDate(new Date(), -7);
            return (d.getTime() < weekAgo.getTime());
        };

        Meta.prototype.isOverAYearAgo = function (d) {
            var yearAgo = this.addDate(new Date(), -365);
            return (d.getTime() < yearAgo.getTime());
        };

        Meta.prototype.dateDiff = function (baseDate, d) {
            var bDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), baseDate.getDate());
            var tDate = new Date(d.getFullYear(), d.getMonth(), d.getDate());
            return (bDate.getTime() - tDate.getTime()) / (24 * 60 * 60 * 1000);
        };

        Meta.prototype.addDate = function (date, span) {
            var d = new Date();
            d.setTime(date.getTime());
            d.setDate(d.getDate() + span);
            return d;
        };

        Meta.prototype.dayEquals = function (d1, d2) {
            return (d1.getFullYear() == d2.getFullYear()) && (d1.getMonth() == d2.getMonth()) && (d1.getDate() == d2.getDate());
        };
        return Meta;
    })();
    Blitz.Meta = Meta;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EventContents = (function () {
        function EventContents(meta) {
            this.meta = meta;
        }
        EventContents.prototype.getMeta = function () {
            return this.meta;
        };
        return EventContents;
    })();
    Blitz.EventContents = EventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (ConversationEventType) {
        ConversationEventType[ConversationEventType["Created"] = 0] = "Created";
        ConversationEventType[ConversationEventType["Updated"] = 1] = "Updated";
        ConversationEventType[ConversationEventType["Deleted"] = 2] = "Deleted";
        ConversationEventType[ConversationEventType["Rejected"] = 3] = "Rejected";
        ConversationEventType[ConversationEventType["Denied"] = 4] = "Denied";
        ConversationEventType[ConversationEventType["UserAdded"] = 5] = "UserAdded";
        ConversationEventType[ConversationEventType["UserLeft"] = 6] = "UserLeft";
        ConversationEventType[ConversationEventType["MessageReceived"] = 7] = "MessageReceived";
        ConversationEventType[ConversationEventType["MessageSending"] = 8] = "MessageSending";
        ConversationEventType[ConversationEventType["MessageDeleted"] = 9] = "MessageDeleted";
        ConversationEventType[ConversationEventType["MessageSuspended"] = 10] = "MessageSuspended";
        ConversationEventType[ConversationEventType["MessageRejected"] = 11] = "MessageRejected";
        ConversationEventType[ConversationEventType["MessageReadByMe"] = 12] = "MessageReadByMe";
        ConversationEventType[ConversationEventType["NotificationSettingUpdated"] = 13] = "NotificationSettingUpdated";
        ConversationEventType[ConversationEventType["ControlDisconnected"] = 14] = "ControlDisconnected";
    })(Blitz.ConversationEventType || (Blitz.ConversationEventType = {}));
    var ConversationEventType = Blitz.ConversationEventType;

    (function (EventStatusType) {
        EventStatusType[EventStatusType["Enabled"] = 0] = "Enabled";
        EventStatusType[EventStatusType["Disabled"] = 1] = "Disabled";
    })(Blitz.EventStatusType || (Blitz.EventStatusType = {}));
    var EventStatusType = Blitz.EventStatusType;

    (function (MessageStatusType) {
        MessageStatusType[MessageStatusType["Enabled"] = 0] = "Enabled";
        MessageStatusType[MessageStatusType["Disabled"] = 1] = "Disabled";
    })(Blitz.MessageStatusType || (Blitz.MessageStatusType = {}));
    var MessageStatusType = Blitz.MessageStatusType;

    var Event = (function (_super) {
        __extends(Event, _super);
        function Event(eventId, type) {
            _super.call(this, eventId);
            this.type = type;
        }
        Event.prototype.isConversationCreatedEvent = function () {
            return this.type === 0 /* Created */;
        };

        Event.prototype.isUserAddedEvent = function () {
            return this.type === 5 /* UserAdded */;
        };

        Event.prototype.isMessageReceivedEvent = function () {
            return this.type === 7 /* MessageReceived */;
        };

        Event.prototype.isMessageSuspendedEvent = function () {
            return this.type === 10 /* MessageSuspended */;
        };
        return Event;
    })(DDD.Entity);
    Blitz.Event = Event;

    var EventIdentity = (function (_super) {
        __extends(EventIdentity, _super);
        function EventIdentity(eventId) {
            _super.call(this, eventId);
        }
        return EventIdentity;
    })(DDD.Identity);
    Blitz.EventIdentity = EventIdentity;

    var ConversationEvent = (function (_super) {
        __extends(ConversationEvent, _super);
        function ConversationEvent(eventId, conversationIdentity, sender, type, contents) {
            _super.call(this, eventId, type);
            this.conversationIdentity = conversationIdentity;
            this.sender = sender;
            this.contents = contents;
        }
        ConversationEvent.prototype.getEventContents = function () {
            return this.contents;
        };

        ConversationEvent.prototype.getToConversationId = function () {
            return this.conversationIdentity.getValue();
        };
        return ConversationEvent;
    })(Event);
    Blitz.ConversationEvent = ConversationEvent;

    var ConversationErrorEvent = (function (_super) {
        __extends(ConversationErrorEvent, _super);
        function ConversationErrorEvent(eventId, type, sender, error) {
            _super.call(this, eventId, type);
            this.sender = sender;
            this.error = error;
        }
        ConversationErrorEvent.prototype.getError = function () {
            return this.error;
        };
        return ConversationErrorEvent;
    })(Event);
    Blitz.ConversationErrorEvent = ConversationErrorEvent;

    var ControlEvent = (function (_super) {
        __extends(ControlEvent, _super);
        function ControlEvent(eventId, receiver, type) {
            _super.call(this, eventId, type);
            this.receiver = receiver;
        }
        return ControlEvent;
    })(Event);
    Blitz.ControlEvent = ControlEvent;

    var ConversationError = (function () {
        function ConversationError(ngReasonType, message) {
            this.ngReasonType = ngReasonType;
            this.name = 'ConversationError';
            this.message = message;
        }
        return ConversationError;
    })();
    Blitz.ConversationError = ConversationError;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationCache = (function () {
        function ConversationCache(identity, name, refKey, participantIds, latestEventId, latestEventMessage, unReadCount, timestamp, expires) {
            this.identity = identity;
            this.name = name;
            this.refKey = refKey;
            this.participantIds = participantIds;
            this.latestEventId = latestEventId;
            this.latestEventMessage = latestEventMessage;
            this.unReadCount = unReadCount;
            this.timestamp = timestamp;
            this.expires = expires;
        }
        ConversationCache.prototype.getDataAsMap = function () {
            return {
                'identity': this.identity,
                'name': this.name,
                'refKey': this.refKey,
                'participantIds': this.participantIds,
                'latestEventId': this.latestEventId,
                'latestEventMessage': this.latestEventMessage.contents,
                'unReadCount': this.unReadCount,
                'timestamp': this.timestamp,
                'expires': this.expires
            };
        };
        return ConversationCache;
    })();
    Blitz.ConversationCache = ConversationCache;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var BlockUserRepository = (function () {
        function BlockUserRepository(client) {
            this.client = client;
            this.STORAGE_KEY = 'block-list';
            this.userFactory = new Blitz.UserFactory();
        }
        BlockUserRepository.ofApi = function () {
            return new BlockUserRepository(new SnsApi.UserClient());
        };

        BlockUserRepository.prototype.getBlockUserList = function (range) {
            var defer = new Deferred();
            var blockUserList = this.getBlockUserListFromStorage();

            if (!_.isUndefined(blockUserList)) {
                setTimeout(function () {
                    return defer.call(blockUserList);
                });
                return defer;
            }
            this.getBlockUserListFromApi(range).next(function (blockUserList) {
                defer.call(blockUserList);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        BlockUserRepository.prototype.storeFromConfig = function (blockingUserIdsConfig) {
            var _this = this;
            var blockUserList = _.values(blockingUserIdsConfig['list']).map(function (userId) {
                return _this.userFactory.createBlockUser(userId);
            });
            this.setBlockUserListToStorage(blockUserList);
        };

        BlockUserRepository.prototype.getBlockUserListFromStorage = function () {
            var _this = this;
            var blockUserData = AsyncStorage.Local.getJson(this.STORAGE_KEY);
            if (_.isUndefined(blockUserData)) {
                return [];
            }
            return blockUserData.map(function (blockUser) {
                var userId = blockUser['identity']['value'];
                return _this.userFactory.createBlockUser(userId);
            });
        };

        BlockUserRepository.prototype.getBlockUserListFromApi = function (range) {
            var _this = this;
            var defer = new Deferred();
            this.client.getBlockUserList(range).next(function (result) {
                var blockUserList = _.values(result['list']).map(function (userId) {
                    return _this.userFactory.createBlockUser(userId);
                });
                _this.setBlockUserListToStorage(blockUserList);
                defer.call(blockUserList);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        BlockUserRepository.prototype.setBlockUserListToStorage = function (data) {
            AsyncStorage.Local.setItem(this.STORAGE_KEY, JSON.stringify({
                'timestamp': new Date().getTime(),
                'expires': Service.CACHE_TYPE_PERMANENT,
                'data': data
            })).error(function (error) {
                return debug(error.message);
            });
        };
        return BlockUserRepository;
    })();
    Blitz.BlockUserRepository = BlockUserRepository;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationFactory = (function () {
        function ConversationFactory() {
            this.userFactory = new Blitz.UserFactory();
            this.blockUserRepo = Blitz.BlockUserRepository.ofApi();
        }
        ConversationFactory.prototype.create = function (iConversation) {
            var _this = this;
            var conversationIdentity = new Blitz.ConversationIdentity(iConversation.identity, iConversation.ref_key);
            var participants = iConversation.participants.map(function (participant) {
                return _this.userFactory.createCobitUser(participant.ref_key, participant.identity);
            });
            var meta = new Blitz.Meta(parseInt(iConversation.create_time), parseInt(iConversation.update_time));

            var unreadCount = _.isUndefined(iConversation.unread_count) ? 0 : iConversation.unread_count;

            if (!_.isUndefined(iConversation.latest_event)) {
                var latestEventCreateTime = parseInt(iConversation.latest_event.create_time);
            }

            if (!_.isUndefined(iConversation.personal_setting)) {
                var conversationSetting = new Blitz.ConversationSetting(iConversation.personal_setting.displayed, iConversation.personal_setting.notification_enabled);
            }

            var latestMessage = _.isUndefined(iConversation.latest_message) ? new monapt.None() : new monapt.Some(new Blitz.Headline(Blitz.MessageFactory.createMessage(iConversation.latest_message)));

            return this.createConversationEntity({
                conversationId: conversationIdentity,
                participants: participants,
                clientCustomField: iConversation.client_custom_field,
                name: iConversation.name,
                unreadCount: unreadCount,
                meta: meta,
                latestMessage: latestMessage,
                latestEventCreateTime: latestEventCreateTime,
                setting: conversationSetting
            });
        };

        ConversationFactory.prototype.createConversationEntity = function (params) {
            var conversationType = params.conversationId.getConversationType();
            switch (conversationType) {
                case 0 /* Group */:
                    return this.apply(params, Blitz.GroupConversation);
                case 1 /* OneOnOne */:
                    var blockUsers = this.blockUserRepo.getBlockUserListFromStorage();
                    var applyConversation = this.isContainBlockUser(params.participants, blockUsers) ? Blitz.OneOnOneConversationWithBlockUser : Blitz.OneOnOneConversation;
                    return this.apply(params, applyConversation);
                case 3 /* My */:
                    return this.apply(params, Blitz.MyConversation);
                default:
                    debug('Invalid conversation type: ' + conversationType);
                    return null;
            }
        };

        ConversationFactory.prototype.isContainBlockUser = function (participants, blockUsers) {
            return blockUsers.some(function (blockUser) {
                return participants.some(function (participant) {
                    return blockUser.equals(participant);
                });
            });
        };

        ConversationFactory.prototype.apply = function (params, apply) {
            return new apply(params.conversationId, params.participants, params.clientCustomField, params.name, params.unreadCount, params.meta, params.latestMessage, params.latestEventCreateTime, params.setting);
        };
        return ConversationFactory;
    })();
    Blitz.ConversationFactory = ConversationFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationCreatedEvent = (function (_super) {
        __extends(ConversationCreatedEvent, _super);
        function ConversationCreatedEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 0 /* Created */, contents);
        }
        ConversationCreatedEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return ConversationCreatedEvent;
    })(Blitz.ConversationEvent);
    Blitz.ConversationCreatedEvent = ConversationCreatedEvent;

    var ConversationCreatedEventContents = (function (_super) {
        __extends(ConversationCreatedEventContents, _super);
        function ConversationCreatedEventContents(meta, conversation) {
            _super.call(this, meta);
            this.conversation = conversation;
        }
        ConversationCreatedEventContents.prototype.getConversation = function () {
            return this.conversation;
        };
        return ConversationCreatedEventContents;
    })(Blitz.EventContents);
    Blitz.ConversationCreatedEventContents = ConversationCreatedEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationDeletedEvent = (function (_super) {
        __extends(ConversationDeletedEvent, _super);
        function ConversationDeletedEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 2 /* Deleted */, contents);
        }
        ConversationDeletedEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return ConversationDeletedEvent;
    })(Blitz.ConversationEvent);
    Blitz.ConversationDeletedEvent = ConversationDeletedEvent;

    var ConversationDeletedEventContents = (function (_super) {
        __extends(ConversationDeletedEventContents, _super);
        function ConversationDeletedEventContents(meta) {
            _super.call(this, meta);
        }
        return ConversationDeletedEventContents;
    })(Blitz.EventContents);
    Blitz.ConversationDeletedEventContents = ConversationDeletedEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (ConversationDeniedReasonType) {
        ConversationDeniedReasonType[ConversationDeniedReasonType["PermissionError"] = 0] = "PermissionError";
        ConversationDeniedReasonType[ConversationDeniedReasonType["ZoningError"] = 1] = "ZoningError";
        ConversationDeniedReasonType[ConversationDeniedReasonType["AlreadyUpdateError"] = 2] = "AlreadyUpdateError";
        ConversationDeniedReasonType[ConversationDeniedReasonType["EnableOnlyFriend"] = 3] = "EnableOnlyFriend";
        ConversationDeniedReasonType[ConversationDeniedReasonType["EnableOnlyWithinTwoDegrees"] = 4] = "EnableOnlyWithinTwoDegrees";
    })(Blitz.ConversationDeniedReasonType || (Blitz.ConversationDeniedReasonType = {}));
    var ConversationDeniedReasonType = Blitz.ConversationDeniedReasonType;

    var ConversationDeniedEvent = (function (_super) {
        __extends(ConversationDeniedEvent, _super);
        function ConversationDeniedEvent(eventId, sender, error) {
            _super.call(this, eventId, 4 /* Denied */, sender, error);
        }
        return ConversationDeniedEvent;
    })(Blitz.ConversationErrorEvent);
    Blitz.ConversationDeniedEvent = ConversationDeniedEvent;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationRejectedEvent = (function (_super) {
        __extends(ConversationRejectedEvent, _super);
        function ConversationRejectedEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 3 /* Rejected */, contents);
        }
        ConversationRejectedEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return ConversationRejectedEvent;
    })(Blitz.ConversationEvent);
    Blitz.ConversationRejectedEvent = ConversationRejectedEvent;

    var ConversationRejectedEventContents = (function (_super) {
        __extends(ConversationRejectedEventContents, _super);
        function ConversationRejectedEventContents(meta) {
            _super.call(this, meta);
        }
        return ConversationRejectedEventContents;
    })(Blitz.EventContents);
    Blitz.ConversationRejectedEventContents = ConversationRejectedEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationUpdatedEvent = (function (_super) {
        __extends(ConversationUpdatedEvent, _super);
        function ConversationUpdatedEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 1 /* Updated */, contents);
        }
        ConversationUpdatedEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return ConversationUpdatedEvent;
    })(Blitz.ConversationEvent);
    Blitz.ConversationUpdatedEvent = ConversationUpdatedEvent;

    var ConversationUpdatedEventContents = (function (_super) {
        __extends(ConversationUpdatedEventContents, _super);
        function ConversationUpdatedEventContents(meta, conversation) {
            _super.call(this, meta);
            this.conversation = conversation;
        }
        ConversationUpdatedEventContents.prototype.getConversation = function () {
            return this.conversation;
        };
        return ConversationUpdatedEventContents;
    })(Blitz.EventContents);
    Blitz.ConversationUpdatedEventContents = ConversationUpdatedEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var UserAddedEvent = (function (_super) {
        __extends(UserAddedEvent, _super);
        function UserAddedEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 5 /* UserAdded */, contents);
        }
        UserAddedEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return UserAddedEvent;
    })(Blitz.ConversationEvent);
    Blitz.UserAddedEvent = UserAddedEvent;

    var UserAddedEventContents = (function (_super) {
        __extends(UserAddedEventContents, _super);
        function UserAddedEventContents(meta, addUsers) {
            _super.call(this, meta);
            this.addUsers = addUsers;
        }
        UserAddedEventContents.prototype.getAddUsers = function () {
            return this.addUsers;
        };

        UserAddedEventContents.prototype.isContainMyself = function () {
            var myself = Blitz.Myself.getMe();
            return this.getAddUsers().some(function (addedUser) {
                return addedUser.equals(myself);
            });
        };
        return UserAddedEventContents;
    })(Blitz.EventContents);
    Blitz.UserAddedEventContents = UserAddedEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var UserLeftEvent = (function (_super) {
        __extends(UserLeftEvent, _super);
        function UserLeftEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 6 /* UserLeft */, contents);
        }
        UserLeftEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return UserLeftEvent;
    })(Blitz.ConversationEvent);
    Blitz.UserLeftEvent = UserLeftEvent;

    var UserLeftEventContents = (function (_super) {
        __extends(UserLeftEventContents, _super);
        function UserLeftEventContents(meta, conversation) {
            _super.call(this, meta);
            this.conversation = conversation;
        }
        return UserLeftEventContents;
    })(Blitz.EventContents);
    Blitz.UserLeftEventContents = UserLeftEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var NotificationSettingUpdatedEvent = (function (_super) {
        __extends(NotificationSettingUpdatedEvent, _super);
        function NotificationSettingUpdatedEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 13 /* NotificationSettingUpdated */, contents);
        }
        NotificationSettingUpdatedEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return NotificationSettingUpdatedEvent;
    })(Blitz.ConversationEvent);
    Blitz.NotificationSettingUpdatedEvent = NotificationSettingUpdatedEvent;

    var NotificationSettingUpdatedEventContents = (function (_super) {
        __extends(NotificationSettingUpdatedEventContents, _super);
        function NotificationSettingUpdatedEventContents(meta, enabled) {
            _super.call(this, meta);
            this.enabled = enabled;
        }
        NotificationSettingUpdatedEventContents.prototype.getStatus = function () {
            return this.enabled;
        };
        return NotificationSettingUpdatedEventContents;
    })(Blitz.EventContents);
    Blitz.NotificationSettingUpdatedEventContents = NotificationSettingUpdatedEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var MessageDeletedEvent = (function (_super) {
        __extends(MessageDeletedEvent, _super);
        function MessageDeletedEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 9 /* MessageDeleted */, contents);
        }
        MessageDeletedEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return MessageDeletedEvent;
    })(Blitz.ConversationEvent);
    Blitz.MessageDeletedEvent = MessageDeletedEvent;

    var MessageDeletedEventContents = (function (_super) {
        __extends(MessageDeletedEventContents, _super);
        function MessageDeletedEventContents(meta, sender, messageId) {
            _super.call(this, meta);
            this.sender = sender;
            this.messageId = messageId;
        }
        MessageDeletedEventContents.prototype.getMessageId = function () {
            return this.messageId;
        };

        MessageDeletedEventContents.prototype.getSender = function () {
            return this.sender;
        };
        return MessageDeletedEventContents;
    })(Blitz.EventContents);
    Blitz.MessageDeletedEventContents = MessageDeletedEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var MessageReadByMeEvent = (function (_super) {
        __extends(MessageReadByMeEvent, _super);
        function MessageReadByMeEvent(eventId, sender, contents) {
            _super.call(this, eventId, 12 /* MessageReadByMe */);
            this.sender = sender;
            this.contents = contents;
        }
        MessageReadByMeEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return MessageReadByMeEvent;
    })(Blitz.Event);
    Blitz.MessageReadByMeEvent = MessageReadByMeEvent;

    var MessageReadByMeEventContents = (function (_super) {
        __extends(MessageReadByMeEventContents, _super);
        function MessageReadByMeEventContents(meta, messageIds) {
            _super.call(this, meta);
            this.messageIds = messageIds;
        }
        MessageReadByMeEventContents.prototype.getMessageIds = function () {
            return this.messageIds;
        };
        return MessageReadByMeEventContents;
    })(Blitz.EventContents);
    Blitz.MessageReadByMeEventContents = MessageReadByMeEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (ConversationMessageType) {
        ConversationMessageType[ConversationMessageType["Text"] = 0] = "Text";
        ConversationMessageType[ConversationMessageType["Stamp"] = 1] = "Stamp";
        ConversationMessageType[ConversationMessageType["Disabled"] = 2] = "Disabled";
    })(Blitz.ConversationMessageType || (Blitz.ConversationMessageType = {}));
    var ConversationMessageType = Blitz.ConversationMessageType;

    var MessageReceivedEvent = (function (_super) {
        __extends(MessageReceivedEvent, _super);
        function MessageReceivedEvent(eventId, conversationIdentity, sender, contents, status, correlationKey) {
            _super.call(this, eventId, conversationIdentity, sender, 7 /* MessageReceived */, contents);
            this.status = status;
            this.correlationKey = correlationKey;
        }
        MessageReceivedEvent.prototype.getEventContents = function () {
            return this.contents;
        };

        MessageReceivedEvent.prototype.getStatus = function () {
            return this.status;
        };

        MessageReceivedEvent.prototype.getUrn = function () {
            var urn_prefix = 'urn:cobit:message:text';
            if (this.conversationIdentity.getConversationType() === 1 /* OneOnOne */) {
                urn_prefix = 'urn:cobit:message:text:1on1';
            }
            var params = [
                urn_prefix,
                this.conversationIdentity.getValue(),
                this.getEventContents().getMessageId(),
                this.getEventContents().getSender().getCobitUserId().getValue(),
                this.getEventContents().getSender().getIdentity().getValue(),
                '',
                ''
            ];
            return params.join(':');
        };

        MessageReceivedEvent.prototype.getCorrelationKey = function () {
            return this.correlationKey;
        };
        return MessageReceivedEvent;
    })(Blitz.ConversationEvent);
    Blitz.MessageReceivedEvent = MessageReceivedEvent;

    var MessageReceivedEventContents = (function (_super) {
        __extends(MessageReceivedEventContents, _super);
        function MessageReceivedEventContents(meta, sender, messageId, type, status) {
            _super.call(this, meta);
            this.sender = sender;
            this.messageId = messageId;
            this.type = type;
            this.status = status;
        }
        MessageReceivedEventContents.prototype.getMessageId = function () {
            return this.messageId;
        };

        MessageReceivedEventContents.prototype.getSender = function () {
            return this.sender;
        };

        MessageReceivedEventContents.prototype.getMessageType = function () {
            return this.type;
        };

        MessageReceivedEventContents.prototype.getMessage = function () {
            debugAsError("must override");
            return null;
        };

        MessageReceivedEventContents.prototype.isDisabledMessage = function () {
            return this.status === 1 /* Disabled */;
        };
        return MessageReceivedEventContents;
    })(Blitz.EventContents);
    Blitz.MessageReceivedEventContents = MessageReceivedEventContents;

    var MessageReceivedTextEventContents = (function (_super) {
        __extends(MessageReceivedTextEventContents, _super);
        function MessageReceivedTextEventContents(meta, sender, messageId, type, textMessage, status) {
            _super.call(this, meta, sender, messageId, type, status);
            this.textMessage = textMessage;
            this.status = status;
        }
        MessageReceivedTextEventContents.prototype.getMessage = function () {
            return this.textMessage;
        };
        return MessageReceivedTextEventContents;
    })(MessageReceivedEventContents);
    Blitz.MessageReceivedTextEventContents = MessageReceivedTextEventContents;

    var MessageReceivedStampEventContents = (function (_super) {
        __extends(MessageReceivedStampEventContents, _super);
        function MessageReceivedStampEventContents(meta, sender, messageId, type, stamp, status) {
            _super.call(this, meta, sender, messageId, type, status);
            this.stamp = stamp;
            this.status = status;
        }
        MessageReceivedStampEventContents.prototype.getMessage = function () {
            return this.stamp;
        };
        return MessageReceivedStampEventContents;
    })(MessageReceivedEventContents);
    Blitz.MessageReceivedStampEventContents = MessageReceivedStampEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var MessageRejectedEvent = (function (_super) {
        __extends(MessageRejectedEvent, _super);
        function MessageRejectedEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 11 /* MessageRejected */, contents);
        }
        MessageRejectedEvent.prototype.getEventContents = function () {
            return this.contents;
        };
        return MessageRejectedEvent;
    })(Blitz.ConversationEvent);
    Blitz.MessageRejectedEvent = MessageRejectedEvent;

    var MessageRejectedEventContents = (function (_super) {
        __extends(MessageRejectedEventContents, _super);
        function MessageRejectedEventContents(meta, sender, messageId, correlationKey) {
            _super.call(this, meta);
            this.sender = sender;
            this.messageId = messageId;
            this.correlationKey = correlationKey;
        }
        MessageRejectedEventContents.prototype.getSender = function () {
            return this.sender;
        };

        MessageRejectedEventContents.prototype.getMessageId = function () {
            return this.messageId;
        };

        MessageRejectedEventContents.prototype.getCorrelationKey = function () {
            return this.correlationKey;
        };
        return MessageRejectedEventContents;
    })(Blitz.EventContents);
    Blitz.MessageRejectedEventContents = MessageRejectedEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var MessageSendingEvent = (function (_super) {
        __extends(MessageSendingEvent, _super);
        function MessageSendingEvent(eventId, conversationIdentity, sender, contents, correlationKey) {
            _super.call(this, eventId, conversationIdentity, sender, 8 /* MessageSending */, contents);
            this.correlationKey = correlationKey;
        }
        MessageSendingEvent.prototype.getEventContents = function () {
            return this.contents;
        };

        MessageSendingEvent.prototype.getCorrelationKey = function () {
            return this.correlationKey;
        };
        return MessageSendingEvent;
    })(Blitz.ConversationEvent);
    Blitz.MessageSendingEvent = MessageSendingEvent;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var MessageSuspendedEvent = (function (_super) {
        __extends(MessageSuspendedEvent, _super);
        function MessageSuspendedEvent(eventId, conversationIdentity, sender, contents) {
            _super.call(this, eventId, conversationIdentity, sender, 10 /* MessageSuspended */, contents);
        }
        MessageSuspendedEvent.prototype.getEventContents = function () {
            return this.contents;
        };

        MessageSuspendedEvent.prototype.setText = function (textMessage) {
            this.getEventContents().setValue(textMessage);
        };

        MessageSuspendedEvent.prototype.getUrn = function () {
            return '';
        };
        return MessageSuspendedEvent;
    })(Blitz.ConversationEvent);
    Blitz.MessageSuspendedEvent = MessageSuspendedEvent;

    var MessageSuspendedEventContents = (function (_super) {
        __extends(MessageSuspendedEventContents, _super);
        function MessageSuspendedEventContents(meta, sender, correlationKey, type, textMessage) {
            _super.call(this, meta, sender, correlationKey, type, textMessage, 0 /* Enabled */);
        }
        MessageSuspendedEventContents.prototype.setValue = function (value) {
            this.textMessage = value;
        };
        return MessageSuspendedEventContents;
    })(Blitz.MessageReceivedTextEventContents);
    Blitz.MessageSuspendedEventContents = MessageSuspendedEventContents;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ControlDisconnectedEvent = (function (_super) {
        __extends(ControlDisconnectedEvent, _super);
        function ControlDisconnectedEvent(eventId, receiver) {
            _super.call(this, eventId, receiver, 14 /* ControlDisconnected */);
        }
        return ControlDisconnectedEvent;
    })(Blitz.ControlEvent);
    Blitz.ControlDisconnectedEvent = ControlDisconnectedEvent;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EventFactory = (function () {
        function EventFactory() {
            this.conversationFactory = new Blitz.ConversationFactory();
            this.userFactory = new Blitz.UserFactory();
            this.eventFactoryMap = {
                'message/received': 'createMessageReceivedEvent',
                'message/sending': 'createMessageSendingEvent',
                'message/suspended': 'createMessageSuspendedEvent',
                'message/rejected': 'createMessageRejectedEvent',
                'message/deleted': 'createMessageDeletedEvent',
                'message/readByMe': 'createMessageReadByMeEvent',
                'conversation/created': 'createConversationCreatedEvent',
                'conversation/deleted': 'createConversationDeletedEvent',
                'conversation/updated': 'createConversationUpdatedEvent',
                'conversation/rejected': 'createConversationRejectedEvent',
                'conversation/denied': 'createConversationDeniedEvent',
                'conversation/left': 'createUserLeftEvent',
                'conversation/added': 'createUserAddedEvent',
                'control/disconnected': 'createControlDisconnectedEvent',
                'notification/conversationSettingUpdated': 'createNotificationSettingUpdatedEvent',
                'notification/conversationSettingUpdate': 'createNotificationSettingUpdatedEvent'
            };
        }
        EventFactory.prototype.create = function (event) {
            var eventType = event['content']['content_type'];
            var factory = this.eventFactoryMap[eventType];
            if (typeof this[factory] === 'function') {
                return this[factory](event);
            }
            debug('This event type is not supported: ' + eventType);
            return null;
        };

        EventFactory.prototype.getEventStatusType = function (status) {
            if (status === 'Enabled') {
                return 0 /* Enabled */;
            } else {
                return 1 /* Disabled */;
            }
        };

        EventFactory.prototype.getMessageStatusType = function (status) {
            if (status === 'Enabled') {
                return 0 /* Enabled */;
            } else {
                return 1 /* Disabled */;
            }
        };

        EventFactory.prototype.getMessageType = function (type) {
            switch (type) {
                case 'message/text':
                    return 0 /* Text */;
                    break;
                case 'message/stamp':
                    return 1 /* Stamp */;
                    break;
                default:
                    debug('Invalid message content type');
                    return 2 /* Disabled */;
            }
        };

        EventFactory.prototype.createConversationCreatedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversation = this.conversationFactory.create(params.content.conversation);

            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var contents = new Blitz.ConversationCreatedEventContents(new Blitz.Meta(parseInt(params.create_time), null), conversation);

            return new Blitz.ConversationCreatedEvent(eventId, conversation.getIdentity(), eventSender, contents);
        };

        EventFactory.prototype.createConversationUpdatedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversation = this.conversationFactory.create(params.content.conversation);

            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var contents = new Blitz.ConversationUpdatedEventContents(new Blitz.Meta(parseInt(params.create_time), null), conversation);

            return new Blitz.ConversationUpdatedEvent(eventId, conversation.getIdentity(), eventSender, contents);
        };

        EventFactory.prototype.createConversationDeletedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversationIdentity = new Blitz.ConversationIdentity(params.content.conversation_id, params.content.conversation_ref_key);

            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var contents = new Blitz.ConversationDeletedEventContents(new Blitz.Meta(parseInt(params.create_time), null));

            return new Blitz.ConversationDeletedEvent(eventId, conversationIdentity, eventSender, contents);
        };

        EventFactory.prototype.createConversationRejectedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversationIdentity = new Blitz.ConversationIdentity(params.content.conversation_id, params.content.conversation_ref_key);
            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var contents = new Blitz.ConversationRejectedEventContents(new Blitz.Meta(parseInt(params.create_time), null));

            return new Blitz.ConversationRejectedEvent(eventId, conversationIdentity, eventSender, contents);
        };

        EventFactory.prototype.createConversationDeniedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            return new Blitz.ConversationDeniedEvent(eventId, eventSender, this.createConversationError(params.content.ng_reason));
        };

        EventFactory.prototype.createConversationError = function (ngReason) {
            var ngMessage = '';
            var ngReasonType;
            switch (ngReason) {
                case 'error/zoningError':
                    ngReasonType = 1 /* ZoningError */;
                    ngMessage = Blitz.Language.getMessage('chat.dialog_content_member_select_age_limit');
                    break;
                case 'error/permissionError':
                    ngReasonType = 0 /* PermissionError */;
                    ngMessage = Blitz.Language.getMessage('chat.dialog_content_not_permitted');
                    break;
                case 'error/alreadyUpdateError':
                    ngReasonType = 2 /* AlreadyUpdateError */;
                    ngMessage = Blitz.Language.getMessage('chat.dialog_content_already_update_error');
                    break;
                case 'error/enableSendOnlyFriend':
                    ngReasonType = 3 /* EnableOnlyFriend */;
                    ngMessage = Blitz.Language.getMessage('chat.error_privacy_level_1');
                    break;
                case 'error/enableSendWithinTwoDegrees':
                    ngReasonType = 4 /* EnableOnlyWithinTwoDegrees */;
                    ngMessage = Blitz.Language.getMessage('chat.error_privacy_level_2');
                    break;
                default:
                    debug('Undefined ng_reason: ' + ngReason);
                    break;
            }
            return new Blitz.ConversationError(ngReasonType, ngMessage);
        };

        EventFactory.prototype.createUserAddedEvent = function (params) {
            var _this = this;
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversation = this.conversationFactory.create(params.content.conversation);
            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var addCobitUsers = params.content.added_users.map(function (user) {
                return _this.userFactory.createCobitUser(user.ref_key, user.identity);
            });

            var contents = new Blitz.UserAddedEventContents(new Blitz.Meta(parseInt(params.create_time), null), addCobitUsers);

            return new Blitz.UserAddedEvent(eventId, conversation.getIdentity(), eventSender, contents);
        };

        EventFactory.prototype.createUserLeftEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversation = this.conversationFactory.create(params.content.conversation);
            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var contents = new Blitz.UserLeftEventContents(new Blitz.Meta(parseInt(params.create_time), null), conversation);

            return new Blitz.UserLeftEvent(eventId, conversation.getIdentity(), eventSender, contents);
        };

        EventFactory.prototype.createMessageReceivedEvent = function (params) {
            var message = params.content.message;
            var eventId = new Blitz.EventIdentity(params.identity);
            var status = this.getEventStatusType(params.status);
            var conversationIdentity = new Blitz.ConversationIdentity(message.to_conversation.identity, message.to_conversation.ref_key);

            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var content = this.createMessageReceivedEventContents(message);

            return new Blitz.MessageReceivedEvent(eventId, conversationIdentity, eventSender, content, status, params.correlation_key);
        };

        EventFactory.prototype.createMessageSendingEvent = function (params) {
            var message = params.content.message;
            var eventId = new Blitz.EventIdentity("");
            var conversationIdentity = new Blitz.ConversationIdentity(message.to_conversation.identity, message.to_conversation.ref_key);
            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);
            var content = this.createMessageReceivedEventContents(message);

            return new Blitz.MessageSendingEvent(eventId, conversationIdentity, eventSender, content, params.correlation_key);
        };

        EventFactory.prototype.createMessageSuspendedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversationIdentity = new Blitz.ConversationIdentity(params.content.to_conversation.identity, params.content.to_conversation.ref_key);
            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var content = this.createMessageSuspendedEventContents(params);

            return new Blitz.MessageSuspendedEvent(eventId, conversationIdentity, eventSender, content);
        };

        EventFactory.prototype.createMessageRejectedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversationIdentity = new Blitz.ConversationIdentity(params.content.to_conversation.identity, params.content.to_conversation.ref_key);
            var sender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var meta = new Blitz.Meta(parseInt(params.create_time), null);
            var contents = new Blitz.MessageRejectedEventContents(meta, sender, params.content.message_id, params.correlation_key);

            return new Blitz.MessageRejectedEvent(eventId, conversationIdentity, sender, contents);
        };

        EventFactory.prototype.createMessageDeletedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversationIdentity = new Blitz.ConversationIdentity(params.content.to_conversation.identity, params.content.to_conversation.ref_key);
            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var content = this.createMessageDeletedEventContents(params);

            return new Blitz.MessageDeletedEvent(eventId, conversationIdentity, eventSender, content);
        };

        EventFactory.prototype.createMessageReadByMeEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var messageIds = params.content.message_ids;
            var content = new Blitz.MessageReadByMeEventContents(new Blitz.Meta(parseInt(params.create_time), null), messageIds);

            return new Blitz.MessageReadByMeEvent(eventId, eventSender, content);
        };

        EventFactory.prototype.createControlDisconnectedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var receiver = this.userFactory.createCobitUser(params.receiver.ref_key, params.receiver.identity);
            return new Blitz.ControlDisconnectedEvent(eventId, receiver);
        };

        EventFactory.prototype.createMessageReceivedEventContents = function (params) {
            var meta = new Blitz.Meta(parseInt(params.create_time), null);
            var sender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);
            var status = this.getMessageStatusType(params.status);

            if (status === 1 /* Disabled */) {
                return new Blitz.MessageReceivedTextEventContents(meta, sender, params.identity, 2 /* Disabled */, Blitz.TextMessage.empty(params.to_conversation.identity, sender.getIdentity(), meta), status);
            } else {
                var type = this.getMessageType(params.content.type);
                if (type == 0 /* Text */) {
                    var textContent = params.content;
                    var textMessage = new Blitz.TextMessage(params.to_conversation.identity, sender.getIdentity(), meta, textContent.text);
                    return new Blitz.MessageReceivedTextEventContents(meta, sender, params.identity, type, textMessage, status);
                } else if (type == 1 /* Stamp */) {
                    var stampMessage = Blitz.MessageFactory.createMessage(params);
                    return new Blitz.MessageReceivedStampEventContents(meta, sender, params.identity, type, stampMessage, status);
                }
            }
        };

        EventFactory.prototype.createMessageSuspendedEventContents = function (params) {
            var meta = new Blitz.Meta(parseInt(params.create_time), null);

            var sender = this.userFactory.createCobitUser(params.receiver.ref_key, params.receiver.identity);
            var textMessage = Blitz.TextMessage.empty(params.content.to_conversation.identity, sender.getIdentity(), meta);

            return new Blitz.MessageSuspendedEventContents(meta, sender, params.correlation_key, 0 /* Text */, textMessage);
        };

        EventFactory.prototype.createMessageDeletedEventContents = function (params) {
            var messageId = params.content.message_id;
            var meta = new Blitz.Meta(parseInt(params.create_time), null);
            var sender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            return new Blitz.MessageDeletedEventContents(meta, sender, messageId);
        };

        EventFactory.prototype.createNotificationSettingUpdatedEvent = function (params) {
            var eventId = new Blitz.EventIdentity(params.identity);
            var conversationIdentity = new Blitz.ConversationIdentity(params.content.setting.conversation_id, params.content.conversation_ref_key);

            var eventSender = this.userFactory.createCobitUser(params.sender.ref_key, params.sender.identity);

            var contents = new Blitz.NotificationSettingUpdatedEventContents(new Blitz.Meta(parseInt(params.create_time), null), params.content.setting.enabled);

            return new Blitz.NotificationSettingUpdatedEvent(eventId, conversationIdentity, eventSender, contents);
        };
        return EventFactory;
    })();
    Blitz.EventFactory = EventFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationRepository = (function () {
        function ConversationRepository(client) {
            this.client = client;
            this.conversationFactory = new Blitz.ConversationFactory();
        }
        ConversationRepository.ofApi = function (client) {
            return new ConversationRepository(client);
        };

        ConversationRepository.prototype.getParticipatingList = function (range) {
            var defer = new Deferred();
            this.getParticipatingListFromApi(range).next(function (participatingList) {
                defer.call(participatingList);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        ConversationRepository.prototype.getParticipatingListFromApi = function (range) {
            var _this = this;
            var defer = new Deferred();
            this.client.getParticipatingList(range).next(function (response) {
                var conversations = response['conversations'];
                if (!conversations.length) {
                    defer.call([]);
                    return;
                }
                var participatingList = conversations.map(function (conversationResponse) {
                    return _this.conversationFactory.create(conversationResponse);
                });
                defer.call(participatingList);
                _this.setCaches(conversations);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        ConversationRepository.prototype.getUpdatedParticipatingList = function (range) {
            var _this = this;
            var defer = new Deferred();
            this.client.getUpdatedParticipatingList(range).next(function (response) {
                var conversations = response['conversations'];
                if (!conversations.length) {
                    defer.call([]);
                    return;
                }
                var participatingList = conversations.map(function (conversationResponse) {
                    return _this.conversationFactory.create(conversationResponse);
                });
                defer.call(participatingList);
                _this.setCaches(conversations);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        ConversationRepository.prototype.getConversation = function (conversationId) {
            var promise = new monapt.Promise();
            var conversation = this.getConversationFromStorage(conversationId);
            if (!_.isUndefined(conversation)) {
                setTimeout(function () {
                    return promise.success(conversation);
                });
                return promise.future();
            }
            var future = this.getConversationFromApi(conversationId);
            future.onSuccess(function (conversation) {
                return promise.success(conversation);
            });
            future.onFailure(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        ConversationRepository.prototype.getConversationFromStorage = function (conversationId) {
            var data = AsyncStorage.Local.getJson(this.getCacheKey(conversationId));
            if (_.isUndefined(data)) {
                return undefined;
            }
            return this.conversationFactory.create(data);
        };

        ConversationRepository.prototype.getConversationFromApi = function (conversationId) {
            var _this = this;
            var promise = new monapt.Promise();
            this.client.getConversation(conversationId).next(function (result) {
                var iConversation = result.conversation;
                var conversation = _this.conversationFactory.create(iConversation);
                promise.success(conversation);
                _this.setCache(iConversation);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        ConversationRepository.prototype.getByRefKey = function (conversationRefKey) {
            var defer = new Deferred();
            this.client.getByRefKey(conversationRefKey).next(function (response) {
                var conversationFactory = new Blitz.ConversationFactory();
                var conversation = conversationFactory.create(response.conversation);
                defer.call(conversation);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        ConversationRepository.prototype.createAndAdd = function (targetUserRefKeys, conversationRefKey) {
            if (typeof conversationRefKey === "undefined") { conversationRefKey = null; }
            var defer = new Deferred();
            this.client.createAndAdd({
                'clientCustomField': JSON.stringify(''),
                'conversationRefKey': conversationRefKey,
                'targetUserRefKeys': targetUserRefKeys
            }).next(function (response) {
                var eventFactory = new Blitz.EventFactory();
                var event = eventFactory.create(response);
                var conversationFactory = new Blitz.ConversationFactory();
                if (event.isConversationCreatedEvent()) {
                    defer.call(conversationFactory.create(response['content']['conversation']));
                } else {
                    defer.fail(event.getError());
                }
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        ConversationRepository.prototype.updateName = function (conversation, newName) {
            var _this = this;
            var defer = new Deferred();
            this.client.updateConversationName(conversation.getConversationId(), newName).next(function (response) {
                if (response['content']['content_type'] === 'conversation/suspended') {
                    conversation.name = newName;
                    return defer.call(conversation);
                }

                _this.removeCache(conversation.getIdentity());
                defer.call(conversation.name = newName);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        ConversationRepository.prototype.addUserByRefKey = function (conversationId, targetUserRefKeys) {
            var defer = new Deferred();
            this.client.addUserByRefKey({
                'conversationId': conversationId,
                'targetUserRefKeys': targetUserRefKeys
            }).next(function (response) {
                var eventFactory = new Blitz.EventFactory();
                var event = eventFactory.create(response);
                if (event.isUserAddedEvent()) {
                    defer.call(event);
                } else {
                    defer.fail(event.getError());
                }
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        ConversationRepository.prototype.leaveConversation = function (conversationId) {
            var defer = new Deferred();
            var leaveConversation = this.client.leaveConversation(conversationId.getValue());
            leaveConversation.next(function (response) {
                defer.call(response.content.conversation.identity);
            });
            leaveConversation.error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        ConversationRepository.prototype.createMyConversation = function (conversationRefKey) {
            var _this = this;
            var defer = new Deferred();
            var conversation = this.client.create({
                'name': '',
                'clientCustomField': JSON.stringify(''),
                'refKey': conversationRefKey
            });

            conversation.next(function (response) {
                defer.call(_this.conversationFactory.create(response.content.conversation));
            });
            conversation.error(function (error) {
                defer.fail(error);
            });
            return defer;
        };

        ConversationRepository.prototype.getCacheKey = function (conversationId) {
            return 'Conversation_' + conversationId;
        };

        ConversationRepository.prototype.setCaches = function (iConversations) {
            var _this = this;
            _.each(iConversations, function (iConversation) {
                return _this.setCache(iConversation);
            });
        };

        ConversationRepository.prototype.setCache = function (iConversation) {
            AsyncStorage.Local.setItem(this.getCacheKey(iConversation.identity), JSON.stringify({
                'timestamp': new Date().getTime(),
                'expires': Service.CACHE_TYPE_PERMANENT,
                'data': iConversation
            })).error(function (error) {
                return debug(error.message);
            });
        };

        ConversationRepository.prototype.removeCache = function (conversationId) {
            var key = this.getCacheKey(conversationId.getValue());
            AsyncStorage.Local.removeItem(key);
            debug('remove cache: ' + key);
        };
        return ConversationRepository;
    })();
    Blitz.ConversationRepository = ConversationRepository;
})(Blitz || (Blitz = {}));
var Cobit;
(function (Cobit) {
    var ApiClient = (function () {
        function ApiClient(api) {
            this.api = api;
        }
        ApiClient.prototype.sendRequest = function (apiName, params, doTimeout) {
            if (typeof params === "undefined") { params = {}; }
            if (typeof doTimeout === "undefined") { doTimeout = false; }
            var defer = new Deferred();
            $.extend(params, {
                'success': function (result) {
                    return defer.call(result);
                },
                'error': function (xhr) {
                    return defer.fail(Cobit.handleError(xhr));
                }
            });
            if (doTimeout) {
                $.extend(params, {
                    'stimeout': function () {
                        return defer.fail(new ServerSentEventTimeoutError());
                    }
                });
            }
            this.api[apiName](params);
            return defer;
        };

        ApiClient.prototype.getConversation = function (conversationId) {
            return this.sendRequest('getConversation', {
                'conversation_id': conversationId
            });
        };

        ApiClient.prototype.getByRefKey = function (conversationRefKey) {
            return this.sendRequest('getConversationByRefKey', {
                'ref_key': conversationRefKey
            });
        };

        ApiClient.prototype.create = function (params) {
            return this.sendRequest('createConversation', {
                'client_custom_field': params['clientCustomField'],
                'ref_key': params['refKey'],
                'response': function (res) {
                    return SNS.Analytics.event('create_chat_my', 'chat_all');
                }
            }, true);
        };

        ApiClient.prototype.createAndAdd = function (params) {
            return this.sendRequest('createAndAdd', {
                'client_custom_field': params['clientCustomField'],
                'ref_key': params['conversationRefKey'],
                'target_user_ref_keys': params['targetUserRefKeys']
            });
        };

        ApiClient.prototype.addUserByRefKey = function (params) {
            return this.sendRequest('addUserByRefKey', {
                'conversation_id': params['conversationId'],
                'target_user_ref_keys': params['targetUserRefKeys']
            });
        };

        ApiClient.prototype.leaveConversation = function (conversationId) {
            return this.sendRequest('leaveConversation', {
                'conversation_id': conversationId
            });
        };

        ApiClient.prototype.getParticipatingList = function (range) {
            return this.sendRequest('loadConversations', {
                'offset': range.offset,
                'limit': range.limit
            });
        };

        ApiClient.prototype.getUpdatedParticipatingList = function (range) {
            return this.sendRequest('loadUpdatedConversations', {
                'offset': range.offset,
                'limit': range.limit
            });
        };

        ApiClient.prototype.getLatestMessage = function (conversationIds) {
            return this.sendRequest('latestMessage', {
                'conversation_ids': conversationIds.join(',')
            });
        };

        ApiClient.prototype.getHistory = function (conversationId, range) {
            var _this = this;
            if (!Util.UA.isAndroid('2.')) {
                return this.sendRequest('history', {
                    'conversation_id': conversationId,
                    'offset_event_id': range.offset,
                    'limit': range.limit
                }, true);
            }

            var defer = new Deferred();
            var success = false;
            var callSend = function () {
                _this.sendRequest('history', {
                    'conversation_id': conversationId,
                    'offset_event_id': range.offset,
                    'limit': range.limit
                }, true).next(function (res) {
                    if (!success) {
                        success = true;
                        defer.call(res);
                    }
                });
            };
            callSend();
            callSend();
            return defer;
        };

        ApiClient.prototype.sendMessage = function (message) {
            var timeout = false;
            if (Util.UA.isAndroid('2.')) {
                timeout = true;
            }
            return this.sendRequest('sendMessage', {
                'conversation_id': message.getToConversationId(),
                'text': message.getText()
            }, timeout);
        };

        ApiClient.prototype.getUnreadCount = function (conversationIds) {
            return this.sendRequest('unreadCount', {
                'conversation_ids': conversationIds
            });
        };

        ApiClient.prototype.readPastMessages = function (conversationId, messageId) {
            return this.sendRequest('readPastMessages', {
                'conversation_id': conversationId,
                'message_id': messageId
            });
        };

        ApiClient.prototype.updateConversationName = function (conversationId, name) {
            return this.sendRequest('updateConversationName', {
                'conversation_id': conversationId,
                'name': name
            });
        };

        ApiClient.prototype.readPastAllMessages = function (conversationId) {
            return this.sendRequest('readPastAllMessages', {
                'conversation_id': conversationId
            });
        };

        ApiClient.prototype.getConversationNotificationSetting = function (conversationId) {
            return this.sendRequest('getConversationNotificationSetting', {
                'conversation_id': conversationId
            });
        };

        ApiClient.prototype.updateConversationNotificationSetting = function (conversationId, notificationEnabled) {
            return this.sendRequest('updateConversationNotificationSetting', {
                'conversation_id': conversationId,
                'notification_enabled': notificationEnabled
            });
        };

        ApiClient.prototype.updateConversationDisplaySetting = function (conversationId, displays) {
            return this.sendRequest('updateConversationDisplaySetting', {
                'conversation_id': conversationId,
                'displays': displays
            });
        };

        ApiClient.prototype.getConversationPersonalSetting = function (conversationId) {
            return this.sendRequest('getConversationPersonalSetting', {
                'conversation_id': conversationId
            });
        };

        ApiClient.prototype.getHiddenConversationsUnreadCount = function () {
            return this.sendRequest('getHiddenConversationsUnreadCount');
        };

        ApiClient.prototype.getStampPackage = function (stampId) {
            return this.sendRequest('getStampPackage', {
                'stamp_id': stampId
            });
        };

        ApiClient.prototype.getMyStamps = function (filterDisplayed) {
            return this.sendRequest('getMyStamps', {
                'displayed_filter': 'displayed'
            });
        };

        ApiClient.prototype.sendStampUnit = function (stampUnitId, toConversationId, correlationKey) {
            return this.sendRequest('sendStampUnit', {
                'to_conversation_id': toConversationId,
                'stamp_unit_id': stampUnitId,
                'correlation_key': correlationKey
            });
        };

        ApiClient.prototype.dummyFunctionReturnError = function (arg1, arg2) {
            var defer = new Deferred();
            setTimeout(function () {
                var response = {
                    errors: [{
                            error_code: 2008,
                            error_context: 'error',
                            error_id: 'InternalServerError',
                            error_message: 'Access Token is Expired',
                            error_type: 'error/internalServerError'
                        }]
                };
                var xhr = {
                    status: 200,
                    responseText: JSON.stringify(response)
                };
                defer.fail(Cobit.handleError(xhr));
            }, 3000);
            return defer;
        };
        return ApiClient;
    })();
    Cobit.ApiClient = ApiClient;

    var DeliveryOnlyApiClient = (function () {
        function DeliveryOnlyApiClient() {
        }
        DeliveryOnlyApiClient.prototype.sendRequest = function (dummyResponse) {
            var defer = new Deferred();
            setTimeout(function () {
                return defer.call(dummyResponse);
            });
            return defer;
        };

        DeliveryOnlyApiClient.prototype.getParticipatingList = function (range) {
            return this.sendRequest({ conversations: [] });
        };

        DeliveryOnlyApiClient.prototype.getUpdatedParticipatingList = function (range) {
            return this.sendRequest({ conversations: [] });
        };

        DeliveryOnlyApiClient.prototype.getConversation = function (conversationId) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.getByRefKey = function (conversationRefKey) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.create = function (params) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.createAndAdd = function (params) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.addUserByRefKey = function (params) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.leaveConversation = function (conversationId) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.getLatestMessage = function (conversationIds) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.getHistory = function (conversationId, range) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.sendMessage = function (message) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.getUnreadCount = function (conversationIds) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.readPastMessages = function (conversationId, messageId) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.updateConversationName = function (conversationId, name) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.readPastAllMessages = function (conversationId) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.getConversationNotificationSetting = function (conversationId) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.updateConversationNotificationSetting = function (conversationId, notificationEnabled) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.updateConversationDisplaySetting = function (conversationId, displays) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.getConversationPersonalSetting = function (conversationId) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.getHiddenConversationsUnreadCount = function () {
            return this.sendRequest({ conversations: [] });
        };

        DeliveryOnlyApiClient.prototype.getMyStamps = function (displayed) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.getStampPackage = function (stampId) {
            return undefined;
        };

        DeliveryOnlyApiClient.prototype.sendStampUnit = function (stampUnitId, toConversationId, correlationKey) {
            return undefined;
        };
        return DeliveryOnlyApiClient;
    })();
    Cobit.DeliveryOnlyApiClient = DeliveryOnlyApiClient;

    var CobitApiError = (function () {
        function CobitApiError() {
            this.name = 'Cobit API Error';
        }
        return CobitApiError;
    })();
    Cobit.CobitApiError = CobitApiError;

    var AuthenticationFailedError = (function (_super) {
        __extends(AuthenticationFailedError, _super);
        function AuthenticationFailedError() {
            _super.apply(this, arguments);
            this.code = 2003;
        }
        return AuthenticationFailedError;
    })(CobitApiError);
    Cobit.AuthenticationFailedError = AuthenticationFailedError;

    var NotParticipantOfConversationError = (function (_super) {
        __extends(NotParticipantOfConversationError, _super);
        function NotParticipantOfConversationError() {
            _super.apply(this, arguments);
            this.message = Blitz.Language.getMessage('chat.error_conversation_not_found');
            this.code = 2004;
        }
        return NotParticipantOfConversationError;
    })(CobitApiError);
    Cobit.NotParticipantOfConversationError = NotParticipantOfConversationError;

    var AlreadyParticipantOfConversationError = (function (_super) {
        __extends(AlreadyParticipantOfConversationError, _super);
        function AlreadyParticipantOfConversationError() {
            _super.apply(this, arguments);
            this.message = Blitz.Language.getMessage('chat.dialog_content_member_select_already_exists');
            this.code = 2005;
        }
        return AlreadyParticipantOfConversationError;
    })(CobitApiError);
    Cobit.AlreadyParticipantOfConversationError = AlreadyParticipantOfConversationError;

    var ContainNgWordError = (function (_super) {
        __extends(ContainNgWordError, _super);
        function ContainNgWordError() {
            _super.apply(this, arguments);
            this.message = Blitz.Language.getMessage('chat.error_send_filtered');
            this.code = 2006;
        }
        return ContainNgWordError;
    })(CobitApiError);
    Cobit.ContainNgWordError = ContainNgWordError;

    var AccessTokenExpireError = (function (_super) {
        __extends(AccessTokenExpireError, _super);
        function AccessTokenExpireError() {
            _super.apply(this, arguments);
            this.code = 2008;
        }
        return AccessTokenExpireError;
    })(CobitApiError);
    Cobit.AccessTokenExpireError = AccessTokenExpireError;

    var NotFoundResourceError = (function (_super) {
        __extends(NotFoundResourceError, _super);
        function NotFoundResourceError() {
            _super.apply(this, arguments);
            this.message = Blitz.Language.getMessage('chat.error_conversation_not_found');
            this.code = 2010;
        }
        return NotFoundResourceError;
    })(CobitApiError);
    Cobit.NotFoundResourceError = NotFoundResourceError;

    var ApiErrorCodeMap = {
        '2003': AuthenticationFailedError,
        '2004': NotParticipantOfConversationError,
        '2005': AlreadyParticipantOfConversationError,
        '2006': ContainNgWordError,
        '2008': AccessTokenExpireError,
        '2010': NotFoundResourceError
    };

    var CobitSystemError = (function () {
        function CobitSystemError(response) {
            this.name = 'Cobit System Error';
            this.message = Blitz.Language.getMessage('chat.error_failed');
            this.code = response.error_code;
        }
        return CobitSystemError;
    })();
    Cobit.CobitSystemError = CobitSystemError;

    var NetworkError = (function () {
        function NetworkError() {
            this.name = 'Network Error';
            this.message = Blitz.Language.getMessage('chat.error_timeout');
        }
        return NetworkError;
    })();
    Cobit.NetworkError = NetworkError;

    var ServerSentEventTimeoutError = (function () {
        function ServerSentEventTimeoutError() {
            this.name = 'Server Sent Event Timeout';
            this.message = Blitz.Language.getMessage('chat.error_timeout');
        }
        return ServerSentEventTimeoutError;
    })();
    Cobit.ServerSentEventTimeoutError = ServerSentEventTimeoutError;

    Cobit.handleError = function (xhr) {
        if (xhr.status == 0) {
            return new NetworkError();
        } else {
            return Cobit.createErrorFromErrorCode(xhr);
        }
    };

    Cobit.createErrorFromErrorCode = function (xhr) {
        var error = JSON.parse(xhr.responseText)['errors'][0];
        var errorCode = error.error_code + '';
        if (_.has(ApiErrorCodeMap, errorCode)) {
            return new ApiErrorCodeMap[errorCode]();
        }
        return new CobitSystemError(error);
    };
})(Cobit || (Cobit = {}));
var Cobit;
(function (Cobit) {
    var AuthClient = (function () {
        function AuthClient() {
        }
        AuthClient.prototype.login = function (params) {
            var _this = this;
            var defer = new Deferred();
            $.extend(params, {
                'success': function (response) {
                    if (response.result === 'OK') {
                        _this.debugLoginInfo(response);
                        defer.call(response);
                    } else {
                        defer.fail({});
                    }
                },
                'error': function (xhr) {
                    return defer.fail(xhr);
                },
                'timeout': function (xhr) {
                    return defer.fail(xhr);
                }
            });
            CobitSDK.login(params);
            return defer;
        };

        AuthClient.prototype.debugLoginInfo = function (data) {
            debug('===========================================');
            debug('UserID: ' + data['user']['identity']);
            debug('AccessToken: ' + data['access_token']);
            debug('===========================================');
        };
        return AuthClient;
    })();
    Cobit.AuthClient = AuthClient;

    (function (EventListenerType) {
        EventListenerType[EventListenerType["Common"] = 0] = "Common";
        EventListenerType[EventListenerType["Chat"] = 1] = "Chat";
    })(Cobit.EventListenerType || (Cobit.EventListenerType = {}));
    var EventListenerType = Cobit.EventListenerType;

    var StreamClient = (function () {
        function StreamClient() {
            StreamClient.serverSentEventListenerSet = [];
        }
        StreamClient.prototype.connect = function (params) {
            var _this = this;
            var defer = new Deferred();
            $.extend(params, {
                'success': function (apiObject) {
                    setTimeout(function () {
                        return defer.call(apiObject);
                    });
                    _this.notifyServerSentEventListeners();
                    _this.debugCobitAPIRequest();
                    _this.debugCobitAcceptResponse();
                    _this.debugAsyncApiResponse();
                },
                'error': function (error) {
                    return setTimeout(function () {
                        return defer.fail(error);
                    });
                }
            });
            CobitSDK.connect(params);
            return defer;
        };

        StreamClient.addOnceCommonServerSentEventListener = function (callback) {
            if (!StreamClient.serverSentEventListenerSet[0 /* Common */]) {
                StreamClient.serverSentEventListenerSet[0 /* Common */] = callback;
            }
        };

        StreamClient.setServerSentEventListener = function (callback) {
            var commonListenerCallback = StreamClient.serverSentEventListenerSet[0 /* Common */];
            StreamClient.serverSentEventListenerSet = [];
            if (!_.isUndefined(commonListenerCallback)) {
                StreamClient.addOnceCommonServerSentEventListener(commonListenerCallback);
            }
            StreamClient.serverSentEventListenerSet[1 /* Chat */] = callback;
        };

        StreamClient.prototype.notifyServerSentEventListeners = function () {
            var _this = this;
            StreamClient.serverSentEventListenerSet = [];

            CobitSDK.addListener('ServerSentEvent', function (sse) {
                debug('Others sent SSE:');
                debug(sse);
                for (var key in StreamClient.serverSentEventListenerSet) {
                    StreamClient.serverSentEventListenerSet[key].call(_this, sse);
                }
            });
        };

        StreamClient.addListener = function (event, callback) {
            CobitSDK.addListener(event, callback);
        };

        StreamClient.removeListener = function (event, callback) {
            CobitSDK.removeListener(event, callback);
        };

        StreamClient.removeAllListeners = function (event) {
            CobitSDK.removeEvent(event);
        };

        StreamClient.clearAllSSETimer = function () {
            CobitSDK.clearAllSSETimer();
        };

        StreamClient.prototype.debugCobitAPIRequest = function () {
            CobitSDK.addListener('CobitAPIRequest', function (sse) {
                debug('Cobit API Request params:');
                debug(sse);
            });
        };

        StreamClient.prototype.debugCobitAcceptResponse = function () {
            CobitSDK.addListener('CobitAcceptResponse', function (sse) {
                debug('Cobit API Accept Response: ' + sse['result']);
                debug(sse);
            });
        };

        StreamClient.prototype.debugAsyncApiResponse = function () {
            CobitSDK.addListener('AsyncAPIResponse', function (sse) {
                debug('Async API Response: ' + sse['content']['content_type']);
                debug(sse);
            });
        };
        return StreamClient;
    })();
    Cobit.StreamClient = StreamClient;
})(Cobit || (Cobit = {}));
var Blitz;
(function (Blitz) {
    (function (Language) {
        Language.getMessage = function (key, options, escape) {
            return _getMessage(getResource(key), options, escape);
        };

        function _setResource(testResource) {
            resource = testResource;
            throw new Error("Don't call this(for unit test)");
        }
        Language._setResource = _setResource;

        function _getMessage(resource, options, escape) {
            var result = (options == undefined) ? resource : format(resource, options, escape);

            return (result != undefined) ? result : '';
        }

        function getResource(key) {
            var res = _getResource(key);
            if (res !== undefined) {
                return res;
            }

            return '';
        }

        function _getResource(key) {
            if (resource[key]) {
                return resource[key];
            }
            if (i18n.getResource(key)) {
                return i18n.getResource(key);
            }
            return undefined;
        }

        function format(message, options, escape) {
            if (!_.isArray(options) && !_.isObject(options)) {
                return message;
            }
            return message.replace(/\{(\w+)\}/g, function (all, idx) {
                if (_.isNumber(options[idx])) {
                    return options[idx];
                }
                if (_.isUndefined(escape) || escape === true) {
                    return Util.String.escapeSpecialChars(options[idx]);
                }
                return options[idx];
            });
        }

        var resource = {
            "chat.back": "戻る",
            "chat.ok": "OK",
            "chat.complete": "完了",
            "chat.confirm": "確認",
            "chat.detail": "詳細",
            "chat.yes": "はい",
            "chat.no": "いいえ",
            "chat.save": "保存する",
            "chat.save_succeed": "保存されました。",
            "chat.save_failed": "保存に失敗しました。もう一度実行するか、時間をおいて再度お試しください。",
            "chat.settings": "設定",
            "chat.chat_list_name": "チャットリスト",
            "chat.chat_hidden_list_name": "非表示チャット",
            "chat.tab_conversation_list": "チャット",
            "chat.tab_contact_list": "友だち",
            "chat.tab_gree_chat": "GREEチャット",
            "chat.tab_game_chat": "ゲームチャット",
            "chat.create_conversation": "新しいチャットを始める",
            "chat.filter_by_name": "名前で絞り込む",
            "chat.contact_list_label_new_contacts": "新しい友だち",
            "chat.contact_list_label_contacts": "友だち",
            "chat.member_select_title": "メンバーを選ぶ",
            "chat.dialog_content_member_select_max_member_num": "最大参加人数を超えています。グループチャットは最大{0}人まで参加できます。",
            "chat.dialog_content_member_select_penalty": "利用規約で禁止している行為が確認できましたため、一部サービスのご利用を制限させていただきました。",
            "chat.conversation_send": "送信",
            "chat.conversation_send_with_consent": "同意して送信",
            "chat.conversation_load_history": "以前のメッセージを読む",
            "chat.conversation_event_leave_member": "{0} さんが退室しました",
            "chat.send_moderation_consent": "<a href=\"{url}\" class=\"lnk\">同意事項</a>に同意した上で送信してください。GREEはメッセージの内容を確認する場合があります。",
            "chat.send_moderation_consent_short": "送信にあたり、<a href=\"{url}\" class=\"lnk\">同意事項</a>に同意の上送信してください。",
            "chat.send_moderation_consent_long": "健全性維持のためGREEにてメッセージの内容を確認する場合があります。送信にあたり、<a href=\"{url}\" class=\"lnk\">同意事項</a>に同意の上��信してください。",
            "chat.error_send_filtered": "不適切な文言が含まれる可能性があるため送信できません���",
            "chat.error_send_penalty": "規約違反が確認されたため、お客さまのご利用を制限しております。詳細は<a href=\"{url}\" class=\"lnk\">こちら</a>をご確認ください。",
            "chat.error_send_max_char_num": "メッセージの最大文字数を超えているため送信できません。{0} 字以内で入力してください。",
            "chat.error_send_common": "送信に失敗しました。もう一度送信を行うか、時間をおいて再度お試しください。",
            "chat.error_blocked_user": "このユーザーにはメッセージを送信することができません",
            "chat.conversation_notify_new_message": "他のチャットに新着メッセージがあります。",
            "chat.conversation_notify_not_friend": "友だちではないチャットメンバーがいます。",
            "chat.dialog_content_report": "このメッセージを通報します。よろしいですか？",
            "chat.dialog_title_leave_conversation": "チャットからの退室",
            "chat.dialog_content_leave_conversation": "チャットから退室すると今までの内容を確認することができなくなります。退室してよろしいですか？",
            "chat.dialog_content_move_to_profile": "プロフィールページに遷移しますか？",
            "chat.conversation_option_add_members": "メンバー追加",
            "chat.conversation_option_notify_off": "通知OFFにする",
            "chat.conversation_option_notify_on": "通知ONにする",
            "chat.conversation_option_group_settings": "グループ設定",
            "chat.conversation_option_leave": "退室",
            "chat.group_settings_title": "グループ設定",
            "chat.group_settings_conversation_change_title": "グループ名変更",
            "chat.group_settings_members_title": "このチャットのメンバー",
            "chat.group_settings_save": "保存",
            "chat.group_settings_add_members": "メンバーを追加する",
            "chat.conversation_event_change_title_with_subject": "{0} さんがグループ名を変更しました",
            "chat.conversation_event_change_title_with_subject_by_system": "GREE管理人がグループ名を変更しました",
            "chat.conversation_event_change_title_to": "グループ名が 【{0}】に変更されました",
            "chat.conversation_event_change_title_to_with_subject": "{0} さんがグループ名を 【{1}】に変更しました",
            "chat.conversation_event_add_members_1": "{0} さん が追加されました",
            "chat.conversation_event_add_members_2": "{0} さん、{1} さん が追加されました",
            "chat.conversation_event_add_members_2_over": "{0} さん、{1} さん 達 {2}人 が追加されました",
            "chat.conversation_event_add_members_with_subject_1": "{0} さんが {1} さん を追加しました",
            "chat.conversation_event_add_members_with_subject_2": "{0} さんが {1} さん、{2} さん を追加しました",
            "chat.conversation_event_add_members_with_subject_2_over": "{0} さんが {1} さん、{2} さん 達 {3}人 を追加しました",
            "chat.see_more": "もっと見る",
            "chat.cancel": "キャンセル",
            "chat.dateformat": "{yyyy}-{m}-{d}",
            "chat.dateformat_yesterday_at": "昨日 {H}:{MM}",
            "chat.dateformat_time_at": "{H}:{MM}",
            "chat.dateformat_date_at": "{m}月{d}日",
            "chat.dateformat_weekday_at": "{m}月{d}日 {H}:{MM}",
            "chat.dateformat_monthly_at": "{m}月{d}日 {H}:{MM}",
            "chat.dateformat_different_year": "{yyyy}年{m}月{d}日 {H}:{MM}",
            "chat.dateformat_m/d_H:MM": "{m}/{d} {H}:{MM}",
            "chat.yesterday": "昨日",
            "chat.just_now": "数秒前",
            "chat.within_one_minute": "約1分前",
            "chat.x_minutes_ago": "{0}分前",
            "chat.x_minutes_ago_other": "{0}分前",
            "chat.x_hours_ago": "{0}時間前",
            "chat.x_hours_ago_other": "{0}時間前",
            "chat.x_days_ago": "{0}日前",
            "chat.x_days_ago_more": "{0}日以上前",
            "chat.year": "年",
            "chat.month": "月",
            "chat.day": "日",
            "chat.x_person": "{0} 人",
            "chat.see_more_loading": "読み込み中…",
            "chat.new": "NEW",
            "chat.online": "ONLINE",
            "chat.mychat": "マイチャット",
            "chat.dateformat_b": "{yyyy}年{m}月{d}日",
            "chat.dateformat_c": "{yyyy}/{m}/{d}({w})",
            "chat.dateformat_d": "{yyyy}年{m}月{d}日({w}) {H}:{MM}",
            "chat.dateformat_e": "{m}月{d}日({w}) {H}:{MM}",
            "chat.maintenance_format_a": "開始 : {from}<br />終了 : {to}",
            "chat.maintenance_format_b": "{from} ~ {to}",
            "chat.day_0": "日",
            "chat.day_1": "月",
            "chat.day_2": "火",
            "chat.day_3": "水",
            "chat.day_4": "木",
            "chat.day_5": "金",
            "chat.day_6": "土",
            "chat.dialog_content_upgrade": "この機能をご利用いただくにはご登録情報の追加が必要となります。",
            "chat.dialog_title_penalty": "投稿一時停止",
            "chat.member_select_add": "追加({num})",
            "chat.member_select_create": "開始({num})",
            "chat.dialog_title_member_select_max_member_num": "最大参加人数の超過",
            "chat.dialog_title_member_select_age_limit": "年齢による制限",
            "chat.chat_event_create_chat": "{0}さんがチャットを作りました",
            "chat.chat_event_welcome_1on1": "チャットを開始しました。<br />メッセージを送りましょう！",
            "chat.error_send_empty": "メッセージの内容がないため送信できません。",
            "chat.error_send_offline": "インターネット接続がオフラインのようです。もう一度送信するか時間をおいて再度お試しください。",
            "chat.dialog_title_member_select_min_member_num": "未選択",
            "chat.dialog_content_member_select_min_member_num": "友だちを1人以上選択してください。",
            "chat.dialog_content_not_permitted": "権限がありません",
            "chat.dialog_content_zoning_error": "追加できないユーザが含まれています",
            "chat.dialog_content_already_update_error": "既に更新されています",
            "chat.dialog_friend_request": "友だちになる",
            "chat.dialog_friend_request_outgoing": "友だち申請中",
            "chat.dialog_friend_request_incoming": "友だち承認",
            "chat.dialog_jump_to_chat": "チャットする",
            "chat.dialog_jump_to_profile": "プロフを見る",
            "chat.dialog_jump_to_report": "通報する",
            "chat.reload": "再読み込み",
            "chat.error_failed": "処理に失敗しました。もう一度実行するか、時間をおいて再度お試しください。",
            "chat.error_timeout": "タイムアウトしました。もう一度実行するか、時間をおいて再度お試しください。",
            "chat.error_offline": "インターネット接続がオフラインのようです。もう一度実行するか、時間をおいて再度お試しください。",
            "chat.error_reload": "接続が無効となりましたため��再度ページを読み込みます。",
            "chat.error_privacy_level_1": "このユーザとは友だちのみ会話を始めることができます",
            "chat.error_privacy_level_2": "このユーザとは友だち、もしくは友だちの友だちのみ会話を始めることができます",
            "chat.error_freeze_chat": "利用規約で禁止している行為が確認されましたため、こちらのチャットを凍結させていただきました。",
            "chat.error_conversation_not_found": "チャットが見つかりません。",
            "chat.contact_list_tutorial": "友だちを見つけよう",
            "chat.find_friends": "友だちを探す",
            "chat.member_select_tutorial": "友だちを見つけよう",
            "chat.dialog_content_member_select_age_limit": "年齢の制限により指定したユーザとチャットを始めることができません",
            "chat.dialog_content_member_select_already_exists": "指定したユーザは既に会話に追加されています",
            "chat.message_censored": "このメッセージはGREE管理人により削除されました。",
            "chat.link_intro_with_maintenance": "メンテナンスのお知らせ ({m}月{d}日)",
            "chat.link_intro_with_under_maintenance": "現在GREEチャットはメンテナンス中です",
            "chat.balloon_content_beta": "新コミュニケーションサービス 『GREEチャット』 β公開中！",
            "chat.intro_title_ga": "GREEチャット 公開のお知らせ",
            "chat.intro_content_ga": "スマートフォン版GREEに新たなコミュニケーションサービス『GREEチャット』が登場しました。",
            "chat.intro_title_group": "みんなでチャットしよう♪",
            "chat.intro_title_1on1": "１対１チャットも♪",
            "chat.intro_note_ga": "β期間中の投稿データは削除されている場合がございます。また、現在Androidについては 4.0以上のみのサポートとなります。なお、携帯版GREEでは本機能は未対応となりますので、友だちが携帯版GREEをご利用の場合メッセージは届きません。予めご了承ください。",
            "chat.intro_link": "チャットトップへ",
            "chat.intro_will_maintenance_head": "システムメンテナンスのお知らせ",
            "chat.intro_under_maintenance_head": "GREEチャットはメンテナンス中です",
            "chat.intro_maintenance_announce": "<h2>◯メンテナンス時間（予定）</h2>" + "<p class=\"sen\">{span}</p><br /><br />" + "<h2>◯メンテナンス中の利用について</h2>" + "<p class=\"sen\">メンテナンス中は1対1チャット、グループチャット、マイチャットをご利用いただくことができません。(これらのチャットはチャット一覧から非表示になります。)</p><br />" + "<p class=\"sen\">GREEからのお知らせ（GREEトクトク事務局、アバター\"ココ\"、GREE事務局、GREEパトロール、GREEカスタマーサービス、GREEとみんなの6つの約束、GREEコイン事務局など）につきましては、メンテナンス中もご確認いただくことが可能です。</p><br /><br />" + "<h2>◯その他、メンテナンス中に利用できない機能</h2>" + "<ul>" + "<li>よせがき返信（お礼）機能</li>" + "<li>コミュニティの招待</li>" + "</ul>" + "<br />" + "<p class=\"sen\">お客さまにはご不便をおかけいたしますが、ご理解とご了承をいただきますようお願い申し上げます。</p>",
            "chat.deprecated_pc_browser": "ご利用のブラウザはサポート対象外です。<br /> GREEチャットを快適に使うために、お好きなブラウザのアイコンをクリック��て最新版をダウンロードしてください。",
            "chat.not_supported_device": "サポート対象外の端末です<br/>GREEチャットのサポート対象はこちら",
            "chat.switch_title": "公開まであと少し・・・",
            "chat.switch_content": "新コミュニケーションサービス 『GREEチャット』 が始まります！",
            "chat.switch_note": "本日までの先行公開期間中に作成されたチャットルームまた投稿されたメッセージは、本公開後に見ることができなくなります。ご留意ください。",
            "chat.switch_link": "戻る",
            "chat.dialog_content_move_out": "他のページを開きます。よろしいですか？",
            "chat.intro_title_release_plan": "今後の機能追加予定",
            "chat.intro_note_release_plan": "お客さまからたくさんのご要望をいただき、現在以下機能の追加を予定しております。<br />・<br />新機能の公開を楽しみにお待ち頂ければ幸いです。",
            "chat.theme_setting_title": "GREEチャットのデザイン設定",
            "chat.theme_setting_item_desc": "{themeName}のデザインにする",
            "chat.theme_setting_valid_term_desc": "※ {term} のみ有効な設定です",
            "chat.notification_setting_title": "GREEチャットの通知設定",
            "chat.notification_setting_push": "プッシュ通知で受信通知を受け取る",
            "chat.notification_setting_mail": "Eメールで受信通知を受け取る",
            "chat.notification_setting_on": "オン",
            "chat.notification_setting_off": "オフ",
            "chat.notification_setting_mail_interval_0": "毎回受け取る",
            "chat.notification_setting_mail_interval_15": "15分毎に受け取る",
            "chat.notification_setting_mail_interval_30": "30分毎に受け取る",
            "chat.notification_setting_mail_interval_60": "1時間毎に受け取る",
            "chat.notification_setting_mail_interval_1440": "24時間毎に受け取る",
            "chat.app_download_message": "プッシュ通知を受け取る場合はGREEアプリのご利用が必要です",
            "chat.back_to_top": "チャットトップへ",
            "chat.go_to_top": "チャットトップへ移動する",
            "chat.alert_send_delivery_user": "このユーザーにメッセージを送信することはできません。",
            "chat.alert_send_delivery_community": "このチャットではメッセージを送信できません。",
            "chat.header_option_suspend_reception": "受信停止",
            "chat.header_option_notify_to_on": "通知ONにする",
            "chat.header_option_notify_to_off": "通知OFFにする",
            "chat.link_sender_profile_community": "さんからのコミュニティに関するメッセージです。",
            "chat.dialog_suspend_reception_notification": "受信停止をすると、今後このユーザーからのチャットが受信できません。",
            "chat.dialog_suspend_reception_notification_community": "受信停止をするためにはコミュニティから退会する必要があります。",
            "chat.dialog_suspend_reception_description": "<span class=\"minorL\">受信停止をするには、</span><span class=\"minorL\">プロフページから禁止リストへ追加</span><span class=\"minorL\">してください。</span>",
            "chat.dialog_suspend_reception_description_pc": "<span class=\"minorL\">受信停止をするには、</span><span class=\"lead\">通知とプライバシーページ内の「禁止リスト」に、このユーザーのIDを入力</span><span class=\"minorL\">してください。</span>",
            "chat.dialog_suspend_reception_description_user_id_pc": "ユーザーID",
            "chat.dialog_suspend_reception_description_community": "<span class=\"lead\">本ページを確認いただいただけでは受信停止にはなりません。</span><p class=\"minor space8\">※コミュニティから退会すると、今後このコミュニティからのチャットを受信することはできません。</p>",
            "chat.dialog_suspend_reception_annotation": "※チャットリストからも削除されます",
            "chat.dialog_suspend_reception_button": "プロフページへ",
            "chat.dialog_suspend_reception_button_community": "コミュニティへ",
            "chat.dialog_suspend_reception_button_setting_pc": "通知とプライバシーページへ",
            "chat.dialog_not_allow_suspend_reception_title": "受信停止不可",
            "chat.dialog_not_allow_suspend_reception_description": "このユーザは受信停止できません。",
            "chat.sorry_age_under_13": "申し訳ありません。利用条件を満たしていないため、一部の機能はご利用になれません。",
            "chat.sorry_disabled_gree_chat": "申し訳ありません。利用条件を満たしていないため、GREEチャットをご利用になれません。",
            "chat.disabled_official_title_1": "CELEBアカウントでは",
            "chat.disabled_official_title_2": "GREEチャットをご利用いただけません",
            "chat.disabled_official_notice_title": "CELEBアカウントの方へ",
            "chat.disabled_official_notice_discription_1": "閲覧できないGREEチャットのお知らせが表示される不具合が発生しております。",
            "chat.disabled_official_notice_discription_2": "ご迷惑をおかけいたしますが、改修完了まで今しばらくお待ちください。",
            "chat.disabled_official_schedule_title": "不具合修正日",
            "chat.disabled_official_schedule_discription": "2015年10月 (予定)",
            "chat.empty_collection": "チャットルームがありません。",
            "chat.manual_link": "GREEチャットの使い方とよくある質問",
            "chat.optout_title": "GREEチャットの受信設定",
            "chat.optout_message": "{official_user_name}のチャットを受け取る",
            "chat.optout_caution": "■ご注意<br>" + "上記のチェックボックスを外すと、該当ユーザーを禁止リストに追加します。<br><br>" + "禁止リストに追加すると、該当ユーザーは以下の機能が制限されます。" + "<ul>" + "<li>お客さまのプロフィールや日記の閲覧</li>" + "<li>お客さまとの１対１チャット（配信を含む）</li>" + "<li>お客さまへのリクエスト送信</li>" + "<li>お客さまへのアプリ招待</li>" + "</ul>",
            "chat.optout_setting_save_succeed": "保存されました。",
            "chat.link_blocking_list": "禁止リスト一覧へ",
            "chat.link_blocking_help": "禁止リストとは",
            "chat.link_faq": "よくある質問",
            "chat.link_chat_setting": "チャット設定",
            "chat.start_chat": "今すぐ利用する",
            "chat.edit_conversation_display_setting_button_complete": "完了",
            "chat.hide_conversation_button": "非表示",
            "chat.redisplay_conversation_button": "再表示",
            "chat.hide_conversation_help_dialog_title": "このチャットを非表示にしますか？",
            "chat.hide_conversation_help_dialog_body": "<ul>" + "<li>チャットを非表示にすると「チャットリスト」から「非表示チャット」に移動します。</li>" + "<li>チャットを非表示にしても、メッセージは削除されません。</li>" + "<li>チャットを非表示にしても、メッセージは受信します。</li>" + "</ul>",
            "chat.hide_conversation_help_dialog_prim": "非表示にする",
            "chat.disable_hide_conversation_dialog_title": "非表示にできないチャットです",
            "chat.disable_hide_conversation_dialog_body": "このユーザはGREEからの大切なお知らせを配信します。そのため、このチャットを非表示にすることはできません。",
            "chat.upgrade_message": "GREEチャットをご利用いただくには、会員情報を登録してアップグレードする必要があります",
            "chat.to_upgrade": "アップグレード",
            "chat.emoji": "絵文字",
            "chat.sending_message": "送信中...",
            "chat.stamp": "スタンプ",
            "chat.sent_stamp": "スタンプを送信しました",
            "chat.received_stamp": "スタンプが送信されました"
        };
    })(Blitz.Language || (Blitz.Language = {}));
    var Language = Blitz.Language;
})(Blitz || (Blitz = {}));
var Util;
(function (Util) {
    var Text = (function () {
        function Text(text) {
            this.text = text;
        }
        Text.prototype.nl2br = function () {
            this.text = this.text.replace(/\r?\n/g, '<br />');
            return this;
        };

        Text.prototype.escape = function () {
            this.text = String.escapeSpecialChars(this.text).replace(/&lt;\/?(\w+)(.*?)&gt;/g, function (all, match, attr) {
                if ('br' === match) {
                    return '<br>';
                }
                if ('emoji' === match) {
                    var id = attr.match(/id\s*=&quot;(\w+)&quot;/);
                    if (!id || !id.length) {
                        return '';
                    }
                    return '<emoji id="' + id.pop() + '">';
                }
                if (all === '&lt;/a&gt;') {
                    return '</a>';
                }
                if (match === 'a') {
                    var href = attr.replace(/\s/g, ' ').match(/href=&quot;(https?:\/\/.+?)&quot;/);
                    if (!href || !href.length) {
                        return '';
                    }
                    return '<a href="' + href.pop() + '">';
                }
                return all;
            });
            return this;
        };

        Text.prototype.convertEmoji = function () {
            this.text = Util.String.convertEmojiTag(this.text);
            return this;
        };

        Text.prototype.disableATag = function () {
            this.text = this.text.replace(/<\/?a.*?>/g, '').replace(/<\/?br\s*>/g, '');
            return this;
        };
        return Text;
    })();
    Util.Text = Text;

    var UA = (function () {
        function UA() {
        }
        UA.isIOS = function () {
            return /\((iPhone( Simulator)?|iPod( touch)?|iPad);/.test(navigator.userAgent);
        };

        UA.isAndroid = function (v) {
            var ua = navigator.userAgent.toLowerCase();
            if (!v) {
                return (ua.indexOf('android') > -1);
            }
            return (ua.indexOf('android ' + v) > -1);
        };

        UA.isTouch = function () {
            return !!('ontouchstart' in window) && (navigator.userAgent.indexOf('PhantomJS') < 0);
        };
        return UA;
    })();
    Util.UA = UA;

    var String = (function () {
        function String() {
        }
        String.convertSpecialChar = function (string) {
            return string.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#39;/g, "'");
        };

        String.escapeSpecialChars = function (string) {
            return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
        };

        String.convertEmojiTag = function (string) {
            return string.replace(/<emoji\sid\s*=\s*["']0*(\d+)["']>/g, function (all, $1) {
                var className = 'emoji e' + $1;
                return '<div class="' + className + '"></div>';
            });
        };
        return String;
    })();
    Util.String = String;

    Util.createConversationRefKey = function (myUserId, targetUserId) {
        if (myUserId == targetUserId) {
            return 'm_' + myUserId;
        }
        if (myUserId < targetUserId) {
            return 'o_' + targetUserId + "_" + myUserId;
        } else {
            return 'o_' + myUserId + "_" + targetUserId;
        }
    };

    Util.getFormattedDateString = function (format, d) {
        return Blitz.Language.getMessage(format, {
            yyyy: d.getFullYear(),
            m: d.getMonth() + 1,
            d: d.getDate(),
            w: Blitz.Language.getMessage('chat.day_' + d.getDay()),
            H: d.getHours(),
            MM: ("0" + d.getMinutes()).slice(-2)
        });
    };

    Util.getMaintenanceSpanString = function (from, to, now) {
        if (typeof now === "undefined") { now = new Date(); }
        var d1 = new Date(from.replace(/-/g, '/'));
        var d2 = new Date(to.replace(/-/g, '/'));
        var fromString;
        var toString;
        if (now.getFullYear() !== d1.getFullYear() || d1.getFullYear() !== d2.getFullYear()) {
            fromString = Util.getFormattedDateString('chat.dateformat_d', d1);
            toString = Util.getFormattedDateString('chat.dateformat_d', d2);
            return Blitz.Language.getMessage('chat.maintenance_format_a', {
                from: fromString,
                to: toString
            });
        } else {
            fromString = Util.getFormattedDateString('chat.dateformat_e', d1);
            toString = Util.getFormattedDateString('chat.dateformat_e', d2);
            if (d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate()) {
                toString = Util.getFormattedDateString('chat.dateformat_time_at', d2);
            }
            return Blitz.Language.getMessage('chat.maintenance_format_b', {
                from: fromString,
                to: toString
            });
        }
    };

    Util.uid = function () {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    };
})(Util || (Util = {}));
var SNS;
(function (SNS) {
    var Config = (function () {
        function Config() {
        }
        Config.init = function (config) {
            this.config = config;
        };

        Config.getDefaultUrl = function () {
            return 'chat/list';
        };

        Config.getClientTypeId = function () {
            return this.config['client_type_id'];
        };

        Config.getMyself = function () {
            return this.config['myself'];
        };

        Config.getTheme = function () {
            return this.config['theme'];
        };

        Config.getDomains = function () {
            return this.config['config']['domains'];
        };

        Config.getBeaconDomain = function () {
            return this.config['config']['domains']['beacon'];
        };

        Config.getPfBeaconDomain = function () {
            return this.config['config']['domains']['pfb'];
        };

        Config.getGreeJpDomain = function () {
            return this.config['config']['domains']['greejp'];
        };

        Config.getJaHelpDomain = function () {
            return this.config['config']['domains']['ja-help'];
        };

        Config.getIdDomain = function () {
            return this.config['config']['domains']['id'];
        };

        Config.getGreeJpPatrolFormURL = function () {
            return this.getGreeJpDomain() + '?mode=support&act=patrol_form';
        };

        Config.getSNSDomain = function () {
            return this.config['config']['domains']['sns'];
        };

        Config.getGameChatURL = function () {
            return this.config['config']['domains']['apps'] + '?action=app_chat_view#view=game_list';
        };

        Config.getGreeJpConfigPrivacyURL = function () {
            return this.getGreeJpDomain() + '?mode=home&act=config_privacy_form';
        };

        Config.getGreeJpUserProfileURL = function (userId) {
            return this.getGreeJpDomain() + userId;
        };

        Config.getGreeJpCommunityURL = function (userId) {
            return this.getGreeJpDomain() + 'community/' + userId;
        };

        Config.getDeprecatedPCBrowserImgRootURL = function () {
            return this.config['config']['url_root_img_deprecated_pc_browser'];
        };

        Config.isDeprecatedPCBrowser = function () {
            return this.config['config']['is_deprecated_pc_browser'];
        };

        Config.isNotSupportedDevice = function () {
            return this.config['config']['is_not_supported_device'];
        };

        Config.getCobitToken = function () {
            return this.config['cobit_token'];
        };

        Config.getAppId = function () {
            return this.config['config']['app']['id'];
        };

        Config.isSDK = function () {
            return this.config['config']['is_sdk'];
        };

        Config.getChatOpenLevelOfPrivacySettings = function () {
            return this.config['privacy_settings']['use_setting_mail'];
        };

        Config.getNewContactList = function () {
            return this.config['new_contact_list']['items'];
        };

        Config.getNewContactNum = function () {
            return Object.keys(this.getNewContactList()).length;
        };

        Config.getModerationConfirmUrl = function () {
            return this.getDomains()['sns'] + '#class=link&view=moderation_consent-items-message';
        };

        Config.getPenaltyHelpUrl = function () {
            return this.getDomains()['sns'] + '#view=help_penalty';
        };

        Config.getSnsUserProfileUrl = function (userId) {
            return this.getSNSDomain() + '#view=profile_info' + '&user_id=' + userId;
        };

        Config.getSnsCommunityUrl = function (communityId) {
            return this.getSNSDomain() + '#view=community_view' + '&community_id=' + communityId;
        };

        Config.getSnsBlockingListUrl = function () {
            return this.getSNSDomain() + '#view=settings_blocklist';
        };

        Config.getJaHelpBlocking = function () {
            return this.getJaHelpDomain() + 'faq.asp?faqid=3134';
        };

        Config.getTopPageHash = function () {
            return '#view=chat_list';
        };

        Config.isChatEnabled = function () {
            var chatStatus = this.config['chat_status'];
            return chatStatus['enabled'] == true;
        };

        Config.isChatDisabled = function () {
            return !this.isChatEnabled();
        };

        Config.getChatDisabledMsg = function () {
            var chatStatus = this.config['chat_status'];
            return chatStatus['disabled_msg'];
        };

        Config.isMaintenance = function () {
            return this.config['maintenance']['is_maintenance'];
        };

        Config.isChatRunning = function () {
            return !this.isMaintenance();
        };

        Config.willMaintenance = function () {
            if (this.isMaintenance()) {
                return false;
            }
            var maintenance = this.config['maintenance'];
            if (maintenance['server_status'] === 'false') {
                if (!_.isNull(maintenance['maintenance_from']) && !_.isNull(maintenance['maintenance_to'])) {
                    return true;
                }
            }
            return false;
        };

        Config.getMaintenanceSpan = function () {
            return Util.getMaintenanceSpanString(this.config['maintenance']['maintenance_from'], this.config['maintenance']['maintenance_to']);
        };

        Config.getMaintenanceStartingDate = function () {
            var from = this.config['maintenance']['maintenance_from'];
            return new Date(from.replace(/-/g, '/'));
        };

        Config.needsUpgrade = function () {
            return this.config['config']['needs_upgrade'];
        };

        Config.isEnabledEmojiPalette = function () {
            return this.config['config']['palette']['is_enabled_emoji'];
        };

        Config.isEnabledStampPalette = function () {
            return this.config['config']['palette']['is_enabled_stamp'];
        };

        Config.isApp = function () {
            return this.config['config']['is_app'];
        };

        Config.isIOS = function () {
            return this.config['config']['is_ios'];
        };

        Config.isIOSApp = function () {
            return this.isApp() && this.isIOS();
        };

        Config.isAndroid = function () {
            return this.config['config']['is_android'];
        };

        Config.isPC = function () {
            return this.config['config']['is_pc'];
        };

        Config.isSP = function () {
            return this.config['config']['is_sp'];
        };

        Config.isIEUnder11 = function () {
            return this.config['config']['is_ie_under11'];
        };

        Config.isAgeUnder13 = function () {
            return this.config['config']['is_age_under13'];
        };

        Config.isAge13OrOlder = function () {
            return !this.isAgeUnder13();
        };

        Config.getWebworkerHelperUri = function () {
            return this.config['config']['uri_webworker_helper'];
        };

        Config.getDeviceIsAndroid2x = function () {
            return this.config['config']['is_android_2'];
        };

        Config.emojiPalette = function () {
            return false;
        };

        Config.getAppsDomain = function () {
            return this.config['config']['domains']['apps'];
        };

        Config.getAdDomain = function () {
            return this.config['config']['domains']['ad'];
        };

        Config.getAdsDomain = function () {
            return this.config['config']['domains']['ads'];
        };

        Config.isAdsAppendHost = function () {
            return this.config['config']['ad']['appendHost'];
        };

        Config.getAnnounces = function () {
            return this.config['announce_list'];
        };
        return Config;
    })();
    SNS.Config = Config;
})(SNS || (SNS = {}));
var Blitz;
(function (Blitz) {
    var FlagId = (function (_super) {
        __extends(FlagId, _super);
        function FlagId(service, name) {
            _super.call(this, service + ':' + name);
        }
        return FlagId;
    })(DDD.Identity);
    Blitz.FlagId = FlagId;

    var Flag = (function (_super) {
        __extends(Flag, _super);
        function Flag(service, name, ctime) {
            _super.call(this, new FlagId(service, name));
            this.service = service;
            this.name = name;
            this.ctime = ctime;
        }
        return Flag;
    })(DDD.Entity);
    Blitz.Flag = Flag;

    var FlagReleaseStampPalette = (function (_super) {
        __extends(FlagReleaseStampPalette, _super);
        function FlagReleaseStampPalette() {
            _super.call(this, 'chat', 'release_stamp_palette');
        }
        return FlagReleaseStampPalette;
    })(Flag);
    Blitz.FlagReleaseStampPalette = FlagReleaseStampPalette;

    var FlagOpenPalette = (function (_super) {
        __extends(FlagOpenPalette, _super);
        function FlagOpenPalette() {
            _super.call(this, 'chat', 'open_stamp_palette');
        }
        return FlagOpenPalette;
    })(Flag);
    Blitz.FlagOpenPalette = FlagOpenPalette;
})(Blitz || (Blitz = {}));
var SnsApi;
(function (SnsApi) {
    var Client = (function () {
        function Client() {
        }
        Client.prototype.request = function (request, renderer) {
            if (typeof renderer === "undefined") { renderer = ['proton']; }
            var apiName = request.getApiName();
            var params = request.getParams();
            var defer = new Deferred();
            var cacheResult = request.get();
            if (typeof cacheResult != 'undefined') {
                setTimeout(function () {
                    defer.call(cacheResult);
                });
            } else {
                gluon.request({
                    method: apiName,
                    params: params,
                    renderer: renderer
                }).send(function (result) {
                    request.set(result.result);
                    defer.call(result.result);
                }, function (xhr, status, error) {
                    if (xhr.status == 0) {
                        defer.fail(new NetworkError());
                    } else {
                        defer.fail(SNSAPIError.createFromXHR(xhr));
                    }
                });
            }
            return defer;
        };
        return Client;
    })();
    SnsApi.Client = Client;

    var FriendClient = (function (_super) {
        __extends(FriendClient, _super);
        function FriendClient() {
            _super.apply(this, arguments);
        }
        FriendClient.prototype.sendLinkRequest = function (userId) {
            var apiName = 'Friend.Request.send';
            var request = new Service.Request(apiName, { 'user_id': userId }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };

        FriendClient.prototype.confirmLinkRequest = function (userId) {
            var apiName = 'Friend.Request.confirm';
            var request = new Service.Request(apiName, { 'user_id': userId }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };

        FriendClient.prototype.block = function (userId) {
            var apiName = 'Friend.block';
            var request = new Service.Request(apiName, { 'user_id': userId }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };

        FriendClient.prototype.unblock = function (userId) {
            var apiName = 'Friend.unblock';
            var request = new Service.Request(apiName, { 'user_id': userId }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };
        return FriendClient;
    })(Client);
    SnsApi.FriendClient = FriendClient;

    var UserClient = (function (_super) {
        __extends(UserClient, _super);
        function UserClient() {
            _super.apply(this, arguments);
        }
        UserClient.prototype.getChatFriendList = function (range) {
            var apiName = 'Chat.Friend.getList';
            var request = new Service.Request(apiName, { 'offset': range.offset, 'limit': range.limit }, 5 * 60 * 1000);
            return this.request(request);
        };

        UserClient.prototype.getBlockUserList = function (range) {
            var apiName = 'Chat.BlockedUser.getList';
            var offset = range.offset;
            var limit = range.limit;
            var request = new Service.Request(apiName, { 'offset': offset, 'limit': limit }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };

        UserClient.prototype.getUserInfo = function (userIds) {
            var apiName = 'Chat.User.Profile.getList';
            var request = new Service.Request(apiName, { 'user_ids': userIds }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };

        UserClient.prototype.getNotificationSetting = function () {
            var apiName = 'Chat.User.NotificationSetting.get';
            var request = new Service.Request(apiName, {}, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };

        UserClient.prototype.updateNotificationSetting = function (push, mail, mailIntervalMinutes) {
            var apiName = 'Chat.User.NotificationSetting.update';
            var request = new Service.Request(apiName, { 'push': push, 'mail': mail, 'mail_interval_minutes': mailIntervalMinutes }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };
        return UserClient;
    })(Client);
    SnsApi.UserClient = UserClient;

    var OptoutSettingClient = (function (_super) {
        __extends(OptoutSettingClient, _super);
        function OptoutSettingClient() {
            _super.apply(this, arguments);
        }
        OptoutSettingClient.prototype.get = function (userId) {
            var apiName = 'Delight.Sender.getOptoutSetting';
            var request = new Service.Request(apiName, { 'official_user_id': userId }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };
        return OptoutSettingClient;
    })(Client);
    SnsApi.OptoutSettingClient = OptoutSettingClient;

    var PermissionClient = (function (_super) {
        __extends(PermissionClient, _super);
        function PermissionClient() {
            _super.apply(this, arguments);
        }
        PermissionClient.prototype.getSendMessagePermission = function (userId) {
            var apiName = 'Chat.Permission.getSendMessagePermission';
            var request = new Service.Request(apiName, { 'user_id': userId }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };
        return PermissionClient;
    })(Client);
    SnsApi.PermissionClient = PermissionClient;

    var FlagClient = (function (_super) {
        __extends(FlagClient, _super);
        function FlagClient() {
            _super.apply(this, arguments);
        }
        FlagClient.prototype.up = function (flag) {
            var apiName = 'Flag.up';
            var request = new Service.Request(apiName, {
                service: flag.service,
                flag_name: flag.name
            }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };
        return FlagClient;
    })(Client);
    SnsApi.FlagClient = FlagClient;

    var BadgeClient = (function (_super) {
        __extends(BadgeClient, _super);
        function BadgeClient() {
            _super.apply(this, arguments);
        }
        BadgeClient.prototype.getBadges = function () {
            var apiName = 'Chat.Badge.getBadges';
            var request = new Service.Request(apiName, {}, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };

        BadgeClient.prototype.updateBadge = function () {
            var apiName = 'Chat.Badge.update';
            var request = new Service.Request(apiName, {}, Service.CACHE_TYPE_NO_CACHE);

            return this.request(request);
        };
        return BadgeClient;
    })(Client);
    SnsApi.BadgeClient = BadgeClient;

    var DeliveryClient = (function (_super) {
        __extends(DeliveryClient, _super);
        function DeliveryClient() {
            _super.apply(this, arguments);
        }
        DeliveryClient.prototype.getList = function () {
            var apiName = 'Delight.Delivery.getList';
            var request = new Service.Request(apiName, {}, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request, ['none']);
        };

        DeliveryClient.prototype.get = function (deliveryId) {
            var apiName = 'Delight.Delivery.get';
            var request = new Service.Request(apiName, {
                delivery_id: deliveryId
            }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request, ['none']);
        };
        return DeliveryClient;
    })(Client);
    SnsApi.DeliveryClient = DeliveryClient;

    var DeliveryMessageClient = (function (_super) {
        __extends(DeliveryMessageClient, _super);
        function DeliveryMessageClient() {
            _super.apply(this, arguments);
        }
        DeliveryMessageClient.prototype.getHistory = function (deliveryId, range) {
            var apiName = 'Delight.Message.getHistory';
            var request = new Service.Request(apiName, {
                delivery_id: deliveryId,
                limit: range.limit,
                offset_message_id: range.offset
            }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request, ['none']);
        };

        DeliveryMessageClient.prototype.readPast = function (deliveryId, fromMessageId) {
            var apiName = 'Delight.Message.readPast';
            var request = new Service.Request(apiName, {
                delivery_id: deliveryId,
                from_message_id: fromMessageId
            }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };
        return DeliveryMessageClient;
    })(Client);
    SnsApi.DeliveryMessageClient = DeliveryMessageClient;

    var DeliveryNotificationClient = (function (_super) {
        __extends(DeliveryNotificationClient, _super);
        function DeliveryNotificationClient() {
            _super.apply(this, arguments);
        }
        DeliveryNotificationClient.prototype.get = function (deliveryId) {
            var apiName = 'Delight.Notification.get';
            var request = new Service.Request(apiName, {
                delivery_id: deliveryId
            }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request, ['none']);
        };

        DeliveryNotificationClient.prototype.update = function (deliveryId, notifies) {
            var apiName = 'Delight.Notification.update';
            var request = new Service.Request(apiName, {
                delivery_id: deliveryId,
                notifies: notifies
            }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };
        return DeliveryNotificationClient;
    })(Client);
    SnsApi.DeliveryNotificationClient = DeliveryNotificationClient;

    var DeliveryDisplaySettingClient = (function (_super) {
        __extends(DeliveryDisplaySettingClient, _super);
        function DeliveryDisplaySettingClient() {
            _super.apply(this, arguments);
        }
        DeliveryDisplaySettingClient.prototype.update = function (deliveryId, isDisplayed) {
            var apiName = 'Delight.DeliverySetting.update';
            var request = new Service.Request(apiName, {
                delivery_id: deliveryId,
                is_displayed: isDisplayed
            }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };
        return DeliveryDisplaySettingClient;
    })(Client);
    SnsApi.DeliveryDisplaySettingClient = DeliveryDisplaySettingClient;

    var ThemeClient = (function (_super) {
        __extends(ThemeClient, _super);
        function ThemeClient() {
            _super.apply(this, arguments);
        }
        ThemeClient.prototype.updateSetting = function (themeId, isUsed) {
            var apiName = 'Chat.Theme.updateSetting';
            var request = new Service.Request(apiName, {
                'theme_id': themeId,
                'is_used': isUsed
            }, Service.CACHE_TYPE_NO_CACHE);
            return this.request(request);
        };
        return ThemeClient;
    })(Client);
    SnsApi.ThemeClient = ThemeClient;

    var SNSAPIError = (function () {
        function SNSAPIError(response) {
            this.name = 'SNSAPI ERROR';
            this.code = response['error']['code'];
            this.message = response['error']['message'];
        }
        SNSAPIError.createFromXHR = function (xhr) {
            var error;
            var errorObj = JSON.parse(xhr.responseText);
            switch (errorObj['error']['code']) {
                case CSRFTokenExpireError.errorCode:
                    error = new CSRFTokenExpireError(errorObj);
                    break;
                case ResourceNotFoundError.errorCode:
                    error = new ResourceNotFoundError(errorObj);
                    break;
                case InvalidParameterError.errorCode:
                    error = new InvalidParameterError(errorObj);
                    break;
                default:
                    error = new SNSAPIError(errorObj);
            }
            return error;
        };
        return SNSAPIError;
    })();
    SnsApi.SNSAPIError = SNSAPIError;

    var CSRFTokenExpireError = (function (_super) {
        __extends(CSRFTokenExpireError, _super);
        function CSRFTokenExpireError() {
            _super.apply(this, arguments);
        }
        CSRFTokenExpireError.errorCode = -32015;
        return CSRFTokenExpireError;
    })(SNSAPIError);
    SnsApi.CSRFTokenExpireError = CSRFTokenExpireError;

    var ResourceNotFoundError = (function (_super) {
        __extends(ResourceNotFoundError, _super);
        function ResourceNotFoundError() {
            _super.apply(this, arguments);
        }
        ResourceNotFoundError.errorCode = -32001;
        return ResourceNotFoundError;
    })(SNSAPIError);
    SnsApi.ResourceNotFoundError = ResourceNotFoundError;

    var InvalidParameterError = (function (_super) {
        __extends(InvalidParameterError, _super);
        function InvalidParameterError() {
            _super.apply(this, arguments);
        }
        InvalidParameterError.errorCode = -32005;
        return InvalidParameterError;
    })(SNSAPIError);
    SnsApi.InvalidParameterError = InvalidParameterError;

    var NetworkError = (function () {
        function NetworkError() {
            this.name = 'Network Error';
            this.message = '';
        }
        return NetworkError;
    })();
    SnsApi.NetworkError = NetworkError;
})(SnsApi || (SnsApi = {}));
var Proton;
(function (Proton) {
    var SHARED_HISTORY_KEY = 'shared_history';

    Proton.getSharedPreviousViewName = function () {
        var viewName = sessionStorage.getItem(SHARED_HISTORY_KEY);
        sessionStorage.removeItem(SHARED_HISTORY_KEY);
        return viewName;
    };

    Proton.setSharedPreviousViewName = function (viewName) {
        sessionStorage.setItem(SHARED_HISTORY_KEY, viewName);
    };
})(Proton || (Proton = {}));
var SNS;
(function (SNS) {
    (function (Analytics) {
        Analytics.appId = null;
        Analytics.locale = '';

        var BEACON_ACTION_SPLITTER = '_';

        function sendBeacon(action, args) {
            var p = _.clone(args);
            var pr = p['pr'];
            if (SNS.Config.isPC()) {
                pr['is_pc'] = 1;
            }
            if (pr != null) {
                p = _.defaults(p, pr);
            }
            p = _.omit(p, 'tm', 'pr');
            analytics.AnalyticsBeacon.create({ a: action }).addServiceParams(p).flush();
        }

        function sendEventBeacon(args) {
            var fr = args['fr'] || 'unknown';
            var a = [fr, args['nm']].join(BEACON_ACTION_SPLITTER);
            sendBeacon(a, args);
        }

        function sendPageBeacon(args, externalURL) {
            var a = args['nm'];
            if (externalURL) {
                sendBeacon(a, _.chain(args).extend({ 'url': externalURL }).omit('pr').value());
            } else {
                sendBeacon(a, args);
            }
        }

        function event(name, from, params) {
            if (typeof from === "undefined") { from = ''; }
            if (typeof params === "undefined") { params = {}; }
            if (from == '') {
                event(name, fivefold.history.current().pattern, params);
                return;
            }

            if (from === 'contact_list') {
                from = 'chat_contact_list';
            }

            var prev = getMergedPreviousViewName();
            if (prev) {
                params['ex_from'] = prev;
            }

            var args = {
                tp: 'evt',
                nm: name,
                fr: from,
                ap: SNS.Config.getAppId(),
                pr: params
            };

            sendEventBeacon(args);
        }
        Analytics.event = event;

        function page(to, from, params, externalURL) {
            if (typeof from === "undefined") { from = ''; }
            if (typeof params === "undefined") { params = {}; }
            if (typeof externalURL === "undefined") { externalURL = null; }
            var args = {
                tp: 'pg',
                nm: to,
                fr: from,
                ap: SNS.Config.getAppId(),
                pr: params
            };

            sendPageBeacon(args, externalURL);
        }
        Analytics.page = page;

        function getMergedPreviousViewName() {
            var prev;
            if (prev != null) {
                return prev.pattern;
            } else {
                return Proton.getSharedPreviousViewName();
            }
        }
        Analytics.getMergedPreviousViewName = getMergedPreviousViewName;

        var ignores = [
            'contact_list'
        ];
        function autoSendPageBeacon(to, params, externalURL) {
            if (typeof params === "undefined") { params = {}; }
            if (typeof externalURL === "undefined") { externalURL = null; }
            if ($.inArray(to, ignores) >= 0) {
                return;
            }
            sendPageBeaconAndUpdatePreviousView(to, params, externalURL);
        }
        Analytics.autoSendPageBeacon = autoSendPageBeacon;

        function sendPageBeaconAndUpdatePreviousView(to, params, externalURL) {
            if (typeof params === "undefined") { params = {}; }
            if (typeof externalURL === "undefined") { externalURL = null; }
            page(to, Analytics.getMergedPreviousViewName(), params, externalURL);
            Proton.setSharedPreviousViewName(to);
        }
        Analytics.sendPageBeaconAndUpdatePreviousView = sendPageBeaconAndUpdatePreviousView;
    })(SNS.Analytics || (SNS.Analytics = {}));
    var Analytics = SNS.Analytics;
})(SNS || (SNS = {}));
var Blitz;
(function (Blitz) {
    var IllegalArgumentError = (function () {
        function IllegalArgumentError(message) {
            this.name = 'IllegalArgumentError';
            this.message = message;
        }
        return IllegalArgumentError;
    })();
    Blitz.IllegalArgumentError = IllegalArgumentError;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var BlitzRouteResolver = (function () {
        function BlitzRouteResolver(myself) {
            this.myself = myself;
        }
        BlitzRouteResolver.prototype.resolve = function (relativeURL, routes) {
            var hash = relativeURL.slice(1);
            var components = hash.split('&').concat(location.search.slice(1).split('&'));
            var pattern = '';
            var options = {};
            for (var i = 0, l = components.length; i < l; i++) {
                var keyAndValue = components[i].split('=');
                var key = keyAndValue[0], value = keyAndValue[1];
                if (key === 'view' && _.isEmpty(pattern)) {
                    pattern = value;
                } else if (key != 'view' && _.isUndefined(options[key])) {
                    options[key] = value;
                }
            }

            if (SNS.Config.needsUpgrade()) {
                return this.routeFuture(routes, 'chat_upgrade', {
                    targetGrade: 2,
                    callbackUrl: encodeURIComponent(location.href)
                });
            }

            if (this.myself.isOfficialUser) {
                return this.routeFuture(routes, 'chat_disabled_official', options);
            }

            if (!this.myself.permission.isChatReadable()) {
                return this.routeFuture(routes, 'chat_disabled', options);
            }

            return this.routeFuture(routes, pattern, options);
        };

        BlitzRouteResolver.prototype.routeFuture = function (routes, pattern, options) {
            return monapt.future(function (promise) {
                routes.get(pattern).match({
                    Some: function (route) {
                        return promise.success({ route: route, options: options });
                    },
                    None: function () {
                        return promise.failure(new Error('Not found'));
                    }
                });
            });
        };
        return BlitzRouteResolver;
    })();
    Blitz.BlitzRouteResolver = BlitzRouteResolver;

    Blitz.routes = function (match) {
        match('chat_list', 'Blitz.Chat::chatList');
        match('chat_hidden_list', 'Blitz.Chat::chatHiddenList');
        match('chat_view', 'Blitz.Chat::chatView');
        match('chat_delivery_view', 'Blitz.Chat::chatDeliveryView');
        match('contact_list', 'Blitz.Chat::contactList');
        match('chat_prepare', 'Blitz.Chat::chatPrepare');
        match('chat_intro', 'Blitz.Chat::chatIntro');
        match('chat_group_settings', 'Blitz.Chat::chatGroupSettings');
        match('chat_nosupport', 'Blitz.Chat::chatNoSupport');
        match('chat_setting', 'Blitz.Chat::chatSetting');
        match('delivery_optout', 'Blitz.Chat::deliveryOptout');
        match('chat_disabled', 'Blitz.Chat::chatDisabled');
        match('chat_disabled_official', 'Blitz.Chat::chatDisabledOfficial');
        match('chat_upgrade', 'Blitz.Chat::chatUpgrade');
        match('theme_setting', 'Blitz.Chat::themeSetting');
    };

    Blitz.errorRoutes = function (match) {
        match(fivefold.RouteError.NotFound, 'Blitz.Error::notFoundRoute');
        match('Blitz.NotFoundRoute', 'Blitz.Error::notFoundRoute');
        match('Blitz.NotFound', 'Blitz.Error::notFound');
        match('Blitz.Timeout', 'Blitz.Error::timeout');
        match('Blitz.InternalError', 'Blitz.Error::internalError');
        match('Blitz.InvalidParameter', 'Blitz.Error::invalidParameter');
        match('Blitz.DisabledAgeUnder13', 'Blitz.Error::disabledAgeUnder13');
    };
})(Blitz || (Blitz = {}));

var silent = false;

var debug = function (msg) {
    if (!silent) {
        console.log(msg);
    }
};

var debugAsError = function (msg) {
    if (!silent) {
        console.error(msg);
    }
};

var Parameter;
(function (Parameter) {
    var MakeHash = (function () {
        function MakeHash(hash) {
            this.path = '';
            this.param = {};
            this.parse(hash);
        }
        MakeHash.prototype.get = function (name) {
            return this.param[name];
        };
        MakeHash.prototype.getPath = function () {
            return this.path;
        };
        MakeHash.prototype.getAll = function () {
            return this.param;
        };
        MakeHash.prototype.parse = function (hash) {
            var split = hash.split('?');
            this.path = split.shift() || '';
            if (!split.length) {
                return;
            }
            var param = {};
            split.join('?').split('&').forEach(function (pair) {
                var k_v = pair.split('=');
                param[decodeURIComponent(k_v.shift())] = decodeURIComponent(k_v.join('='));
            });
            this.param = param;
        };
        return MakeHash;
    })();
    Parameter.MakeHash = MakeHash;
    var MakeApp = (function () {
        function MakeApp(settings, param, overwrite) {
            this.path = '';
            this.param = {};
            this.param = this.extend(settings, param.getAll(), overwrite);
            this.path = param.getPath();
        }
        MakeApp.prototype.get = function (name) {
            return this.param[name];
        };
        MakeApp.prototype.getPath = function () {
            return this.path;
        };
        MakeApp.prototype.getAll = function () {
            return this.param;
        };
        MakeApp.prototype.extend = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            var result = {};
            for (var i = 0, l = args.length; i < l; i++) {
                var arg = args[i];
                var keys = Object.keys(arg);
                for (var j = 0, k = keys.length; j < k; j++) {
                    var key = keys[j];
                    result[key] = arg[key];
                }
            }
            return result;
        };
        return MakeApp;
    })();
    Parameter.MakeApp = MakeApp;
})(Parameter || (Parameter = {}));
var SNS;
(function (SNS) {
    var HBSTemplate = (function () {
        function HBSTemplate(name) {
            this.name = name;
            this.template = null;
            this.template = HBS['tpl/' + name];
        }
        HBSTemplate.prototype.render = function (param) {
            return this.template(param);
        };
        return HBSTemplate;
    })();
    SNS.HBSTemplate = HBSTemplate;
})(SNS || (SNS = {}));
var Blitz;
(function (Blitz) {
    var DeliveryDisplaySettingService = (function () {
        function DeliveryDisplaySettingService(client) {
            if (typeof client === "undefined") { client = new SnsApi.DeliveryDisplaySettingClient(); }
            this.client = client;
            this.deliveryRepository = Blitz.DeliveryRepository.ofApi();
        }
        DeliveryDisplaySettingService.prototype.hide = function (deliveryId) {
            return this.update(deliveryId, false);
        };

        DeliveryDisplaySettingService.prototype.display = function (deliveryId) {
            return this.update(deliveryId, true);
        };

        DeliveryDisplaySettingService.prototype.update = function (deliveryId, nextDisplayStatus) {
            var _this = this;
            var promise = new monapt.Promise();
            this.client.update(deliveryId.getValue(), nextDisplayStatus).next(function (result) {
                if (result) {
                    promise.success(result);
                    _this.updateInCache(deliveryId, nextDisplayStatus);
                } else {
                    promise.failure(new Error(Blitz.Language.getMessage('chat.error_failed')));
                }
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        DeliveryDisplaySettingService.prototype.updateInCache = function (deliveryId, nextDisplayStatus) {
            var _this = this;
            var cachedOpt = this.deliveryRepository.getCache(deliveryId);
            cachedOpt.foreach(function (delivery) {
                var updated = delivery.setDisplay(nextDisplayStatus);
                _this.deliveryRepository.setCache(updated);
            });
        };
        return DeliveryDisplaySettingService;
    })();
    Blitz.DeliveryDisplaySettingService = DeliveryDisplaySettingService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliverySetting = (function () {
        function DeliverySetting(isDisplayed, isNotified) {
            this.isDisplayed = isDisplayed;
            this.isNotified = isNotified;
            this.displaySettingService = new Blitz.DeliveryDisplaySettingService();
        }
        DeliverySetting.prototype.hide = function (deliveryId) {
            return this.displaySettingService.hide(deliveryId);
        };

        DeliverySetting.prototype.display = function (deliveryId) {
            return this.displaySettingService.display(deliveryId);
        };
        return DeliverySetting;
    })();
    Blitz.DeliverySetting = DeliverySetting;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DelightUser = (function (_super) {
        __extends(DelightUser, _super);
        function DelightUser(identity, name, profileImageUrl) {
            _super.call(this, identity, name, null, profileImageUrl, null);
            this.name = name;
            this.profileImageUrl = profileImageUrl;
        }
        DelightUser.prototype.getDelightUserIdValue = function () {
            return this.getIdentity().getValue().toString();
        };
        return DelightUser;
    })(Blitz.User);
    Blitz.DelightUser = DelightUser;

    var CommunityOwner = (function (_super) {
        __extends(CommunityOwner, _super);
        function CommunityOwner(identity, name, profileImageUrl) {
            _super.call(this, identity, name, profileImageUrl);
            this.name = name;
            this.profileImageUrl = profileImageUrl;
        }
        CommunityOwner.prototype.getProfileUrl = function () {
            if (SNS.Config.isPC()) {
                return SNS.Config.getGreeJpCommunityURL(this.getUserId());
            } else {
                return SNS.Config.getSnsCommunityUrl(this.getUserId());
            }
        };
        return CommunityOwner;
    })(DelightUser);
    Blitz.CommunityOwner = CommunityOwner;

    var DelightUserFactory = (function () {
        function DelightUserFactory() {
        }
        DelightUserFactory.create = function (obj, type) {
            if (type === 'community') {
                return new CommunityOwner(Blitz.SnsUserId.createFromString(obj.identity), obj.name, obj.profile_image_url);
            } else {
                return new DelightUser(Blitz.SnsUserId.createFromString(obj.identity), obj.name, obj.profile_image_url);
            }
        };
        return DelightUserFactory;
    })();
    Blitz.DelightUserFactory = DelightUserFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var Delivery = (function (_super) {
        __extends(Delivery, _super);
        function Delivery(conversationId, type, publisher, mustRead, unreadCount, headline, setting, updateTime) {
            _super.call(this, conversationId);
            this.type = type;
            this.publisher = publisher;
            this.mustRead = mustRead;
            this.unreadCount = unreadCount;
            this.headline = headline;
            this.setting = setting;
            this.updateTime = updateTime;
        }
        Delivery.prototype.getName = function () {
            return this.publisher.name;
        };

        Delivery.prototype.readAllMessage = function () {
            var cloned = _.clone(this);
            cloned.unreadCount = 0;
            return cloned;
        };

        Delivery.prototype.setDisplay = function (displays) {
            this.setting.isDisplayed = displays;
            return this;
        };

        Delivery.prototype.getParticipants = function () {
            return [this.publisher];
        };

        Delivery.prototype.getUpdateTime = function () {
            return this.updateTime.getMTime();
        };

        Delivery.prototype.isConversation = function () {
            return false;
        };

        Delivery.prototype.isDelivery = function () {
            return true;
        };

        Delivery.prototype.isCommunity = function () {
            return this.getConversationType() === 7 /* Community */;
        };

        Delivery.prototype.getConversationType = function () {
            switch (this.type) {
                case "official":
                    return 5 /* Official */;
                    break;
                case "application":
                    return 4 /* Game */;
                    break;
                case "staff":
                    return 6 /* Staff */;
                    break;
                case "community":
                    return 7 /* Community */;
                    break;
                case "special":
                    return 8 /* Special */;
                    break;
                default:
                    debug('Invalid conversation type: ' + this.type);
                    break;
            }
        };

        Delivery.prototype.getType = function () {
            return this.type;
        };

        Delivery.prototype.isDisplayed = function () {
            return this.setting.isDisplayed;
        };

        Delivery.prototype.isNotified = function () {
            return this.setting.isNotified;
        };

        Delivery.prototype.isHidden = function () {
            return !this.isDisplayed();
        };

        Delivery.prototype.hide = function () {
            return this.setting.hide(this.getIdentity());
        };

        Delivery.prototype.display = function () {
            return this.setting.display(this.getIdentity());
        };

        Delivery.prototype.isMustRead = function () {
            return this.mustRead;
        };
        return Delivery;
    })(DDD.Entity);
    Blitz.Delivery = Delivery;

    var DeliveryIdentity = (function (_super) {
        __extends(DeliveryIdentity, _super);
        function DeliveryIdentity(identity) {
            if (_.isUndefined(identity)) {
                throw Error('identity is undefined');
            }
            _super.call(this, identity);
        }
        return DeliveryIdentity;
    })(DDD.Identity);
    Blitz.DeliveryIdentity = DeliveryIdentity;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryFactory = (function () {
        function DeliveryFactory() {
        }
        DeliveryFactory.createList = function (params) {
            var _this = this;
            return params.map(function (p) {
                return _this.create(p);
            });
        };

        DeliveryFactory.create = function (params) {
            var conversationId = new Blitz.DeliveryIdentity(params.identity);
            var publisher = Blitz.DelightUserFactory.create(params.publisher, params.type);
            var setting = new Blitz.DeliverySetting(params.personal_setting.is_displayed, params.personal_setting.is_notified);
            var meta = new Blitz.Meta(new Date(params.mtime).getTime(), new Date(params.mtime).getTime(), params.mtime, params.mtime);

            return new Blitz.Delivery(conversationId, params.type, publisher, params.must_read, params.unread_count, params.headline, setting, meta);
        };

        DeliveryFactory.asPrimitive = function (delivery) {
            return ({
                identity: delivery.getIdentity().getValue(),
                type: delivery.getType(),
                must_read: delivery.mustRead,
                publisher: {
                    identity: delivery.publisher.getUserId().toString(),
                    name: delivery.publisher.name,
                    profile_image_url: delivery.publisher.profileImageUrl
                },
                personal_setting: {
                    is_displayed: delivery.isDisplayed(),
                    is_notified: delivery.isNotified()
                },
                headline: delivery.headline,
                unread_count: delivery.unreadCount,
                mtime: delivery.updateTime.getMtimeAsRawFormat()
            });
        };
        return DeliveryFactory;
    })();
    Blitz.DeliveryFactory = DeliveryFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DELIVERY_CACHE_EXPIRE_TIME_MILLS = 3600000;

    var DeliveryRepository = (function () {
        function DeliveryRepository(client) {
            this.client = client;
            this.myId = SNS.Config.getMyself()['user_id'];
        }
        DeliveryRepository.ofApi = function () {
            return new this(new SnsApi.DeliveryClient());
        };

        DeliveryRepository.prototype.getDeliveryIdsCacheKey = function () {
            return 'DeliveryIds_' + this.myId;
        };

        DeliveryRepository.prototype.getDeliveryCacheKey = function (deliveryId) {
            return 'Delivery_' + deliveryId;
        };

        DeliveryRepository.prototype.storeListFromConfig = function (deliveriesConfig) {
            this.setCacheList(deliveriesConfig['deliveries']);
        };

        DeliveryRepository.prototype.getList = function () {
            var _this = this;
            return this.getListIdsFromCache().flatMap(function (optDeliveryIds) {
                if (optDeliveryIds.isEmpty) {
                    return _this.getListFromAPI();
                } else {
                    var deliveryIds = optDeliveryIds.get();
                    return _.foldl(deliveryIds, function (left, deliveryId) {
                        return left.flatMap(function (deliveries) {
                            var id = new Blitz.DeliveryIdentity(deliveryId);
                            return _this.get(id).map(function (d, promise) {
                                promise.success(deliveries.concat(d));
                            });
                        });
                    }, monapt.Future.succeed([]));
                }
            });
        };

        DeliveryRepository.prototype.getListIdsFromCache = function () {
            var promise = new monapt.Promise();
            var deliveryIds = AsyncStorage.Local.getJson(this.getDeliveryIdsCacheKey());
            if (_.isUndefined(deliveryIds)) {
                promise.success(new monapt.None());
            } else {
                promise.success(new monapt.Some(deliveryIds));
            }
            return promise.future();
        };

        DeliveryRepository.prototype.getListFromAPI = function () {
            var _this = this;
            var promise = new monapt.Promise();
            this.client.getList().next(function (response) {
                var deliveriesAsObject = response['deliveries'];
                var deliveries = Blitz.DeliveryFactory.createList(deliveriesAsObject);
                promise.success(deliveries);
                _this.setCacheList(deliveriesAsObject);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        DeliveryRepository.prototype.get = function (deliveryId) {
            var _this = this;
            var promise = new monapt.Promise();
            var optCached = this.getCache(deliveryId);
            if (optCached.isEmpty) {
                this.client.get(deliveryId.getValue()).next(function (response) {
                    var deliveryObject = response['delivery'];
                    var delivery = Blitz.DeliveryFactory.create(deliveryObject);
                    promise.success(delivery);
                    _this._setCache(deliveryObject);
                }).error(function (error) {
                    return promise.failure(error);
                });
            } else {
                promise.success(optCached.get());
            }
            return promise.future();
        };

        DeliveryRepository.prototype.setCacheList = function (deliveries) {
            var _this = this;
            var ids = _.map(deliveries, function (delivery) {
                return delivery.identity;
            });
            this.setIdsCache(ids);
            deliveries.map(function (delivery) {
                return _this._setCache(delivery);
            });
        };

        DeliveryRepository.prototype.setIdsCache = function (deliveryIds) {
            AsyncStorage.Local.setItem(this.getDeliveryIdsCacheKey(), JSON.stringify({
                'timestamp': new Date().getTime(),
                'expires': DELIVERY_CACHE_EXPIRE_TIME_MILLS,
                'data': deliveryIds
            })).error(function (error) {
                return debug(error.message);
            });
        };

        DeliveryRepository.prototype.clearIdsCache = function () {
            AsyncStorage.Local.removeItem(this.getDeliveryIdsCacheKey());
        };

        DeliveryRepository.prototype.setCache = function (delivery) {
            AsyncStorage.Local.setItem(this.getDeliveryCacheKey(delivery.getIdentity().getValue()), JSON.stringify({
                'timestamp': new Date().getTime(),
                'expires': DELIVERY_CACHE_EXPIRE_TIME_MILLS,
                'data': Blitz.DeliveryFactory.asPrimitive(delivery)
            })).error(function (error) {
                return debug(error.message);
            });
        };

        DeliveryRepository.prototype._setCache = function (delivery) {
            AsyncStorage.Local.setItem(this.getDeliveryCacheKey(delivery.identity), JSON.stringify({
                'timestamp': new Date().getTime(),
                'expires': DELIVERY_CACHE_EXPIRE_TIME_MILLS,
                'data': delivery
            })).error(function (error) {
                return debug(error.message);
            });
        };

        DeliveryRepository.prototype.getCache = function (conversationId) {
            var data = AsyncStorage.Local.getJson(this.getDeliveryCacheKey(conversationId.getValue()));
            if (_.isUndefined(data)) {
                return new monapt.None();
            }
            return new monapt.Some(Blitz.DeliveryFactory.create(data));
        };
        return DeliveryRepository;
    })();
    Blitz.DeliveryRepository = DeliveryRepository;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var OnMemoryFlagRepository = (function (_super) {
        __extends(OnMemoryFlagRepository, _super);
        function OnMemoryFlagRepository() {
            _super.apply(this, arguments);
        }
        OnMemoryFlagRepository.prototype.saveConfigFlags = function (flags) {
            var _this = this;
            $.each(flags, function (service, arr) {
                $.each(arr, function (k, name) {
                    _this.store(new Blitz.Flag(service, name));
                });
            });
        };
        return OnMemoryFlagRepository;
    })(DDD.OnMemoryRepository);
    Blitz.OnMemoryFlagRepository = OnMemoryFlagRepository;

    Blitz.FlagRepository = new OnMemoryFlagRepository();
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var FlagService = (function () {
        function FlagService(client) {
            this.client = client;
        }
        FlagService.ofSnsApi = function () {
            return new this(new SnsApi.FlagClient());
        };

        FlagService.prototype.isUp = function (flag) {
            return !Blitz.FlagRepository.resolveOption(flag.getIdentity()).isEmpty;
        };

        FlagService.prototype.isDown = function (flag) {
            return !this.isUp(flag);
        };

        FlagService.prototype.up = function (flag) {
            var defer = new Deferred();
            this.client.up(flag).next(function (result) {
                flag.ctime = new Date().getTime();
                Blitz.FlagRepository.store(flag);
                defer.call(result);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };
        return FlagService;
    })();
    Blitz.FlagService = FlagService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (BadgeType) {
        BadgeType[BadgeType["GREE_CHAT"] = 0] = "GREE_CHAT";
        BadgeType[BadgeType["GAME_CHAT"] = 1] = "GAME_CHAT";
        BadgeType[BadgeType["ALL"] = 2] = "ALL";
    })(Blitz.BadgeType || (Blitz.BadgeType = {}));
    var BadgeType = Blitz.BadgeType;

    var Badge = (function () {
        function Badge(type, unread) {
            this.type = type;
            this.unread = unread;
        }
        return Badge;
    })();
    Blitz.Badge = Badge;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var BADGE_EXPIRE = 5 * 60 * 1000;

    var BADGE_TYPE_CHAT_GREE = 'chat_gree';
    var BADGE_TYPE_CHAT_GAME = 'chat_game';
    var BADGE_TYPE_ALL = 'all';

    var AsyncBadgeRepository = (function () {
        function AsyncBadgeRepository() {
        }
        AsyncBadgeRepository.prototype.set = function (badge) {
            var now = new Date().getTime();
            AsyncStorage.Local.setItem(this.getCacheKey(badge.type), JSON.stringify({
                'timestamp': now,
                'expires': now + BADGE_EXPIRE,
                'data': {
                    'type': badge.type,
                    'unread': badge.unread
                }
            })).error(function (error) {
                return debug(error.message);
            });
        };

        AsyncBadgeRepository.prototype.get = function (type) {
            var badgeData = AsyncStorage.Local.getJson(this.getCacheKey(type));
            if (!_.isUndefined(badgeData)) {
                return new Blitz.Badge(badgeData.type, badgeData.unread);
            }
            return null;
        };

        AsyncBadgeRepository.prototype.hasUnread = function (type) {
            var badge = this.get(type);
            return !_.isNull(badge) && badge.unread > 0;
        };

        AsyncBadgeRepository.prototype.clear = function (type) {
            AsyncStorage.Local.removeItem(this.getCacheKey(type));
        };

        AsyncBadgeRepository.prototype.refreshByConfig = function (badges) {
            this.clearAll();
            this.saveConfigBadges(badges);
        };

        AsyncBadgeRepository.prototype.clearAll = function () {
            var _this = this;
            _.each([0 /* GREE_CHAT */, 1 /* GAME_CHAT */], function (badgeType) {
                _this.clear(badgeType);
            });
        };

        AsyncBadgeRepository.prototype.saveConfigBadges = function (badges) {
            var _this = this;
            var badgeFactory = new BadgeFactory();
            $.each(badges, function (type, unread) {
                var badge = badgeFactory.create(type, unread);
                if (!_.isNull(badge)) {
                    _this.set(badge);
                }
            });
        };

        AsyncBadgeRepository.prototype.getCacheKey = function (type) {
            return 'tab-badge-' + type;
        };
        return AsyncBadgeRepository;
    })();
    Blitz.AsyncBadgeRepository = AsyncBadgeRepository;
    Blitz.BadgeRepository = new AsyncBadgeRepository();

    var BadgeFactory = (function () {
        function BadgeFactory() {
        }
        BadgeFactory.prototype.create = function (type, unread) {
            switch (type) {
                case BADGE_TYPE_CHAT_GREE:
                    return new Blitz.Badge(0 /* GREE_CHAT */, unread);
                case BADGE_TYPE_CHAT_GAME:
                    return new Blitz.Badge(1 /* GAME_CHAT */, unread);
                case BADGE_TYPE_ALL:
                    return new Blitz.Badge(2 /* ALL */, unread);
                default:
                    return null;
            }
        };
        return BadgeFactory;
    })();
    Blitz.BadgeFactory = BadgeFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var BadgeService = (function () {
        function BadgeService(client) {
            this.client = client;
        }
        BadgeService.ofSnsApi = function () {
            return new this(new SnsApi.BadgeClient());
        };

        BadgeService.prototype.get = function (type) {
            var defer = new Deferred();
            var badgeEntry = Blitz.BadgeRepository.get(type);
            if (!_.isNull(badgeEntry)) {
                setTimeout(function () {
                    return defer.call(badgeEntry);
                });
                return defer;
            }

            var badgeFactory = new Blitz.BadgeFactory();
            var updatedBadge = null;
            this.client.getBadges().next(function (badgeSet) {
                $.each(badgeSet, function (badgeType, badgeUnread) {
                    var badgeEntry = badgeFactory.create(badgeType, badgeUnread);
                    if (!_.isNull(badgeEntry)) {
                        Blitz.BadgeRepository.set(badgeEntry);
                        if (type === badgeEntry.type) {
                            updatedBadge = badgeEntry;
                        }
                    }
                });

                defer.call(updatedBadge);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        BadgeService.prototype.update = function (type) {
            var defer = new Deferred();
            this.client.updateBadge().next(function () {
                Blitz.BadgeRepository.clear(type);
                defer.call();
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };
        return BadgeService;
    })();
    Blitz.BadgeService = BadgeService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var Theme = (function () {
        function Theme(id, tag, name, isUsed, term) {
            this.id = id;
            this.tag = tag;
            this.name = name;
            this.isUsed = isUsed;
            this.term = term;
        }
        Theme.prototype.isApplicable = function () {
            return this.term.isValid && this.isUsed;
        };

        Theme.createFrom = function (params) {
            if (_.isNull(params) || _.isUndefined(params)) {
                return new monapt.None();
            }

            var term = new Term(params.is_valid_term, new Date(params.valid_term_start), new Date(params.valid_term_end));
            return new monapt.Some(new Theme(params.id, params.tag, 'ハロウィン', params.is_used, term));
        };
        return Theme;
    })();
    Blitz.Theme = Theme;

    var Term = (function () {
        function Term(isValid, start, end) {
            this.isValid = isValid;
            this.start = start;
            this.end = end;
        }
        Term.prototype.asString = function (format, delimiter) {
            if (typeof format === "undefined") { format = "chat.dateformat_m/d_H:MM"; }
            if (typeof delimiter === "undefined") { delimiter = " ~ "; }
            return Util.getFormattedDateString(format, this.start) + delimiter + Util.getFormattedDateString(format, this.end);
        };
        return Term;
    })();
    Blitz.Term = Term;
})(Blitz || (Blitz = {}));
var SNS;
(function (SNS) {
    var SnsView = (function (_super) {
        __extends(SnsView, _super);
        function SnsView(options) {
            if (typeof options === "undefined") { options = {}; }
            _super.call(this, options);
        }
        SnsView.prototype.delegateEvents = function (events) {
            var _this = this;
            _super.prototype.delegateEvents.call(this, events);
            this.$el.off('click.aTag');
            this.$el.on('click.aTag', 'a', function (event) {
                var url = $(event.currentTarget).attr('href');
                if (url) {
                    event.stopPropagation();
                    event.preventDefault();
                    _this.linkTo(url);
                }
            });
            this.delegateTapEvent();
            return this;
        };

        SnsView.prototype.delegateTapEvent = function () {
            var _this = this;
            _.each(['touchstart', 'mousedown'], function (eventName) {
                _this.delegate(eventName, '.tap', function (event) {
                    return $(event.currentTarget).addClass('tapped');
                });
            });

            _.each(['touchmove', 'mousemove', 'touchend', 'mouseup'], function (eventName) {
                _this.delegate(eventName, '.tap', function (event) {
                    return $(event.currentTarget).removeClass('tapped');
                });
            });
        };

        SnsView.prototype.linkTo = function (urlOrHash, beaconOptions) {
            if (typeof beaconOptions === "undefined") { beaconOptions = {}; }
            if (this.shouldUseGryfon(urlOrHash)) {
                Gryfon.linkTo(urlOrHash, beaconOptions);
            } else {
                location.href = urlOrHash;
            }
        };

        SnsView.prototype.shouldUseGryfon = function (urlOrHash) {
            var excluded = [
                /#view=chat_list/,
                /#view=contact_list/
            ];
            for (var i = 0, len = excluded.length; i < len; i++) {
                if (excluded[i].test(urlOrHash)) {
                    return false;
                }
            }
            return true;
        };

        SnsView.prototype.reload = function () {
            location.reload();
        };

        SnsView.prototype.showAlert = function (message, title) {
            if (typeof title === "undefined") { title = ''; }
            new Blitz.DialogView({ title: title, message: message }).show();
        };

        SnsView.prototype.showAlertWithHistoryBack = function (message, title) {
            if (typeof title === "undefined") { title = ''; }
            new Blitz.DialogWithHistoryBackView({ title: title, message: message }).show();
        };

        SnsView.prototype.showError = function (error, errorName) {
            if (typeof errorName === "undefined") { errorName = null; }
            if (error instanceof Cobit.NetworkError) {
                this.showAlert(error.message);
            } else if (error instanceof SnsApi.NetworkError) {
                this.showNetworkError(error);
            } else if (error instanceof Cobit.CobitApiError) {
                this.showCobitApiError(error);
            } else if (error instanceof Cobit.CobitSystemError) {
                this.showCobitSystemError(error);
            } else if (error instanceof SnsApi.SNSAPIError) {
                this.showSnsApiError(error, errorName);
            } else {
                this.showAlert(error.message);
            }
        };

        SnsView.prototype.showCobitApiError = function (error) {
            if (error instanceof Cobit.AccessTokenExpireError || error instanceof Cobit.AuthenticationFailedError) {
                this.reload();
            } else {
                this.showAlert(error.message);
            }
        };

        SnsView.prototype.showCobitSystemError = function (error) {
            var errorMessage = Blitz.Language.getMessage('chat.error_failed');
            this.showAlert(errorMessage);
        };

        SnsView.prototype.showSnsApiError = function (error, errorName) {
            if (error instanceof SnsApi.CSRFTokenExpireError) {
                this.reload();
                return;
            }
            var errorMessage = i18n.text(errorName + error.code) || i18n.text('snsapi_error_' + error.code) || error.message;
            this.showAlert(errorMessage);
        };

        SnsView.prototype.showNetworkError = function (error) {
            var errorMessage = Blitz.Language.getMessage('chat.error_offline');
            this.showAlert(errorMessage);
        };
        return SnsView;
    })(fivefold.View);
    SNS.SnsView = SnsView;

    var TouchableView = (function (_super) {
        __extends(TouchableView, _super);
        function TouchableView() {
            _super.apply(this, arguments);
        }
        TouchableView.prototype.render = function () {
            this.renderTouchArea();
            this.$el.append(this.$touchArea);
            return this;
        };

        TouchableView.prototype.renderTouchArea = function () {
            this.$touchArea = $('<div class="tap" style="-webkit-user-select: none;">').attr({ 'data-touch': 'enabled' });
        };

        TouchableView.prototype.delegateEvents = function () {
            _super.prototype.delegateEvents.call(this);
            this.delegate('click', '.tap', $.proxy(this._onTouch, this));
            return this;
        };

        TouchableView.prototype._onTouch = function (event) {
            var source = event.srcElement;
            if (source.tagName.toLowerCase() === 'a') {
                return;
            }
            this.onTouch(event);
        };

        TouchableView.prototype.onTouch = function (event) {
            event.stopPropagation();
        };
        return TouchableView;
    })(SnsView);
    SNS.TouchableView = TouchableView;

    var TouchableListView = (function (_super) {
        __extends(TouchableListView, _super);
        function TouchableListView() {
            _super.apply(this, arguments);
        }
        TouchableListView.prototype.render = function () {
            this.renderTouchArea();
            this.$el.append($('<div class="list-item round shrink"></div>').append(this.$touchArea));
            return this;
        };
        return TouchableListView;
    })(TouchableView);
    SNS.TouchableListView = TouchableListView;
})(SNS || (SNS = {}));
var SNS;
(function (SNS) {
    var Collection = (function (_super) {
        __extends(Collection, _super);
        function Collection(items) {
            if (typeof items === "undefined") { items = []; }
            _super.call(this);
            this.items = items;
        }
        Collection.prototype.isEmpty = function () {
            return this.items.length == 0;
        };

        Collection.prototype.deleteItem = function (item) {
        };

        Collection.prototype.addItems = function (items) {
            this.items.push.apply(this.items, items);
            this.addItemsToView(items);
        };

        Collection.prototype.addItemsToView = function (items) {
            this.emit('addItems', items);
        };

        Collection.prototype.addNewItem = function (item) {
            this.items.unshift(item);
            this.addNewItemToView(item);
        };

        Collection.prototype.addNewItemToView = function (item) {
            this.emit('addNewItem', item);
        };

        Collection.prototype.getArrayColumn = function (columnName) {
            return this.items.map(function (entry) {
                return entry[columnName];
            });
        };
        return Collection;
    })(EventEmitter);
    SNS.Collection = Collection;

    var LoadMoreCollection = (function (_super) {
        __extends(LoadMoreCollection, _super);
        function LoadMoreCollection(items, total) {
            if (typeof items === "undefined") { items = []; }
            if (typeof total === "undefined") { total = null; }
            _super.call(this, items);
            this.total = total;
            this.allLoaded = false;
            this.nowLoading = false;
            if (this.isLoadComplete()) {
                this.allLoaded = true;
            }
        }
        LoadMoreCollection.prototype.loadNext = function () {
        };

        LoadMoreCollection.prototype.loadCompleted = function () {
            this.allLoaded = true;
            this.emit('completed');
        };

        LoadMoreCollection.prototype.loadSucceed = function (items) {
            this.emit('loadSucceed', items);
        };

        LoadMoreCollection.prototype.loadFailed = function (error) {
            if (typeof error === "undefined") { error = null; }
            this.emit('loadFailed', error);
            this.stopLoading();
        };

        LoadMoreCollection.prototype.stopLoading = function () {
            this.emit('stopLoading');
        };

        LoadMoreCollection.prototype.isLoadComplete = function () {
            if (this.total != null) {
                return this.items.length >= this.total;
            }
            return false;
        };
        return LoadMoreCollection;
    })(Collection);
    SNS.LoadMoreCollection = LoadMoreCollection;
})(SNS || (SNS = {}));
var Blitz;
(function (Blitz) {
    var StampUnit = (function (_super) {
        __extends(StampUnit, _super);
        function StampUnit(identity, stampId, imageUrl) {
            _super.call(this, identity);
            this.stampId = stampId;
            this.imageUrl = imageUrl;
        }
        StampUnit.apply = function (params) {
            var identity = new StampUnitIdentity(params.identity);
            var stampId = new Blitz.StampIdentity(params.stamp_id);
            var imageUrl = params.image_url;

            return new StampUnit(identity, stampId, imageUrl);
        };
        return StampUnit;
    })(DDD.Entity);
    Blitz.StampUnit = StampUnit;

    var StampUnitIdentity = (function (_super) {
        __extends(StampUnitIdentity, _super);
        function StampUnitIdentity(identity) {
            _super.call(this, identity);
        }
        return StampUnitIdentity;
    })(DDD.Identity);
    Blitz.StampUnitIdentity = StampUnitIdentity;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var MessageFactory = (function () {
        function MessageFactory() {
        }
        MessageFactory.prototype.createLatestMessageWithResponse = function (response) {
            var latestMessages = response.content.latest_messages.map(function (content) {
                var message = content.message;
                var toConversationId = message.to_conversation.identity;
                var meta = new Blitz.Meta(parseInt(message.create_time), null);
                var text = message.content.text;
                var senderId = new Blitz.SnsUserId(parseInt(response.sender.ref_key));

                return new Blitz.TextMessage(toConversationId, senderId, meta, text);
            });
            return latestMessages;
        };

        MessageFactory.createMessage = function (params) {
            var toConversationId = params.to_conversation.identity;
            var meta = new Blitz.Meta(parseInt(params.create_time), 10);
            var senderId = new Blitz.SnsUserId(parseInt(params.sender.ref_key));

            var content = params.content;
            if (content.type === "message/text") {
                var text = params.content.text;
                return new Blitz.TextMessage(toConversationId, senderId, meta, text);
            } else if (content.type === "message/stamp") {
                var stampContentObj = content;
                var stampName = stampContentObj.stamp_name;
                var stampUnit = Blitz.StampUnit.apply(stampContentObj.stamp_unit);
                return new Blitz.StampMessage(stampUnit, stampName, toConversationId, senderId, meta);
            } else {
                debugAsError("invalid type: type=" + content.type);
            }
        };
        return MessageFactory;
    })();
    Blitz.MessageFactory = MessageFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EventRepository = (function (_super) {
        __extends(EventRepository, _super);
        function EventRepository(client) {
            _super.call(this);
            this.client = client;
        }
        EventRepository.ofApi = function (client) {
            return new EventRepository(client);
        };

        EventRepository.prototype.getEventHistory = function (conversationId, range) {
            var defer = new Deferred();
            this.client.getHistory(conversationId, range).next(function (response) {
                if (!response.content.events.length) {
                    defer.call([]);
                    return;
                }
                var eventFactory = new Blitz.EventFactory();
                var events = $.map(response.content.events, function (item) {
                    return eventFactory.create(item);
                });
                defer.call(events);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        EventRepository.prototype.getLatestMessageByConversationIds = function (conversationIds) {
            var defer = new Deferred();
            this.client.getLatestMessage(conversationIds).next(function (response) {
                var messageFactory = new Blitz.MessageFactory();
                var latestMessages = messageFactory.createLatestMessageWithResponse(response);
                defer.call(latestMessages);
            }).error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };
        return EventRepository;
    })(EventEmitter);
    Blitz.EventRepository = EventRepository;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EventService = (function () {
        function EventService(client) {
            this.client = client;
        }
        EventService.ofApi = function (client) {
            return new this(client);
        };

        EventService.prototype.readPastAllMessages = function (conversationId) {
            var defer = new Deferred();

            this.client.readPastAllMessages(conversationId.getValue()).next(function (response) {
                defer.call(response.content.message_ids);
                Gryfon.notify('read-past-message');
            });
            return defer;
        };
        return EventService;
    })();
    Blitz.EventService = EventService;

    var UnreadCountContent = (function () {
        function UnreadCountContent(conversationId, unreadCount) {
            this.conversationId = conversationId;
            this.unreadCount = unreadCount;
        }
        UnreadCountContent.prototype.getConversationId = function () {
            return this.conversationId;
        };

        UnreadCountContent.prototype.getUnreadCount = function () {
            return this.unreadCount;
        };
        return UnreadCountContent;
    })();
    Blitz.UnreadCountContent = UnreadCountContent;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var MessageService = (function () {
        function MessageService(client) {
            this.client = client;
        }
        MessageService.ofApi = function (client) {
            return new this(client);
        };

        MessageService.prototype.sendTextMessage = function (message) {
            var _this = this;
            var defer = new Deferred();
            try  {
                this.validateBeforeSend(message);
                this.executeAsyncIfAndroid(function () {
                    _this.client.sendMessage(message).next(function (response) {
                        var eventFactory = new Blitz.EventFactory();
                        var event = eventFactory.create(response);
                        if (event.isMessageSuspendedEvent()) {
                            event.setText(message);
                        }
                        defer.call(event);
                    }).error(function (error) {
                        return defer.fail(error);
                    });
                });
            } catch (e) {
                setTimeout(function () {
                    return defer.fail(e);
                });
            }
            return defer;
        };

        MessageService.prototype.validateBeforeSend = function (message) {
            if (message.getTextCount() == 0) {
                throw new Error(Blitz.Language.getMessage('chat.error_send_empty'));
            }
            if (message.getTextCount() > Blitz.TextMessage.maxInputLength) {
                throw new Error(Blitz.Language.getMessage('chat.error_send_max_char_num', [Blitz.TextMessage.maxInputLength]));
            }
            return true;
        };

        MessageService.prototype.executeAsyncIfAndroid = function (fn) {
            if (SNS.Config.isAndroid()) {
                setTimeout(fn, 0);
                return;
            }
            return fn();
        };
        return MessageService;
    })();
    Blitz.MessageService = MessageService;
})(Blitz || (Blitz = {}));
var IdentityService;
(function (IdentityService) {
    (function (IdentityType) {
        IdentityType[IdentityType["Conversation"] = 0] = "Conversation";
        IdentityType[IdentityType["User"] = 1] = "User";
    })(IdentityService.IdentityType || (IdentityService.IdentityType = {}));
    var IdentityType = IdentityService.IdentityType;

    var Cache = (function () {
        function Cache() {
        }
        Cache.getUserName = function (identity) {
            var user = Cache.getUser(identity);
            if (!_.isUndefined(user)) {
                return user.getNickname();
            }
            return undefined;
        };

        Cache.getUserIconUrl = function (identity) {
            var user = Cache.getUser(identity);
            if (!_.isUndefined(user)) {
                return user['profileImageUrl'];
            }
            return undefined;
        };

        Cache.getUser = function (identity) {
            var userRepository = Blitz.UserRepository.ofApi();
            var userId = new Blitz.SnsUserId(identity);
            var userInfo = userRepository.getCache(userId);
            if (_.isUndefined(userInfo)) {
                userRepository.setUnresolvedIdentity(userId);
            }
            return userInfo;
        };

        Cache.updateUserIdentities = function () {
            var userRepository = Blitz.UserRepository.ofApi();

            return userRepository.updateIdentities();
        };

        Cache.deleteConversationFromCache = function (conversationId) {
            var conversationRepo = Blitz.ConversationRepository.ofApi(app.cobit);
            conversationRepo.removeCache(conversationId);
        };

        Cache.deleteUserFromCache = function (userId) {
            var userRepo = Blitz.UserRepository.ofApi();
            userRepo.removeCache(userId);
        };
        return Cache;
    })();
    IdentityService.Cache = Cache;
})(IdentityService || (IdentityService = {}));
var Blitz;
(function (Blitz) {
    var BlitzView = (function (_super) {
        __extends(BlitzView, _super);
        function BlitzView(options) {
            _super.call(this, options);
            this.CONVERSATION_NAME_SEPARATOR = '、';
            var usePullToRefresh = true;
            if (!_.isUndefined(options) && !_.isUndefined(options.usePullToRefresh)) {
                usePullToRefresh = options.usePullToRefresh;
            }
            this.setPullToRefreshEnabled(usePullToRefresh);
        }
        BlitzView.prototype.getFormattedNameElement = function (userId) {
            var name = IdentityService.Cache.getUserName(userId);
            return this._getFormattedNameElement(userId.toString(), name);
        };

        BlitzView.prototype._getFormattedNameElement = function (userId, name) {
            var $element = $('<span>').attr('data-type', 'user:name').attr('data-identity', userId);

            if (_.isUndefined(name)) {
                $element.attr('data-identity-cache', 'NOTFOUND');
            } else {
                $element.html(name);
            }
            return this.toString($element);
        };

        BlitzView.prototype.isChatWritePermitted = function () {
            if (!Blitz.Myself.getMe().permission.isChatWritable()) {
                new Blitz.NoticeUpgradeDialogView().show();
                return false;
            }
            return true;
        };

        BlitzView.prototype.hasPenalty = function () {
            if (Blitz.Myself.getMe().hasPenalty) {
                new Blitz.NoticePenaltyDialogView().show();
                return true;
            }
            return false;
        };

        BlitzView.prototype.getFormattedGroupConversationNameElement = function (participants) {
            var _this = this;
            var myself = Blitz.Myself.getMe();
            var filteredParticipants = [];
            if (participants.length > 3) {
                filteredParticipants = participants.filter(function (user) {
                    return !user.equals(myself);
                });
            } else {
                filteredParticipants = participants;
            }

            var element = filteredParticipants.map(function (user) {
                var userId = user.getIdentity().getValue();
                var name = IdentityService.Cache.getUserName(userId);

                var $elem = $('<span>').attr('data-type', 'user:name').attr('data-identity', userId);

                if (_.isUndefined(name)) {
                    $elem.attr('data-identity-cache', 'NOTFOUND');
                } else {
                    $elem.html(name);
                }
                return _this.toString($elem);
            });
            return element.join(this.CONVERSATION_NAME_SEPARATOR);
        };

        BlitzView.prototype.getFormattedIconUrlElement = function (userId) {
            var url = IdentityService.Cache.getUserIconUrl(userId.getValue());
            return this._getFormattedIconUrlElement(userId.getValue().toString(), url);
        };

        BlitzView.prototype._getFormattedIconUrlElement = function (userId, url) {
            var $element = $('<div class="ico48 tap friend">').attr('data-type', 'user:iconUrl').attr('data-identity', userId);
            if (_.isUndefined(url)) {
                $element.attr('data-identity-cache', 'NOTFOUND');
            } else if (_.isEmpty(url)) {
            } else {
                $element.css('background-image', 'url(' + url + ')');
            }
            $element = $('<div class="wrapIco48">').append($element);
            return this.toString($element);
        };

        BlitzView.prototype.toString = function ($element) {
            return $('<div>').html($element).html();
        };

        BlitzView.prototype.complementIdentities = function () {
            var _this = this;
            IdentityService.Cache.updateUserIdentities().next(function () {
                _this.renderUpdateUserIdentity();
            });
        };

        BlitzView.prototype.renderUpdateUserIdentity = function () {
            var elements = $("[data-type^='user:'][data-identity-cache='NOTFOUND']");
            elements.forEach(function (element) {
                var $element = $(element);
                var typeData = $element.attr('data-type').split(":");
                if (typeData.length !== 2) {
                    debug('Invalid data-type: ' + $element.attr('data-type'));
                    return;
                }
                var dataType = typeData[1];
                var identity = parseInt($element.attr('data-identity'));
                var outputData = '';
                switch (dataType) {
                    case 'iconUrl':
                        outputData = IdentityService.Cache.getUserIconUrl(identity);
                        if (!_.isUndefined(outputData) && !_.isEmpty(outputData)) {
                            $element.css({ 'background-image': 'url(' + outputData + ')' });
                        }
                        break;
                    case 'name':
                        outputData = IdentityService.Cache.getUserName(identity);
                        if (!_.isUndefined(outputData)) {
                            $element.html(outputData);
                        }
                        break;
                    default:
                        debug('Invalid data type: ' + dataType);
                        break;
                }
                $element.removeAttr('data-identity-cache');
            });
        };

        BlitzView.prototype.setPullToRefreshEnabled = function (enabled) {
            if (typeof enabled === "undefined") { enabled = false; }
            Gryfon.setPullToRefreshEnabled(enabled);
        };

        BlitzView.prototype.handleError = function (error) {
            if (error instanceof Blitz.DomainError) {
                this.handleDomainError(error);
            } else {
                _super.prototype.showError.call(this, error);
            }
        };

        BlitzView.prototype.handleDomainError = function (error) {
            switch (error.code) {
                case 3000 /* HasPenalty */:
                    new Blitz.NoticePenaltyDialogView().show();
                    break;
                case 3001 /* DontHaveWritePermission */:
                    new Blitz.NoticeUpgradeDialogView().show();
                    break;
                case 3003 /* CommunicateOnlyFriends */:
                    this.showAlert(Blitz.Language.getMessage('chat.error_privacy_level_1'));
                    break;
                case 3004 /* CommunicateOnlyTwoDegrees */:
                    this.showAlert(Blitz.Language.getMessage('chat.error_privacy_level_2'));
                    break;
                case 3005 /* Blocked */:
                    this.showAlert(Blitz.Language.getMessage('chat.error_blocked_user'));
                    break;
                default:
                    this.showAlert(Blitz.Language.getMessage('chat.error_failed'));
                    break;
            }
        };
        return BlitzView;
    })(SNS.SnsView);
    Blitz.BlitzView = BlitzView;
})(Blitz || (Blitz = {}));

var SNS;
(function (SNS) {
    var primaryText = function (primary) {
        return primary ? 'prim' : '';
    };
    var classText = function (clazz) {
        return clazz ? clazz : '';
    };

    SNS.ModalItem = {
        button5: function (text, options) {
            if (typeof options === "undefined") { options = {}; }
            return {
                cssClasses: ['wrapNavBtnM'],
                $el: $('<a class="navBtn">').addClass(primaryText(options.primary)).text(text).addClass(classText(options.cssClass))
            };
        },
        button2: function (text, options) {
            if (typeof options === "undefined") { options = {}; }
            return {
                cssClasses: ['wrapNavBtnSS'],
                $el: $('<a class="navBtn">').addClass(primaryText(options.primary)).text(text).addClass(classText(options.cssClass))
            };
        },
        dummyButton2: function () {
            return {
                cssClasses: ['wrapNavBtnSS'],
                $el: $('')
            };
        },
        dummyButton5: function () {
            return {
                cssClasses: ['wrapNavBtnM'],
                $el: $('')
            };
        },
        title: function (text, options) {
            if (typeof options === "undefined") { options = {}; }
            return {
                cssClasses: ['wrapMdlTtl'],
                $el: $('<h1 class="mdlTtl ellp skStroke">').html(text).addClass(classText(options.cssClass))
            };
        },
        icon: function (text, dataName, options) {
            if (typeof options === "undefined") { options = {}; }
            return {
                cssClasses: ['mdlItm w45 taR'],
                $el: $('<p class="fsS">').append('<span class="spr ia18_minor_friend vaM"></span>').append($('<span class="w25 dIb vaM taL">').text(text).data(dataName, text)).addClass(classText(options.cssClass))
            };
        },
        notificationIcon: function (className, options) {
            if (typeof options === "undefined") { options = {}; }
            return {
                cssClasses: ['mdlItm w20 taR'],
                $el: $('<p class="fsS">').append($('<span id="notificationIcon" class="spr vaM"></span>').addClass(classText(className)))
            };
        },
        buttonOption: function (options) {
            if (typeof options === "undefined") { options = {}; }
            return {
                cssClasses: ['wrapNavBtnSS'],
                $el: $('<a class="icoBtn">').append('<span class="spr ia24_nav_more"></span>').addClass(classText(options.cssClass))
            };
        }
    };

    var $item = function (item) {
        var parent = $('<div>');
        for (var i = 0, l = item.cssClasses.length; i < l; i++) {
            parent.addClass(item.cssClasses[i]);
        }
        return parent.append(item.$el);
    };

    var ModalHeaderView = (function (_super) {
        __extends(ModalHeaderView, _super);
        function ModalHeaderView() {
            _super.call(this);
            this.$naviHeader = $('#greeCommonHeader');
            this.$subHeader = $('#subHeader');
            this.$modalHeader = $('#modalHeader');
            this.template = new SNS.HBSTemplate('modal-header.hbs');
            this.$currentHeader = this.getCurrentHeader();
        }
        ModalHeaderView.prototype.getCurrentHeader = function () {
            if (/display:\s?none;/.test(this.$naviHeader.attr('style'))) {
                return this.$subHeader;
            } else {
                return this.$naviHeader;
            }
        };

        ModalHeaderView.prototype.show = function () {
            this.$modalHeader.empty().append('<div></div>').show();
            this.$el = this.$modalHeader.children();
            this.$currentHeader.hide();
            this.render();
        };

        ModalHeaderView.prototype.hide = function () {
            this.undelegateAll();
            this.$modalHeader.hide();
            this.$currentHeader.show();
        };

        ModalHeaderView.prototype.render = function () {
            this.$el.html(this.template.render({}));
            for (var i = 0, l = this.items.length; i < l; i++) {
                $('.mdl', this.$el).append($item(this.items[i]));
            }
            this.delegateEvents();
            return this;
        };
        return ModalHeaderView;
    })(fivefold.View);
    SNS.ModalHeaderView = ModalHeaderView;

    var mapModalEvents = function (modalEvents, context) {
        var mapped = {};
        for (var key in modalEvents) {
            mapped[key] = $.proxy(context[modalEvents[key]], context);
        }
        return mapped;
    };

    var ModalView = (function (_super) {
        __extends(ModalView, _super);
        function ModalView(options) {
            var _this = this;
            _super.call(this, {
                'usePullToRefresh': false
            });
            this.$el = $('#modal-container');
            this.$mainContent = $('#dataArea');
            this.$footerContent = $('.mdlFootWrap');
            this.headerView = new ModalHeaderView();
            this.modalEvents = {};
            this.headerView.items = options.items;
            this.headerView.events = function () {
                return mapModalEvents(_this.modalEvents, _this);
            };
        }
        ModalView.prototype.show = function () {
            this.headerView.show();
            this.$el.show();
            this.$mainContent.hide();
            this.$footerContent.hide();
        };

        ModalView.prototype.hide = function () {
            this.headerView.hide();
            this.$mainContent.show();
            this.$footerContent.show();
            this.undelegateAll();
            this.$el.hide();
        };

        ModalView.prototype.refreshEvents = function () {
            var _this = this;
            this.headerView.events = function () {
                return mapModalEvents(_this.modalEvents, _this);
            };
            this.headerView.delegateEvents();
        };
        return ModalView;
    })(Blitz.BlitzView);
    SNS.ModalView = ModalView;
})(SNS || (SNS = {}));
var Blitz;
(function (Blitz) {
    var ContactCollection = (function (_super) {
        __extends(ContactCollection, _super);
        function ContactCollection() {
            _super.call(this);
            this.DISPLAY_LIMIT = 20;
            this.userRepository = Blitz.UserRepository.ofApi();
            this.userFactory = new Blitz.UserFactory();
            this.newContactList = this.userFactory.createUsers(SNS.Config.getNewContactList());
            this.currentIndex = 0;
        }
        ContactCollection.prototype.loadFirst = function () {
            var _this = this;
            var promise = new monapt.Promise();
            var range = new SNS.Range(this.DISPLAY_LIMIT + 1, this.currentIndex);
            this.getContactList(range, function (contactList) {
                _this.total = _this.userRepository.getCount() - SNS.Config.getNewContactNum();
                promise.success(contactList);
            });
            return promise;
        };

        ContactCollection.prototype.loadNext = function () {
            var range = new SNS.Range(this.DISPLAY_LIMIT + 1, this.currentIndex);
            this.getContactList(range);
        };

        ContactCollection.prototype.getContactList = function (range, callback) {
            var _this = this;
            if (typeof callback === "undefined") { callback = function (items) {
            }; }
            this.userRepository.getContactList(range).next(function (contactList) {
                var items = [];
                _this.currentIndex += contactList.length - 1;
                if (contactList.length < range.limit) {
                    items = _this.filter(contactList);
                    _this.addItems(items);
                    _this.loadCompleted();
                } else {
                    items = _this.filter(contactList.slice(0, _this.DISPLAY_LIMIT));
                    _this.addItems(items);
                }
                _this.loadSucceed(items);
                callback(items);
            }).error(function (error) {
                return _this.loadFailed(error);
            });
        };

        ContactCollection.prototype.filter = function (items) {
            return this.filterNewContact(this.filterDuplicatedContact(items));
        };

        ContactCollection.prototype.filterDuplicatedContact = function (contactList) {
            var _this = this;
            return contactList.filter(function (contact) {
                var duplicated = _this.items.some(function (item) {
                    return item.equals(contact);
                });
                return !duplicated;
            });
        };

        ContactCollection.prototype.filterNewContact = function (contactList) {
            var _this = this;
            return contactList.filter(function (contact) {
                var duplicated = _this.newContactList.some(function (newContact) {
                    return newContact.equals(contact);
                });
                return !duplicated;
            });
        };
        return ContactCollection;
    })(SNS.LoadMoreCollection);
    Blitz.ContactCollection = ContactCollection;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var SelectableContactCollection = (function (_super) {
        __extends(SelectableContactCollection, _super);
        function SelectableContactCollection(conversation) {
            _super.call(this);
            this.conversation = conversation;
        }
        SelectableContactCollection.prototype.filter = function (items) {
            return this.filterCurrentParticipants(this.filterDuplicatedContact(items));
        };

        SelectableContactCollection.prototype.filterCurrentParticipants = function (contactList) {
            var _this = this;
            if (!this.conversation) {
                return contactList;
            }
            return contactList.filter(function (contact) {
                var duplicated = _this.conversation.participants.some(function (participant) {
                    return contact.equals(participant);
                });
                return !duplicated;
            });
        };
        return SelectableContactCollection;
    })(Blitz.ContactCollection);
    Blitz.SelectableContactCollection = SelectableContactCollection;
})(Blitz || (Blitz = {}));
var SNS;
(function (SNS) {
    SNS.LoadMoreTextCommonKey = 'common.see_more';

    (function (LoadMoreViewType) {
        LoadMoreViewType[LoadMoreViewType["Common"] = 0] = "Common";
        LoadMoreViewType[LoadMoreViewType["Unit"] = 1] = "Unit";
        LoadMoreViewType[LoadMoreViewType["ListItem"] = 2] = "ListItem";
    })(SNS.LoadMoreViewType || (SNS.LoadMoreViewType = {}));
    var LoadMoreViewType = SNS.LoadMoreViewType;

    var LoadMoreView = (function (_super) {
        __extends(LoadMoreView, _super);
        function LoadMoreView(viewModel, textKey, options) {
            if (typeof textKey === "undefined") { textKey = SNS.LoadMoreTextCommonKey; }
            if (typeof options === "undefined") { options = {}; }
            _super.call(this, {
                selector: options.selector || '',
                context: options.context || null,
                id: 'load-more-view',
                className: options.className || ''
            });
            this.viewModel = viewModel;
            this.textKey = textKey;
            this.loadMoreTemplate = new SNS.HBSTemplate('load-more.hbs');
            viewModel.on('stopLoading', $.proxy(this.stopLoading, this));
            viewModel.on('completed', $.proxy(this.remove, this));
        }
        LoadMoreView.prototype.events = function () {
            return {
                'click #load-more-view': 'onClickLoadMore'
            };
        };

        LoadMoreView.prototype.render = function () {
            this.$el.html(this.loadMoreTemplate.render({
                uniqueId: _.uniqueId('t'),
                textKey: this.textKey
            }));
            this.delegateEvents();
            return this;
        };

        LoadMoreView.prototype.onClickLoadMore = function () {
            this.loadMore();
        };

        LoadMoreView.prototype.loadMore = function () {
            if (this.viewModel.allLoaded || this.viewModel.nowLoading) {
                return;
            }
            this.viewModel.nowLoading = true;
            this.startLoading();
            this.viewModel.loadNext();
        };

        LoadMoreView.prototype.stopLoading = function () {
            $('#more-loading-view', this.$el).hide();
            $('#more-button-view', this.$el).show();

            this.viewModel.nowLoading = false;
            this.delegateEvents();
        };

        LoadMoreView.prototype.startLoading = function () {
            this.delegateEvents();

            $('#more-button-view', this.$el).hide();
            $('#more-loading-view', this.$el).show();
        };

        LoadMoreView.prototype.hide = function () {
            this.$el.hide();
        };

        LoadMoreView.prototype.remove = function () {
            this.$el.remove();
        };
        return LoadMoreView;
    })(SNS.SnsView);
    SNS.LoadMoreView = LoadMoreView;

    var UnitLoadMoreView = (function (_super) {
        __extends(UnitLoadMoreView, _super);
        function UnitLoadMoreView(viewModel, textKey, options) {
            if (typeof textKey === "undefined") { textKey = SNS.LoadMoreTextCommonKey; }
            if (typeof options === "undefined") { options = {}; }
            options.className = 'unit more loading center ' + (options.className || '');
            _super.call(this, viewModel, textKey, options);
        }
        return UnitLoadMoreView;
    })(LoadMoreView);
    SNS.UnitLoadMoreView = UnitLoadMoreView;

    var ListLoadMoreView = (function (_super) {
        __extends(ListLoadMoreView, _super);
        function ListLoadMoreView(viewModel, textKey, options) {
            if (typeof textKey === "undefined") { textKey = SNS.LoadMoreTextCommonKey; }
            if (typeof options === "undefined") { options = {}; }
            options.className = 'list-item round shrink more loading center ' + (options.className || '');
            _super.call(this, viewModel, textKey, options);
        }
        return ListLoadMoreView;
    })(LoadMoreView);
    SNS.ListLoadMoreView = ListLoadMoreView;
})(SNS || (SNS = {}));
var Blitz;
(function (Blitz) {
    var recordedScrollTop = 0;
    var scrollTarget = $(document.body);
    var scrollToRecorded = function () {
        return document.body.scrollTop = recordedScrollTop;
    };
    var scrollToTop = function () {
        return document.body.scrollTop = 0;
    };

    var BlitzLayout = (function (_super) {
        __extends(BlitzLayout, _super);
        function BlitzLayout() {
            _super.call(this);
            this.$html = $('html');
            this.$body = $('body');
            this.$el = $('#glContr');
            this.$content = $('#content-container');
            this.$indicator = $('#loading-indicator');
            this.$subNaviContainer = $('#subnavi-container');
            this.$modalHeader = $('#modalHeader');
            this.$subHeader = $('#subHeader');
            this.$modalContainer = $('#modal-container');
            this.$popupContainer = $('#popup-container');
            this.$commonHeader = $('#greeCommonHeader');
            this.$commonFooter = $('#gcf');
            this.$commonMenu = $('#gcnCn');
            this.$contentWrapper = $('.contWrap');
            this.$dialogArea = $('#chat-dialog');
            this.$optionArea = $('.optionArea');
            this.$inputFooter = $('.mdlFootWrap');
            this.scrollToTop = true;
            this.scrollToRecorded = false;
            this.$indicator.show();
            this.initialize();
        }
        BlitzLayout.prototype.initialize = function () {
            BlitzLayout.undelegateEvent();
            this.$html.height('');
            this.$el.removeClass('mdlFootH mdlFootHL');
            this.$body.removeClass('skLightGray');
            this.$content.html('').show();
            this.$commonHeader.show();
            this.$commonFooter.show();
            this.$subNaviContainer.empty().hide();
            this.$subHeader.empty().hide();
            this.$modalHeader.hide();

            this.$dialogArea.remove();
            this.$optionArea.remove();
            this.$inputFooter.remove();
        };

        BlitzLayout.prototype.beforeDisplayContent = function () {
            $('#dataArea').show();
            $('#modal-container').hide();
            this.$indicator.hide();
        };

        BlitzLayout.prototype.display = function ($el) {
            _super.prototype.display.call(this, $el);
            if (this.scrollToTop) {
                scrollToTop();
            } else if (this.scrollToRecorded) {
                scrollToRecorded();
            }
        };

        BlitzLayout.prototype.hideGreeCommonFooter = function () {
            this.$commonFooter.hide();
        };

        BlitzLayout.prototype.setTheme = function (theme) {
            this.$body.addClass(theme.tag);
        };

        BlitzLayout.prototype.clearTheme = function (theme) {
            this.$body.removeClass(theme.tag);
        };

        BlitzLayout.prototype.appendMdlFootHClass = function () {
            this.$el.addClass('mdlFootH');
        };

        BlitzLayout.prototype.appendSkLightGrayClass = function () {
            this.$body.addClass('skLightGray');
        };

        BlitzLayout.showIndicator = function () {
            $('#loading-indicator').show();
            $('#content-container').hide();
        };

        BlitzLayout.hideIndicator = function () {
            $('#loading-indicator').hide();
            $('#content-container').show();
        };

        BlitzLayout.delegateEvent = function (func, doAlways) {
            if (typeof doAlways === "undefined") { doAlways = false; }
            if (doAlways) {
                $(window).on('scroll', function () {
                    func($(window).scrollTop());
                });
            } else {
                BlitzLayout.throttle({
                    event: 'scroll',
                    delay: BlitzLayout.delay,
                    callback: func
                });
            }
        };

        BlitzLayout.throttle = function (params) {
            if (typeof params.element == 'undefined') {
                params.element = window;
            }
            var lastFired = (new Date()).getTime();
            $(params.element).on(params.event, function () {
                var now = (new Date()).getTime();
                if ((lastFired + params.delay) < now) {
                    params.callback();
                    lastFired = now;
                }
            });
        };

        BlitzLayout.undelegateEvent = function () {
            $(window).off('scroll');
        };

        BlitzLayout.calcDistanceFromScrollPositionToBottom = function () {
            var documentHeight = $(document).height();
            var scrollPosition = $(window).height() + $(window).scrollTop();
            return documentHeight - scrollPosition;
        };
        BlitzLayout.delay = Util.UA.isAndroid() ? 20 : 500;
        return BlitzLayout;
    })(fivefold.Layout);
    Blitz.BlitzLayout = BlitzLayout;
})(Blitz || (Blitz = {}));
var SNS;
(function (SNS) {
    (function (CollectionSortType) {
        CollectionSortType[CollectionSortType["AscendingOrder"] = 0] = "AscendingOrder";
        CollectionSortType[CollectionSortType["DescendingOrder"] = 1] = "DescendingOrder";
    })(SNS.CollectionSortType || (SNS.CollectionSortType = {}));
    var CollectionSortType = SNS.CollectionSortType;

    var CollectionView = (function (_super) {
        __extends(CollectionView, _super);
        function CollectionView(collection, options) {
            if (typeof options === "undefined") { options = {}; }
            _super.call(this, options);
            this.collection = collection;
            this.collectionClass = 'collection';
            this.sortType = 1 /* DescendingOrder */;
            this.template = new SNS.HBSTemplate('collection.hbs');
            this.items = collection.items;
            collection.on('addNewItem', $.proxy(this.addNewItem, this));
        }
        CollectionView.prototype.render = function () {
            this.$el.html(this.template.render({
                collectionClass: this.collectionClass
            }));

            this.$collection = $('.' + this.collectionClass, this.$el);
            this.renderCollection(this.items);

            return this;
        };

        CollectionView.prototype.renderCollection = function (items) {
            var _this = this;
            var collection = $.map(items, function (item) {
                return _this.renderItem(item);
            });
            this.insertCollection(collection);
            this.collection.emit('collectionRendered', items);
            return this.$collection;
        };

        CollectionView.prototype.insertCollection = function (collection) {
            if (this.sortType === 0 /* AscendingOrder */) {
                $.fn.prepend.apply(this.$collection, collection.reverse());
            }
            if (this.sortType === 1 /* DescendingOrder */) {
                $.fn.append.apply(this.$collection, collection);
            }
        };

        CollectionView.prototype.renderItem = function (item) {
            return new fivefold.View().render().$el;
        };

        CollectionView.prototype.addNewItem = function (item) {
            if (this.sortType === 0 /* AscendingOrder */) {
                this.$collection.append(this.renderItem(item));
                this.collection.emit('appendedNewItem', item);
            }
            if (this.sortType === 1 /* DescendingOrder */) {
                this.$collection.prepend(this.renderItem(item));
                this.collection.emit('prependedNewItem', item);
            }
        };
        return CollectionView;
    })(SNS.SnsView);
    SNS.CollectionView = CollectionView;

    var LoadMoreCollectionView = (function (_super) {
        __extends(LoadMoreCollectionView, _super);
        function LoadMoreCollectionView(viewModel, options) {
            if (typeof options === "undefined") { options = {}; }
            var _this = this;
            _super.call(this, viewModel, options);
            this.viewModel = viewModel;
            this.loadMoreClass = 'loadmore';
            this.loadMoreViewType = 1 /* Unit */;
            this.loadMoreTextKey = SNS.LoadMoreTextCommonKey;
            this.autoPagerize = false;
            viewModel.on('addItems', $.proxy(this.addItems, this));
            viewModel.on('loadSucceed', function () {
                return _this.loadSucceed();
            });
        }
        LoadMoreCollectionView.prototype.render = function () {
            var _this = this;
            this.$el.html(this.template.render({
                collectionClass: this.collectionClass,
                loadMoreClass: this.loadMoreClass,
                allLoaded: this.viewModel.allLoaded
            }));

            this.$collection = $('.' + this.collectionClass, this.$el);
            this.renderCollection(this.items);

            if (!this.viewModel.allLoaded) {
                this.renderLoadMore();
                if (this.autoPagerize) {
                    if (this.sortType === 1 /* DescendingOrder */) {
                        Blitz.BlitzLayout.delegateEvent(function () {
                            return _this.autoPaging();
                        });
                    } else {
                        Blitz.BlitzLayout.delegateEvent(function () {
                            return _this.autoPagingUp();
                        });
                    }
                }
            }
            return this;
        };

        LoadMoreCollectionView.prototype.renderLoadMore = function () {
            if (this.loadMoreViewType == 0 /* Common */) {
                return this.createLoadMoreView().$el;
            }
            if (this.loadMoreViewType == 1 /* Unit */) {
                return this.createUnitLoadMoreView().$el;
            }
            if (this.loadMoreViewType == 2 /* ListItem */) {
                return this.createListLoadMoreView().$el;
            }
        };

        LoadMoreCollectionView.prototype.createLoadMoreView = function () {
            this.loadMoreView = new SNS.LoadMoreView(this.viewModel, this.loadMoreTextKey, { selector: '.' + this.loadMoreClass, context: this.$el }).render();
            return this.loadMoreView;
        };

        LoadMoreCollectionView.prototype.createUnitLoadMoreView = function () {
            this.loadMoreView = new SNS.UnitLoadMoreView(this.viewModel, this.loadMoreTextKey, { selector: '.' + this.loadMoreClass, context: this.$el }).render();
            return this.loadMoreView;
        };

        LoadMoreCollectionView.prototype.createListLoadMoreView = function () {
            this.loadMoreView = new SNS.ListLoadMoreView(this.viewModel, this.loadMoreTextKey, { selector: '.' + this.loadMoreClass, context: this.$el }).render();
            return this.loadMoreView;
        };

        LoadMoreCollectionView.prototype.autoPaging = function () {
            if (this.$el.height() < $(window).height() + $(window).scrollTop()) {
                this.loadMoreView.loadMore();
            }
        };

        LoadMoreCollectionView.prototype.autoPagingUp = function () {
            if ($(window).scrollTop() <= 10) {
                this.loadMoreView.loadMore();
            }
        };

        LoadMoreCollectionView.prototype.addItems = function (items) {
            this.renderCollection(items);
            this.loadMoreView.stopLoading();
        };

        LoadMoreCollectionView.prototype.loadSucceed = function () {
            if (this.viewableAllItems()) {
                this.loadMoreView.loadMore();
            }
        };

        LoadMoreCollectionView.prototype.viewableAllItems = function () {
            var top = this.$collection.offset().top;
            var height = this.$collection.height();
            var position = top + height;
            return height != 0 && ($(window).height() > position);
        };
        return LoadMoreCollectionView;
    })(CollectionView);
    SNS.LoadMoreCollectionView = LoadMoreCollectionView;
})(SNS || (SNS = {}));
var Blitz;
(function (Blitz) {
    var FindFriendView = (function (_super) {
        __extends(FindFriendView, _super);
        function FindFriendView() {
            _super.call(this, {
                tagName: 'article',
                className: 'cst'
            });
            this.findFriendTemplate = new SNS.HBSTemplate('contact/find-friend.hbs');
        }
        FindFriendView.prototype.events = function () {
            return {
                'click .btn.lrg.prim': 'jumpToFindFriend'
            };
        };

        FindFriendView.prototype.render = function () {
            this.$el.append(this.findFriendTemplate.render());
            return this;
        };

        FindFriendView.prototype.jumpToFindFriend = function () {
            this.linkTo(SNS.Config.getDomains()['sns'] + '?a#view=findfriends_top');
        };
        return FindFriendView;
    })(Blitz.BlitzView);
    Blitz.FindFriendView = FindFriendView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var SelectableMemberCollectionView = (function (_super) {
        __extends(SelectableMemberCollectionView, _super);
        function SelectableMemberCollectionView(viewModel) {
            var _this = this;
            _super.call(this, viewModel, {
                tagName: 'section',
                className: 'unit'
            });
            this.viewModel = viewModel;
            this.autoPagerize = true;
            this.template = new SNS.HBSTemplate('loadmore-collection.hbs');
            viewModel.on('completed', function () {
                return _this.completed();
            });
        }
        SelectableMemberCollectionView.prototype.render = function () {
            _super.prototype.render.call(this);
            this.loadMoreView.loadMore();
            return this;
        };

        SelectableMemberCollectionView.prototype.renderLoadMore = function () {
            this.loadMoreView = new SNS.LoadMoreView(this.viewModel, this.loadMoreTextKey, { selector: '.' + this.loadMoreClass, context: this.$el, className: 'cst' }).render();
            return this.loadMoreView.$el;
        };

        SelectableMemberCollectionView.prototype.renderItem = function (item) {
            return new SelectableMemberItemView(item).render().$el;
        };

        SelectableMemberCollectionView.prototype.completed = function () {
            $('#load-more-view', this.$el).remove();

            if (this.viewModel.items.length <= 3) {
                this.$el.append(new Blitz.FindFriendView().render().$el);
                if (this.viewModel.isEmpty()) {
                    this.$collection.remove();
                }
            }
        };
        return SelectableMemberCollectionView;
    })(SNS.LoadMoreCollectionView);
    Blitz.SelectableMemberCollectionView = SelectableMemberCollectionView;

    var SelectableMemberItemView = (function (_super) {
        __extends(SelectableMemberItemView, _super);
        function SelectableMemberItemView(contact) {
            _super.call(this, {
                tagName: 'article',
                className: 'cst'
            });
            this.contact = contact;
            this.userInfoTemplate = new SNS.HBSTemplate('selectable-member-info.hbs');
        }
        SelectableMemberItemView.prototype.render = function () {
            this.$el.html(this.userInfoTemplate.render({
                'userId': this.contact.getIdentity().getValue(),
                'profileImageUrl': this.contact.profileImageUrl,
                'nickname': this.contact.getNickname(),
                'isOnline': this.contact.isOnline
            }));
            return this;
        };
        return SelectableMemberItemView;
    })(SNS.SnsView);
    Blitz.SelectableMemberItemView = SelectableMemberItemView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var SelectMemberModalView = (function (_super) {
        __extends(SelectMemberModalView, _super);
        function SelectMemberModalView(collection, items) {
            var _this = this;
            _super.call(this, items);
            this.collection = collection;
            this.messageKey = 'chat.member_select_create';
            this.modalEvents = {
                'click .cancel': 'cancel'
            };
            this.evts = {
                'click .wrapCheckbox': 'changeButtonState'
            };
            collection.on('loadFailed', function (error) {
                return _this.getListFailed(error);
            });
        }
        SelectMemberModalView.prototype.events = function () {
            return this.evts;
        };

        SelectMemberModalView.prototype.show = function () {
            this.render();
            _super.prototype.show.call(this);

            SNS.Analytics.page('chat_member_select');
            this.$sendButton = $('#modalHeader .execute');
            this.$cancelButton = $('#modalHeader .cancel');
        };

        SelectMemberModalView.prototype.render = function () {
            this.$el.html('');
            _super.prototype.render.call(this);
            this.$el.html('<div class="contr">').find('.contr').append(this.renderSelectableMemberCollection());
            this.delegateEvents();
            return this;
        };

        SelectMemberModalView.prototype.renderSelectableMemberCollection = function () {
        };

        SelectMemberModalView.prototype.changeButtonState = function () {
            var num = $('input.form_check:checked').length;
            this.$sendButton.html(Blitz.Language.getMessage(this.messageKey, { num: num }));
            if (num === 0) {
                this.disable();
            } else if (num === 1) {
                this.enable();
            }
        };

        SelectMemberModalView.prototype.enable = function () {
            this.headerView.items[2].$el.toggleClass('disabled', false);
            this.modalEvents['click .execute'] = 'execute';
            this.refreshEvents();
        };

        SelectMemberModalView.prototype.disable = function () {
            this.headerView.items[2].$el.toggleClass('disabled', true);
            delete this.modalEvents['click .execute'];
            this.refreshEvents();
        };

        SelectMemberModalView.prototype.execute = function () {
            var targetUserRefKeys = $.map($('input.form_check:checked'), function (dom) {
                return $(dom).val();
            });
            if (!this.validateBefore(targetUserRefKeys)) {
                return;
            }
            this.disable();
            this.disableCheck();
            this.doExecute(targetUserRefKeys);
        };

        SelectMemberModalView.prototype.enableCheck = function () {
            this.evts['click .wrapCheckbox'] = 'changeButtonState';
            this.delegateEvents();
        };

        SelectMemberModalView.prototype.disableCheck = function () {
            delete this.evts['click .wrapCheckbox'];
            this.delegateEvents();
        };

        SelectMemberModalView.prototype.validateBefore = function (targetUserRefKeys) {
            if (!targetUserRefKeys.length) {
                this.showAlert(Blitz.Language.getMessage('chat.dialog_content_member_select_min_member_num'));
                return false;
            }
            return true;
        };

        SelectMemberModalView.prototype.doExecute = function (userRefKeys) {
        };

        SelectMemberModalView.prototype.cancel = function () {
            this.hide();
        };

        SelectMemberModalView.prototype.getListFailed = function (error) {
            this.hide();
            this.showError(error);
        };
        return SelectMemberModalView;
    })(SNS.ModalView);
    Blitz.SelectMemberModalView = SelectMemberModalView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {


    var AddMemberModalView = (function (_super) {
        __extends(AddMemberModalView, _super);
        function AddMemberModalView(collection, items, viewModel) {
            var _this = this;
            _super.call(this, collection, items);
            this.viewModel = viewModel;
            this.messageKey = 'chat.member_select_add';
            this.conversation = viewModel.conversation;

            this.viewModel.on('addSucceed', function () {
                return _this.addSucceed();
            });
            this.viewModel.on('addFailed', function (error) {
                return _this.addFailed(error);
            });
        }
        AddMemberModalView.prototype.renderSelectableMemberCollection = function () {
            return new Blitz.SelectableMemberCollectionView(this.collection).render().$el;
        };

        AddMemberModalView.prototype.validateBefore = function (targetUserRefKeys) {
            if (!_super.prototype.validateBefore.call(this, targetUserRefKeys)) {
                return false;
            }
            var num = targetUserRefKeys.length + this.conversation.participants.length;
            if (num > Blitz.GroupConversation.MEMBER_NUM_LIMIT) {
                SNS.Analytics.event('error_addMaxMemberNum');
                new Blitz.ExceedMemberDialogView().show();
                return false;
            }
            return true;
        };

        AddMemberModalView.prototype.doExecute = function (targetUserRefKeys) {
            SNS.Analytics.event('decide_add', 'chat_member_select');
            this.viewModel.addUserByRefKey(this.conversation.getIdentity().getValue(), targetUserRefKeys);
        };

        AddMemberModalView.prototype.addSucceed = function () {
            this.hide();
        };

        AddMemberModalView.prototype.addFailed = function (error) {
            SNS.Analytics.event('error_addFailed');
            this.showError(error);
            this.enable();
            this.enableCheck();
        };
        return AddMemberModalView;
    })(Blitz.SelectMemberModalView);
    Blitz.AddMemberModalView = AddMemberModalView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatOptionView = (function (_super) {
        __extends(ChatOptionView, _super);
        function ChatOptionView(viewModel) {
            var _this = this;
            _super.call(this, {
                tagName: 'section',
                className: 'optionArea'
            });
            this.viewModel = viewModel;
            this.receiveEvents = {
                'click #addFriendOption': 'addFriendOption',
                'click #groupSetting': 'jumpToGroupSetting',
                'click #leaveConversationOption': 'leaveConversationOption',
                'click #notification': 'toggleNotificationStatus'
            };

            if (viewModel.conversation.isOneOnOne()) {
                this.optionTemplate = new SNS.HBSTemplate('chat/view/option-1on1.hbs');
            } else {
                this.optionTemplate = new SNS.HBSTemplate('chat/view/option.hbs');
            }
            this.viewModel.on('addSucceed', function (event) {
                return _this.addSucceed(event);
            });
            this.viewModel.on('userAddedEvent', function (event) {
                return _this.updateConversation(event);
            });
            this.viewModel.on('userLeftEvent', function (event) {
                return _this.updateConversation(event);
            });
            if (!viewModel.conversation.isMyConversation()) {
                this.suspendNotificationSettingBtn();
                this.viewModel.on('pulledNotification', function (notificationSettingStatus) {
                    _this.notificationSettingStatus = notificationSettingStatus;
                    _this.removeIndicatorInNotificationSettingBtn();
                    _this.toggleNotificationSettingBtn();
                    _this.resumeNotificationSettingBtn();
                });
                this.viewModel.on('pulledNotificationFailed', function (error) {
                    _this.removeIndicatorInNotificationSettingBtn();
                    _this.toggleNotificationSettingBtn();
                    _this.resumeNotificationSettingBtn();
                    _this.showError(error);
                });
            }

            this.$el.click(function (event) {
                if (!$(event.target).is('.notificationSettingElement')) {
                    _this.hide();
                }
            });

            this.conversation = _.clone(this.viewModel.eventCollection.conversation);
        }
        ChatOptionView.prototype.refreshEvents = function () {
            var _this = this;
            this.events = function () {
                return _this.receiveEvents;
            };
            this.delegateEvents();
        };

        ChatOptionView.prototype.render = function () {
            this.$el.append(this.optionTemplate.render());
            this.$notificationSettingBtn = $('#notificationSetting', this.$el);
            this.disabledNotificationSettingView();
            this.delegateEvents(this.receiveEvents);
            return this;
        };

        ChatOptionView.prototype.hide = function () {
            this.$el.hide();
        };

        ChatOptionView.prototype.addFriendOption = function () {
            SNS.Analytics.event('add_member');
            var collection = new Blitz.SelectableContactCollection(this.conversation);
            var modalItems = { items: [
                    SNS.ModalItem.button5(Blitz.Language.getMessage('chat.cancel'), { cssClass: 'cancel' }),
                    SNS.ModalItem.title(Blitz.Language.getMessage('chat.member_select_title')),
                    SNS.ModalItem.button5(Blitz.Language.getMessage('chat.member_select_add', { num: 0 }), { cssClass: 'execute disabled', primary: true })
                ] };
            this.modalView = new Blitz.AddMemberModalView(collection, modalItems, this.viewModel);
            this.modalView.show();
        };

        ChatOptionView.prototype.disabledNotificationSettingView = function () {
            this.$notificationSettingBtn.toggleClass('disabled', true);
        };

        ChatOptionView.prototype.currentNotificationSettingBtnClassName = function () {
            if (this.notificationSettingStatus) {
                return 'ia24_option_bell_off';
            } else {
                return 'ia24_option_bell_on';
            }
        };

        ChatOptionView.prototype.toggleNotificationSettingBtn = function () {
            var addClass = 'ia24_option_bell_on';
            var text = Blitz.Language.getMessage('chat.conversation_option_notify_on');
            if (this.notificationSettingStatus) {
                addClass = 'ia24_option_bell_off';
                text = Blitz.Language.getMessage('chat.conversation_option_notify_off');
            }
            var removeClass = this.currentNotificationSettingBtnClassName();
            this.$notificationSettingBtn.removeClass(removeClass);
            this.$notificationSettingBtn.addClass(addClass);
            this.$notificationSettingBtn.next('.txt').html(text);
        };

        ChatOptionView.prototype.toggleNotificationIcon = function () {
            this.viewModel.emit('toggleNotification', this.notificationSettingStatus);
        };

        ChatOptionView.prototype.showNotificationSettingBtn = function () {
            this.$notificationSettingBtn.addClass(this.currentNotificationSettingBtnClassName());
        };

        ChatOptionView.prototype.showIndicatorInNotificationSettingBtn = function () {
            this.$notificationSettingBtn.removeClass(this.currentNotificationSettingBtnClassName());
            this.$notificationSettingBtn.addClass('throb24');
        };

        ChatOptionView.prototype.removeIndicatorInNotificationSettingBtn = function () {
            this.$notificationSettingBtn.removeClass('throb24');
        };

        ChatOptionView.prototype.suspendNotificationSettingBtn = function () {
            delete this.receiveEvents['click #notification'];
            this.refreshEvents();
        };

        ChatOptionView.prototype.resumeNotificationSettingBtn = function () {
            this.receiveEvents['click #notification'] = 'toggleNotificationStatus';
            this.refreshEvents();
        };

        ChatOptionView.prototype.updateNotificationSettingFailed = function (error) {
            SNS.Analytics.event('error_updateNotificationSettingFailed');
            this.showError(error);
        };

        ChatOptionView.prototype.toggleNotificationStatus = function () {
            var _this = this;
            SNS.Analytics.event('toggle_notification_status');
            this.suspendNotificationSettingBtn();
            this.showIndicatorInNotificationSettingBtn();
            var nextStatus = !this.notificationSettingStatus;
            var future = this.viewModel.updateNotificationSetting(this.conversation.getIdentity(), nextStatus);
            future.onSuccess(function (updatedNotificationStatus) {
                _this.notificationSettingStatus = updatedNotificationStatus;
                _this.removeIndicatorInNotificationSettingBtn();
                _this.toggleNotificationSettingBtn();
                _this.toggleNotificationIcon();
                _this.resumeNotificationSettingBtn();
            });
            future.onFailure(function (error) {
                _this.resumeNotificationSettingBtn();
                _this.removeIndicatorInNotificationSettingBtn();
                _this.showNotificationSettingBtn();
                _this.updateNotificationSettingFailed(error);
            });
        };

        ChatOptionView.prototype.jumpToGroupSetting = function () {
            this.linkTo('chat#view=chat_group_settings&id=' + this.conversation.getIdentity().getValue());
        };

        ChatOptionView.prototype.leaveConversationOption = function () {
            SNS.Analytics.event('leave_raise');
            this.leaveDialog = new Blitz.LeaveConfirmDialogView(this.viewModel);
            this.leaveDialog.show();
        };

        ChatOptionView.prototype.addSucceed = function (event) {
            this.updateConversation(event);
        };

        ChatOptionView.prototype.updateConversation = function (event) {
            var _this = this;
            var conversationRepository = Blitz.ConversationRepository.ofApi(app.cobit);
            var future = conversationRepository.getConversationFromApi(event.getToConversationId());
            future.onSuccess(function (conversation) {
                _this.conversation = conversation;
            });
        };
        return ChatOptionView;
    })(Blitz.BlitzView);
    Blitz.ChatOptionView = ChatOptionView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatHeaderView = (function (_super) {
        __extends(ChatHeaderView, _super);
        function ChatHeaderView(viewModel, conversation, backBtnUid) {
            var _this = this;
            _super.call(this);
            this.viewModel = viewModel;
            this.conversation = conversation;
            this.backBtnUid = backBtnUid;
            this.$commonHeader = $('#greeCommonHeader');
            this.$subHeader = $('#subHeader');
            this.template = new SNS.HBSTemplate('modal-header.hbs');
            var modalItems = [
                SNS.ModalItem.button2(Blitz.Language.getMessage('chat.back'), { cssClass: 'back-' + backBtnUid })
            ];

            if (conversation.isGroup()) {
                modalItems.push(SNS.ModalItem.title(this.getConversationName(), { cssClass: 'js-link-group-setting' }));
                modalItems.push(SNS.ModalItem.icon(this.conversation.participants.length + '', 'participant-num', { cssClass: 'js-link-group-setting' }));
                modalItems.push(SNS.ModalItem.buttonOption({ cssClass: 'option' }));
                this.listenPulledNotificationEvent();
            } else if (conversation.isOneOnOne()) {
                modalItems.push(SNS.ModalItem.title(this.getConversationName(), { cssClass: 'js-link-profile-dialog' }));
                modalItems.push(SNS.ModalItem.buttonOption({ cssClass: 'option' }));
                this.listenPulledNotificationEvent();
            } else {
                modalItems.push(SNS.ModalItem.title(this.getConversationName()));
                modalItems.push(SNS.ModalItem.dummyButton2());
            }

            if (!viewModel.conversation.isMyConversation()) {
                this.viewModel.on('toggleNotification', function (notificationSettingStatus) {
                    return _this.toggleNotificationIcon(notificationSettingStatus);
                });
            }

            this.items = modalItems;
        }
        ChatHeaderView.prototype.show = function () {
            this.$el = this.$subHeader.show();
            this.$commonHeader.hide();
            this.render();
        };

        ChatHeaderView.prototype.hide = function () {
            this.undelegateAll();
            this.$subHeader.hide();
            this.$commonHeader.show();
        };

        ChatHeaderView.prototype.render = function () {
            this.$el.html(this.template.render({}));
            for (var i = 0, l = this.items.length; i < l; i++) {
                $('.mdl', this.$el).append(Blitz.$item(this.items[i]));
            }
            this.delegateEvents();
            return this;
        };

        ChatHeaderView.prototype.listenPulledNotificationEvent = function () {
            var _this = this;
            this.viewModel.on('pulledNotification', function (notificationSettingStatus) {
                var optionView = _this.$el.find('.option').parent();
                Blitz.$item(SNS.ModalItem.notificationIcon('ia18_minor_bell_off')).insertBefore(optionView);
                _this.toggleNotificationIcon(notificationSettingStatus);
            });
        };

        ChatHeaderView.prototype.toggleNotificationIcon = function (notificationSettingStatus) {
            var $notificationIcon = $('#notificationIcon');
            if (notificationSettingStatus) {
                $notificationIcon.hide();
            } else {
                $notificationIcon.show();
            }
        };

        ChatHeaderView.prototype.setConversationName = function (name) {
            this.$el.find('.mdlTtl').html((new Util.Text(name)).escape().convertEmoji().disableATag().text);
        };

        ChatHeaderView.prototype.getConversationName = function () {
            switch (this.conversation.getConversationType()) {
                case 0 /* Group */:
                    if (this.conversation.name) {
                        return (new Util.Text(this.conversation.name)).escape().convertEmoji().disableATag().text;
                    }
                    return this.getFormattedGroupConversationNameElement(this.conversation.participants);
                case 1 /* OneOnOne */:
                    return this.getFormattedNameElement(this.conversation.getTargetUser().getIdentity().getValue());
                case 3 /* My */:
                    return Blitz.Language.getMessage('chat.mychat');
                default:
                    return '';
            }
        };
        return ChatHeaderView;
    })(Blitz.BlitzView);
    Blitz.ChatHeaderView = ChatHeaderView;

    var NotificationHeaderView = (function (_super) {
        __extends(NotificationHeaderView, _super);
        function NotificationHeaderView(conversationEvent) {
            _super.call(this, {
                className: 'ntfBrd brdT tap',
                tagName: 'aside'
            });
            this.template = new SNS.HBSTemplate('chat/view/new-message-notification-header.hbs');
            this.conversationId = conversationEvent.conversationIdentity.getValue();
        }
        NotificationHeaderView.prototype.events = function () {
            return {};
        };

        NotificationHeaderView.prototype.render = function () {
            this.$el.append(this.template.render());
            this.delegateEvents();
            return this;
        };
        return NotificationHeaderView;
    })(Blitz.BlitzView);
    Blitz.NotificationHeaderView = NotificationHeaderView;

    var NotificationFooterView = (function (_super) {
        __extends(NotificationFooterView, _super);
        function NotificationFooterView(eventItemView) {
            _super.call(this, {
                className: 'ntfBrd tap',
                tagName: 'aside'
            });
            this.eventItemView = eventItemView;
            this.template = new SNS.HBSTemplate('chat/view/new-message-notification-footer.hbs');
        }
        NotificationFooterView.prototype.events = function () {
            return {
                'click .tap': this.scrollToEnd
            };
        };

        NotificationFooterView.prototype.render = function () {
            this.$el.append(this.template.render({
                'senderName': this.getFormattedNameElement(this.eventItemView.getEvent().sender.getIdentity().getValue()),
                'message': this.eventItemView.getEventMessage()
            }));
            this.delegateEvents();
            return this;
        };

        NotificationFooterView.prototype.scrollToEnd = function () {
            SNS.Analytics.event('notify_self');
            scrollBy(0, document.documentElement.offsetHeight);
            this.$el.remove();

            var event;
            var conversationIdentity;
            if (this.eventItemView instanceof Blitz.MessageItemView) {
                event = this.eventItemView.getEvent();
                conversationIdentity = event.conversationIdentity;
                Blitz.EventService.ofApi(app.cobit).readPastAllMessages(conversationIdentity);
            }
        };
        return NotificationFooterView;
    })(Blitz.BlitzView);
    Blitz.NotificationFooterView = NotificationFooterView;

    Blitz.$item = function (item) {
        var parent = $('<div>');
        for (var i = 0, l = item.cssClasses.length; i < l; i++) {
            parent.addClass(item.cssClasses[i]);
        }
        return parent.append(item.$el);
    };

    Blitz.mapHeaderEvents = function (headerEvents, context) {
        var mapped = {};
        for (var key in headerEvents) {
            mapped[key] = $.proxy(context[headerEvents[key]], context);
        }
        return mapped;
    };
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (Emoji) {
        var enableLocalstorage = (function () {
            try  {
                localStorage.setItem('k', 'v');
                localStorage.removeItem('k');
            } catch (e) {
                return false;
            }
            return true;
        })();
        var history;

        Emoji.xBackspace = function (text) {
            if (text.substr(-1) === '>') {
                return deleteLastEmoji(text);
            } else {
                return text.substring(0, text.length - 1);
            }
        };

        var deleteLastEmoji = function (text) {
            var start = text.substring(0, text.length - 1).lastIndexOf('<emoji id=');
            if (start >= 0) {
                return text.substring(0, start);
            } else {
                return text.substring(0, text.length - 1);
            }
        };

        var emojiStorageKey = 'gree_emoji_history';

        Emoji.pushHistory = function (emojiId) {
            var emojiHistory = _.reject(Emoji.getHistory(), function (id) {
                return emojiId == id;
            });
            emojiHistory.unshift(emojiId);
            return Emoji.storeHistory(emojiHistory.slice(0, 17));
        };

        Emoji.storeHistory = function (emojiHistory) {
            if (enableLocalstorage) {
                localStorage.setItem(emojiStorageKey, emojiHistory.join(','));
            } else {
                history = emojiHistory;
            }
            return emojiHistory;
        };

        Emoji.getHistory = function () {
            if (enableLocalstorage) {
                var items = localStorage.getItem(emojiStorageKey);
                return items ? items.split(',') : [];
            } else {
                return history;
            }
        };

        Emoji.emojiIdToTag = function (id) {
            return '<emoji id="' + id.match(/e([0-9]+)/)[1] + '">';
        };

        Emoji.softbankMap = {
            "\ud83d\udc66": "\ue001",
            "\ud83d\udc67": "\ue002",
            "\ud83d\udc8b": "\ue003",
            "\ud83d\udc68": "\ue004",
            "\ud83d\udc69": "\ue005",
            "\ud83d\udc55": "\ue006",
            "\ud83d\udc5f": "\ue007",
            "\ud83d\udcf7": "\ue008",
            "\u260e": "\ue009",
            "\ud83d\udcf1": "\ue00a",
            "\ud83d\udce0": "\ue00b",
            "\ud83d\udcbb": "\ue00c",
            "\ud83d\udc4a": "\ue00d",
            "\ud83d\udc4d": "\ue00e",
            "\u261d": "\ue00f",
            "\u270a": "\ue010",
            "\u270c": "\ue011",
            "\u270b": "\ue012",
            "\ud83c\udfbf": "\ue013",
            "\u26f3": "\ue014",
            "\ud83c\udfbe": "\ue015",
            "\u26be": "\ue016",
            "\ud83c\udfc4": "\ue017",
            "\u26bd": "\ue018",
            "\ud83d\udc1f": "\ue019",
            "\ud83d\udc34": "\ue01a",
            "\ud83d\ude95": "\ue15a",
            "\u2708": "\ue01d",
            "\ud83d\ude80": "\ue10d",
            "\ud83d\ude89": "\ue039",
            "\ud83c\udfab": "\ue125",
            "\u2764": "\ue022",
            "\ud83d\udc94": "\ue023",
            "\ud83d\udd2f": "\ue23e",
            "\ud83c\udd70": "\ue532",
            "\ud83c\udd71": "\ue533",
            "\ud83c\udd8e": "\ue534",
            "\ud83c\udd7e": "\ue535",
            "\ud83d\udd32": "\ue21a",
            "\ud83d\udd34": "\ue219",
            "\ud83d\udd33": "\ue21b",
            "\ud83d\udd5b": "\ue02f",
            "\ud83d\udd50": "\ue024",
            "\ud83d\udd51": "\ue025",
            "\u26ce": "\ue24b",
            "\ud83c\udf38": "\ue030",
            "\ud83d\udd31": "\ue031",
            "\ud83c\udf39": "\ue032",
            "\ud83c\udf84": "\ue033",
            "\ud83d\udc8d": "\ue034",
            "\ud83d\udc8e": "\ue035",
            "\ud83c\udfe0": "\ue036",
            "\u26ea": "\ue037",
            "\ud83c\udfe2": "\ue038",
            "\ud83d\ude84": "\ue435",
            "\ud83d\udea5": "\ue14e",
            "\ud83c\udf04": "\ue04d",
            "\ud83c\udfa4": "\ue03c",
            "\ud83c\udfa5": "\ue03d",
            "\ud83c\udfb5": "\ue03e",
            "\ud83d\udd11": "\ue03f",
            "\ud83c\udfb7": "\ue040",
            "\ud83c\udfb8": "\ue041",
            "\ud83c\udfba": "\ue042",
            "\ud83c\udf74": "\ue043",
            "\ud83c\udf78": "\ue044",
            "\u2615": "\ue045",
            "\ud83c\udf70": "\ue046",
            "\ud83c\udf7a": "\ue047",
            "\u26c4": "\ue048",
            "\u2601": "\ue049",
            "\u2600": "\ue04a",
            "\u2614": "\ue04b",
            "\ud83c\udf19": "\ue04c",
            "\ud83c\udf05": "\ue449",
            "\ud83d\udc7c": "\ue04e",
            "\ud83d\udc31": "\ue04f",
            "\ud83d\udc2f": "\ue050",
            "\ud83d\udc3b": "\ue051",
            "\ud83d\udc36": "\ue052",
            "\ud83d\udc2d": "\ue053",
            "\ud83d\udc33": "\ue054",
            "\ud83d\udc27": "\ue055",
            "\ud83d\ude0a": "\ue056",
            "\ud83d\ude03": "\ue057",
            "\ud83d\ude1e": "\ue058",
            "\ud83d\ude20": "\ue059",
            "\ud83d\udca9": "\ue05a",
            "\ud83d\udceb": "\ue101",
            "\ud83d\udcee": "\ue102",
            "\ud83d\udce9": "\ue103",
            "\ud83d\udcf2": "\ue104",
            "\ud83d\ude1c": "\ue105",
            "\ud83d\ude0d": "\ue106",
            "\ud83d\ude31": "\ue107",
            "\ud83d\ude13": "\ue108",
            "\ud83d\udc35": "\ue109",
            "\ud83d\udc19": "\ue10a",
            "\ud83d\udc37": "\ue10b",
            "\ud83d\udc7d": "\ue10c",
            "\ud83d\udeb2": "\ue136",
            "\ud83d\udc51": "\ue10e",
            "\ud83d\udca1": "\ue10f",
            "\ud83c\udf40": "\ue110",
            "\ud83d\udc8f": "\ue111",
            "\ud83c\udf81": "\ue112",
            "\ud83d\udd2b": "\ue113",
            "\ud83d\udd0d": "\ue114",
            "\ud83c\udfc3": "\ue115",
            "\ud83d\udd28": "\ue116",
            "\ud83c\udf86": "\ue117",
            "\ud83c\udf41": "\ue118",
            "\ud83c\udf42": "\ue119",
            "\ud83d\udc7f": "\ue11a",
            "\ud83d\udc7b": "\ue11b",
            "\ud83d\udc80": "\ue11c",
            "\ud83d\udd25": "\ue11d",
            "\ud83d\udcbc": "\ue11e",
            "\ud83d\udcba": "\ue11f",
            "\ud83c\udf54": "\ue120",
            "\ud83c\udfa1": "\ue124",
            "\ud83c\udfed": "\ue508",
            "\ud83c\udfc1": "\ue132",
            "\ud83c\udfa2": "\ue433",
            "\u26fd": "\ue03a",
            "\ud83d\udcbf": "\ue126",
            "\ud83d\udcc0": "\ue127",
            "\ud83d\udcfb": "\ue128",
            "\ud83d\udcfc": "\ue129",
            "\ud83d\udcfa": "\ue12a",
            "\ud83d\udc7e": "\ue12b",
            "\u303d": "\ue12c",
            "\ud83c\udc04": "\ue12d",
            "\ud83d\ude87": "\ue434",
            "\ud83d\udcb0": "\ue12f",
            "\ud83c\udfaf": "\ue130",
            "\ud83c\udfc6": "\ue131",
            "\ud83c\udf8c": "\ue143",
            "\ud83d\ude8f": "\ue150",
            "\ud83d\udc0e": "\ue134",
            "\u26f5": "\ue01c",
            "\ud83d\ude99": "\ue42e",
            "\ud83c\udfe7": "\ue154",
            "\ud83c\ude39": "\ue227",
            "\ud83c\ude2f": "\ue22c",
            "\ud83c\ude3a": "\ue22d",
            "\ud83d\udc89": "\ue13b",
            "\ud83d\udca4": "\ue13c",
            "\u26a1": "\ue13d",
            "\ud83d\udc60": "\ue13e",
            "\ud83d\udec0": "\ue13f",
            "\ud83d\udebd": "\ue140",
            "\ud83d\udd0a": "\ue141",
            "\ud83d\udce2": "\ue142",
            "\ud83d\udd12": "\ue144",
            "\ud83d\udd13": "\ue145",
            "\ud83c\udf06": "\ue146",
            "\ud83c\udf73": "\ue147",
            "\ud83d\udcd6": "\ue148",
            "\ud83d\udd1e": "\ue207",
            "\u3297": "\ue30d",
            "\ud83d\udce1": "\ue14b",
            "\ud83d\udcaa": "\ue14c",
            "\ud83c\udfe6": "\ue14d",
            "\u26a0": "\ue252",
            "\ud83c\ude1a": "\ue216",
            "\u2668": "\ue123",
            "\ud83d\udc87": "\ue31f",
            "\ud83c\ude50": "\ue226",
            "\ud83d\udc6e": "\ue152",
            "\ud83c\udfe3": "\ue153",
            "\ud83c\udfb0": "\ue133",
            "\ud83c\udfe5": "\ue155",
            "\ud83c\udfea": "\ue156",
            "\ud83c\udfeb": "\ue157",
            "\ud83c\udfe8": "\ue158",
            "\ud83d\ude92": "\ue430",
            "\ud83d\ude8c": "\ue159",
            "\ud83d\udeb6": "\ue201",
            "\ud83d\udea4": "\ue135",
            "\u25b6": "\ue23a",
            "\u267f": "\ue20a",
            "\ud83c\udd7f": "\ue14f",
            "\ud83d\udead": "\ue208",
            "\ud83d\udd30": "\ue209",
            "\ud83d\udeba": "\ue139",
            "\ud83c\ude36": "\ue215",
            "\ud83c\ude37": "\ue217",
            "\u23ea": "\ue23d",
            "\u2665": "\ue20c",
            "\u2666": "\ue20d",
            "\u2660": "\ue20e",
            "\u2663": "\ue20f",
            "\u27bf": "\ue211",
            "\u27a1": "\ue234",
            "\u2198": "\ue238",
            "\u2199": "\ue239",
            "\ud83c\udfa6": "\ue507",
            "\ud83c\ude01": "\ue203",
            "\ud83d\udcf6": "\ue20b",
            "\ud83c\ude35": "\ue22a",
            "\u2652": "\ue249",
            "\u2651": "\ue248",
            "\u2653": "\ue24a",
            "\ud83c\udd95": "\ue212",
            "\ud83d\udd1d": "\ue24c",
            "\ud83c\ude33": "\ue22b",
            "\ud83d\udebc": "\ue13a",
            "\u23e9": "\ue23c",
            "\ud83c\udd97": "\ue24d",
            "\ud83c\udd99": "\ue213",
            "\ud83c\udd92": "\ue214",
            "\ud83d\udc46": "\ue22e",
            "\ud83d\udc47": "\ue22f",
            "\ud83d\udc48": "\ue230",
            "\ud83d\udc49": "\ue231",
            "\u2b06": "\ue232",
            "\u2b05": "\ue235",
            "\u2b07": "\ue233",
            "\u264c": "\ue243",
            "\ud83c\udd94": "\ue229",
            "\u2733": "\ue206",
            "\u2734": "\ue205",
            "\ud83d\udc9f": "\ue204",
            "\ud83c\udd9a": "\ue12e",
            "\ud83d\udcf3": "\ue250",
            "\ud83d\udcf4": "\ue251",
            "\ud83d\udcb9": "\ue14a",
            "\ud83d\udcb1": "\ue149",
            "\u2648": "\ue23f",
            "\u2649": "\ue240",
            "\u264a": "\ue241",
            "\u264b": "\ue242",
            "\u2196": "\ue237",
            "\u2197": "\ue236",
            "\ud83d\udebe": "\ue309",
            "\u3299": "\ue315",
            "\ud83d\udea7": "\ue137",
            "\ud83d\udc81": "\ue253",
            "\ud83d\udcdd": "\ue301",
            "\ud83d\udc54": "\ue302",
            "\ud83c\udf3a": "\ue303",
            "\ud83c\udf37": "\ue304",
            "\ud83c\udf3b": "\ue305",
            "\ud83d\udc90": "\ue306",
            "\ud83c\udf34": "\ue307",
            "\ud83c\udf35": "\ue308",
            "\ud83c\ude02": "\ue228",
            "\ud83c\udfa7": "\ue30a",
            "\ud83c\udf76": "\ue30b",
            "\ud83c\udf7b": "\ue30c",
            "\ud83d\udeb9": "\ue138",
            "\ud83d\udeac": "\ue30e",
            "\ud83d\udc8a": "\ue30f",
            "\ud83c\udf88": "\ue310",
            "\ud83d\udca3": "\ue311",
            "\ud83c\udf89": "\ue312",
            "\u2702": "\ue313",
            "\ud83c\udf80": "\ue314",
            "\ud83d\udebb": "\ue151",
            "\ud83d\udcbd": "\ue316",
            "\ud83d\udce3": "\ue317",
            "\ud83d\udc52": "\ue318",
            "\ud83d\udc57": "\ue319",
            "\ud83d\udc61": "\ue31a",
            "\ud83d\udc62": "\ue31b",
            "\ud83d\udc84": "\ue31c",
            "\ud83d\udc85": "\ue31d",
            "\ud83d\udc86": "\ue31e",
            "\ud83d\udc88": "\ue320",
            "\ud83d\udc58": "\ue321",
            "\ud83d\udc59": "\ue322",
            "\ud83d\udc5c": "\ue323",
            "\ud83c\udfac": "\ue324",
            "\ud83d\udd14": "\ue325",
            "\ud83c\udfb6": "\ue326",
            "\ud83d\udc93": "\ue327",
            "\ud83d\udc97": "\ue328",
            "\ud83d\udc98": "\ue329",
            "\ud83d\udc99": "\ue32a",
            "\ud83d\udc9a": "\ue32b",
            "\ud83d\udc9b": "\ue32c",
            "\ud83d\udc9c": "\ue32d",
            "\u2728": "\ue32e",
            "\ud83d\udca8": "\ue330",
            "\ud83d\udca6": "\ue331",
            "\ud83d\udd52": "\ue026",
            "\ud83d\udd53": "\ue027",
            "\ud83d\udca2": "\ue334",
            "\ud83c\udf1f": "\ue335",
            "\u2754": "\ue336",
            "\u2755": "\ue337",
            "\ud83c\udf75": "\ue338",
            "\ud83c\udf5e": "\ue339",
            "\ud83c\udf66": "\ue33a",
            "\ud83c\udf5f": "\ue33b",
            "\ud83c\udf61": "\ue33c",
            "\ud83c\udf58": "\ue33d",
            "\ud83c\udf5a": "\ue33e",
            "\ud83c\udf5d": "\ue33f",
            "\ud83c\udf5c": "\ue340",
            "\ud83c\udf5b": "\ue341",
            "\ud83c\udf59": "\ue342",
            "\ud83c\udf62": "\ue343",
            "\ud83c\udf63": "\ue344",
            "\ud83c\udf4e": "\ue345",
            "\ud83c\udf4a": "\ue346",
            "\ud83c\udf53": "\ue347",
            "\ud83c\udf49": "\ue348",
            "\ud83c\udf45": "\ue349",
            "\ud83c\udf46": "\ue34a",
            "\ud83c\udf82": "\ue34b",
            "\ud83c\udf71": "\ue34c",
            "\ud83c\udf72": "\ue34d",
            "\ud83d\ude25": "\ue401",
            "\ud83d\ude0f": "\ue402",
            "\ud83d\ude14": "\ue403",
            "\ud83d\ude01": "\ue404",
            "\ud83d\ude09": "\ue405",
            "\ud83d\ude23": "\ue406",
            "\ud83d\ude16": "\ue407",
            "\ud83d\ude2a": "\ue408",
            "\ud83d\ude1d": "\ue409",
            "\ud83d\ude0c": "\ue40a",
            "\ud83d\ude28": "\ue40b",
            "\ud83d\ude37": "\ue40c",
            "\ud83d\ude33": "\ue40d",
            "\ud83d\ude12": "\ue40e",
            "\ud83d\ude30": "\ue40f",
            "\ud83d\ude32": "\ue410",
            "\ud83d\ude2d": "\ue411",
            "\ud83d\ude02": "\ue412",
            "\ud83d\ude22": "\ue413",
            "\u263a": "\ue414",
            "\ud83d\ude04": "\ue415",
            "\ud83d\ude21": "\ue416",
            "\ud83d\ude1a": "\ue417",
            "\ud83d\ude18": "\ue418",
            "\ud83d\udc40": "\ue419",
            "\ud83d\udc43": "\ue41a",
            "\ud83d\udc42": "\ue41b",
            "\ud83d\udc44": "\ue41c",
            "\ud83d\ude4f": "\ue41d",
            "\ud83d\udc4b": "\ue41e",
            "\ud83d\udc4f": "\ue41f",
            "\ud83d\udc4c": "\ue420",
            "\ud83d\udc4e": "\ue421",
            "\ud83d\udc50": "\ue422",
            "\ud83d\ude45": "\ue423",
            "\ud83d\ude46": "\ue424",
            "\ud83d\udc91": "\ue425",
            "\ud83d\ude47": "\ue426",
            "\ud83d\ude4c": "\ue427",
            "\ud83d\udc6b": "\ue428",
            "\ud83d\udc6f": "\ue429",
            "\ud83c\udfc0": "\ue42a",
            "\ud83c\udfc8": "\ue42b",
            "\ud83c\udfb1": "\ue42c",
            "\ud83c\udfca": "\ue42d",
            "\ud83d\ude97": "\ue01b",
            "\ud83d\ude83": "\ue01e",
            "\ud83d\ude91": "\ue431",
            "\ud83d\ude9a": "\ue42f",
            "\ud83d\ude93": "\ue432",
            "\ud83d\udea2": "\ue202",
            "\ud83c\ude38": "\ue218",
            "\ud83d\ude85": "\ue01f",
            "\ud83c\udf8d": "\ue436",
            "\ud83d\udc9d": "\ue437",
            "\ud83c\udf8e": "\ue438",
            "\ud83c\udf93": "\ue439",
            "\ud83c\udf92": "\ue43a",
            "\ud83c\udf8f": "\ue43b",
            "\ud83c\udf02": "\ue43c",
            "\ud83d\udc92": "\ue43d",
            "\ud83c\udf0a": "\ue43e",
            "\ud83c\udf67": "\ue43f",
            "\ud83c\udf87": "\ue440",
            "\ud83d\udc1a": "\ue441",
            "\ud83c\udf90": "\ue442",
            "\ud83c\udf00": "\ue443",
            "\ud83c\udf3e": "\ue444",
            "\ud83c\udf83": "\ue445",
            "\ud83c\udf91": "\ue446",
            "\ud83c\udf43": "\ue447",
            "\ud83c\udf85": "\ue448",
            "\ud83c\udf03": "\ue44b",
            "\ud83c\udf07": "\ue44a",
            "\ud83d\uddfd": "\ue51d",
            "\u26f2": "\ue121",
            "\ud83c\udfe9": "\ue501",
            "\ud83c\udfa8": "\ue502",
            "\ud83c\udfa9": "\ue503",
            "\ud83c\udfec": "\ue504",
            "\ud83c\udff0": "\ue506",
            "\u26fa": "\ue122",
            "\u25c0": "\ue23b",
            "\ud83d\uddfc": "\ue509",
            "\ud83d\uddfb": "\ue03b",
            "\ud83c\udfef": "\ue505",
            "\ud83d\udc71": "\ue515",
            "\ud83d\udc72": "\ue516",
            "\ud83d\udc73": "\ue517",
            "\ud83d\udc74": "\ue518",
            "\ud83d\udc75": "\ue519",
            "\ud83d\udc76": "\ue51a",
            "\ud83d\udc77": "\ue51b",
            "\ud83d\udc78": "\ue51c",
            "\ud83c\udf08": "\ue44c",
            "\ud83d\udc82": "\ue51e",
            "\ud83d\udc83": "\ue51f",
            "\ud83d\udc2c": "\ue520",
            "\ud83d\udc26": "\ue521",
            "\ud83d\udc20": "\ue522",
            "\ud83d\udc24": "\ue523",
            "\ud83d\udc39": "\ue524",
            "\ud83d\udc1b": "\ue525",
            "\ud83d\udc18": "\ue526",
            "\ud83d\udc28": "\ue527",
            "\ud83d\udc12": "\ue528",
            "\ud83d\udc11": "\ue529",
            "\ud83d\udc3a": "\ue52a",
            "\ud83d\udc2e": "\ue52b",
            "\ud83d\udc30": "\ue52c",
            "\ud83d\udc0d": "\ue52d",
            "\ud83d\udc14": "\ue52e",
            "\ud83d\udc17": "\ue52f",
            "\ud83d\udc2b": "\ue530",
            "\ud83d\udc38": "\ue531",
            "\u264d": "\ue244",
            "\u264e": "\ue245",
            "\u264f": "\ue246",
            "\u2650": "\ue247",
            "\ud83d\udc63": "\ue536",
            "\u2b55": "\ue332",
            "\u274c": "\ue333",
            "\ud83d\udd54": "\ue028",
            "\ud83d\udd55": "\ue029",
            "\ud83d\udd56": "\ue02a",
            "\ud83d\udd57": "\ue02b",
            "\ud83d\udd58": "\ue02c",
            "\ud83d\udd59": "\ue02d",
            "\ud83d\udd5a": "\ue02e"
        };

        Emoji.greeEmoji = {
            '1': [],
            '2': [
                { id: 'e4', name: 'lol' },
                { id: 'e1', name: 'smile' },
                { id: 'e2', name: 'wink' },
                { id: 'e12', name: 'inlove' },
                { id: 'e43', name: '-' },
                { id: 'e3', name: 'joke' },
                { id: 'e11', name: 'sad' },
                { id: 'e44', name: 'wut' },
                { id: 'e7', name: 'noes' },
                { id: 'e5', name: 'tear' },
                { id: 'e6', name: 'cry' },
                { id: 'e274', name: 'uhoh' },
                { id: 'e278', name: '-' },
                { id: 'e235', name: 'pain' },
                { id: 'e14', name: 'arg' },
                { id: 'e236', name: '-' },
                { id: 'e10', name: '-' },
                { id: 'e8', name: 'mad' },
                { id: 'e9', name: 'furious' },
                { id: 'e371', name: 'sick' },
                { id: 'e303', name: 'reallysick' },
                { id: 'e368', name: 'demon' },
                { id: 'e13', name: 'wow' },
                { id: 'e302', name: 'smirk' },
                { id: 'e375', name: 'policeman' },
                { id: 'e376', name: '-' },
                { id: 'e127', name: 'baby' },
                { id: 'e372', name: 'man' },
                { id: 'e373', name: 'grandpa' },
                { id: 'e374', name: 'grandma' },
                { id: 'e367', name: 'angel' },
                { id: 'e369', name: 'princess' },
                { id: 'e377', name: 'oni' },
                { id: 'e344', name: 'monkeyblind' },
                { id: 'e345', name: 'monkeydeaf' },
                { id: 'e343', name: 'monkeymute' },
                { id: 'e305', name: 'alien' },
                { id: 'e138', name: 'poop' },
                { id: 'e311', name: 'fire' },
                { id: 'e26', name: 'sparkle' },
                { id: 'e46', name: 'shootingstar' },
                { id: 'e27', name: 'piki' },
                { id: 'e24', name: 'sweat' },
                { id: 'e23', name: 'sweatmark' },
                { id: 'e31', name: 'zzz' },
                { id: 'e242', name: 'dash' },
                { id: 'e29', name: 'ear' },
                { id: 'e214', name: 'eyes' },
                { id: 'e30', name: 'nose' },
                { id: 'e199', name: 'tongue' },
                { id: 'e21', name: 'lips' },
                { id: 'e16', name: 'ok' },
                { id: 'e237', name: 'fist' },
                { id: 'e215', name: 'power' },
                { id: 'e15', name: 'peace' },
                { id: 'e361', name: 'heya' },
                { id: 'e20', name: 'hand' },
                { id: 'e298', name: 'yessir' },
                { id: 'e357', name: '-' },
                { id: 'e360', name: '-' },
                { id: 'e358', name: '-' },
                { id: 'e359', name: '-' },
                { id: 'e297', name: 'yay' },
                { id: 'e362', name: 'pray' },
                { id: 'e356', name: '-' },
                { id: 'e18', name: '-' },
                { id: 'e272', name: '-' },
                { id: 'e100', name: 'run' },
                { id: 'e363', name: '-' },
                { id: 'e365', name: 'couple' },
                { id: 'e364', name: 'family' },
                { id: 'e22', name: 'embrace' },
                { id: 'e124', name: 'marriage' },
                { id: 'e370', name: 'playgirl' },
                { id: 'e296', name: 'ok' },
                { id: 'e299', name: 'no' },
                { id: 'e295', name: '-' },
                { id: 'e248', name: 'crown' },
                { id: 'e219', name: 'sneaker' },
                { id: 'e182', name: 'heel' },
                { id: 'e120', name: 'sock' },
                { id: 'e158', name: 'shirt' },
                { id: 'e193', name: 'handbag' },
                { id: 'e73', name: 'glasses' },
                { id: 'e72', name: 'sunglasses' },
                { id: 'e194', name: 'bow' },
                { id: 'e33', name: 'umbrella' },
                { id: 'e267', name: 'lipstick' },
                { id: 'e146', name: 'heart' },
                { id: 'e234', name: 'brokenheart' },
                { id: 'e233', name: '-' },
                { id: 'e276', name: 'hearts' },
                { id: 'e304', name: 'cupid' },
                { id: 'e277', name: 'loveletter' },
                { id: 'e250', name: 'ring' },
                { id: 'e312', name: 'message' }
            ],
            '3': [
                { id: 'e136', name: 'puppy' },
                { id: 'e137', name: '-' },
                { id: 'e135', name: 'cat' },
                { id: 'e256', name: '-' },
                { id: 'e337', name: '-' },
                { id: 'e336', name: '-' },
                { id: 'e338', name: '-' },
                { id: 'e341', name: '-' },
                { id: 'e340', name: '-' },
                { id: 'e253', name: 'pig' },
                { id: 'e342', name: 'monkey' },
                { id: 'e142', name: 'horse' },
                { id: 'e309', name: '-' },
                { id: 'e339', name: '-' },
                { id: 'e257', name: '-' },
                { id: 'e255', name: 'chick' },
                { id: 'e334', name: 'hatch' },
                { id: 'e335', name: '-' },
                { id: 'e308', name: 'turtle' },
                { id: 'e352', name: '-' },
                { id: 'e354', name: '-' },
                { id: 'e244', name: 'snail' },
                { id: 'e307', name: '-' },
                { id: 'e245', name: 'tropicalfish' },
                { id: 'e355', name: 'dolphin' },
                { id: 'e326', name: 'bouquet' },
                { id: 'e129', name: 'sakura' },
                { id: 'e265', name: 'tulip' },
                { id: 'e252', name: 'clover' },
                { id: 'e154', name: '-' },
                { id: 'e266', name: 'maple' },
                { id: 'e327', name: '-' },
                { id: 'e131', name: '-' },
                { id: 'e328', name: 'cactus' },
                { id: 'e157', name: 'pottedplant' },
                { id: 'e273', name: 'sprout' },
                { id: 'e42', name: 'moon' },
                { id: 'e35', name: 'earth' },
                { id: 'e300', name: 'shine' },
                { id: 'e301', name: 'star' },
                { id: 'e32', name: 'sunny' },
                { id: 'e40', name: 'cloudy' },
                { id: 'e37', name: '-' },
                { id: 'e41', name: 'raincloud' },
                { id: 'e34', name: 'rain' },
                { id: 'e39', name: '-' },
                { id: 'e36', name: 'snowman' },
                { id: 'e159', name: 'tornado' },
                { id: 'e286', name: 'fog' },
                { id: 'e38', name: 'rainbow' },
                { id: 'e258', name: 'wave' }
            ],
            '4': [
                { id: 'e115', name: 'akeome' },
                { id: 'e125', name: 'fireworks' },
                { id: 'e116', name: 'jack' },
                { id: 'e306', name: 'ghost' },
                { id: 'e119', name: 'xmas' },
                { id: 'e195', name: 'gift' },
                { id: 'e313', name: '-' },
                { id: 'e130', name: '-' },
                { id: 'e324', name: 'crystalball' },
                { id: 'e184', name: 'film' },
                { id: 'e79', name: 'camera' },
                { id: 'e74', name: 'slr' },
                { id: 'e279', name: 'polaroid' },
                { id: 'e76', name: 'cd' },
                { id: 'e66', name: 'computer' },
                { id: 'e67', name: 'smartphone' },
                { id: 'e196', name: 'cellphone' },
                { id: 'e68', name: 'phone' },
                { id: 'e226', name: 'fax' },
                { id: 'e70', name: 'screen' },
                { id: 'e198', name: 'redscreen' },
                { id: 'e188', name: 'tvshow' },
                { id: 'e268', name: 'alarm' },
                { id: 'e322', name: 'megaphone' },
                { id: 'e80', name: '-' },
                { id: 'e78', name: 'alarmclock' },
                { id: 'e75', name: 'key' },
                { id: 'e231', name: 'search' },
                { id: 'e28', name: 'lightbulb' },
                { id: 'e128', name: 'outlet' },
                { id: 'e133', name: 'bed' },
                { id: 'e132', name: 'bathing' },
                { id: 'e191', name: 'smoking' },
                { id: 'e238', name: 'bomb' },
                { id: 'e321', name: 'gun' },
                { id: 'e318', name: 'pill' },
                { id: 'e319', name: 'syringe' },
                { id: 'e259', name: 'money' },
                { id: 'e123', name: 'dollar' },
                { id: 'e320', name: 'debt' },
                { id: 'e346', name: 'wallet' },
                { id: 'e144', name: '1yen' },
                { id: 'e143', name: '10yen' },
                { id: 'e145', name: '100yen' },
                { id: 'e224', name: '-' },
                { id: 'e139', name: 'mail' },
                { id: 'e225', name: '-' },
                { id: 'e197', name: 'memo' },
                { id: 'e183', name: 'scissor' },
                { id: 'e153', name: 'pencil' },
                { id: 'e134', name: 'openbook' },
                { id: 'e187', name: 'paint' },
                { id: 'e223', name: '-' },
                { id: 'e69', name: '-' },
                { id: 'e186', name: 'headphones' },
                { id: 'e25', name: '-' },
                { id: 'e239', name: '-' },
                { id: 'e325', name: 'guitar' },
                { id: 'e152', name: 'controller' },
                { id: 'e347', name: '-' },
                { id: 'e314', name: 'bullseye' },
                { id: 'e149', name: 'dart' },
                { id: 'e60', name: 'skateboard' },
                { id: 'e289', name: 'jumprope' },
                { id: 'e111', name: 'football' },
                { id: 'e103', name: 'basketball' },
                { id: 'e102', name: 'soccer' },
                { id: 'e104', name: 'baseball' },
                { id: 'e101', name: 'tennis' },
                { id: 'e77', name: 'billiard' },
                { id: 'e71', name: 'bowling' },
                { id: 'e106', name: 'golf' },
                { id: 'e172', name: 'raceflag' },
                { id: 'e348', name: '-' },
                { id: 'e156', name: 'surrender' },
                { id: 'e270', name: 'softball' },
                { id: 'e105', name: 'ski' },
                { id: 'e114', name: 'snowboard' },
                { id: 'e113', name: 'swim' },
                { id: 'e108', name: 'surf' },
                { id: 'e349', name: 'fishing' },
                { id: 'e109', name: 'kendo' },
                { id: 'e110', name: 'sumo' },
                { id: 'e107', name: 'boxing' },
                { id: 'e112', name: 'glove' },
                { id: 'e86', name: 'mug' },
                { id: 'e246', name: 'greentea' },
                { id: 'e98', name: 'hotsake' },
                { id: 'e99', name: 'sake' },
                { id: 'e85', name: 'beer' },
                { id: 'e331', name: 'cheers' },
                { id: 'e87', name: '-' },
                { id: 'e89', name: 'wine' },
                { id: 'e93', name: '-' },
                { id: 'e82', name: '-' },
                { id: 'e96', name: '-' },
                { id: 'e90', name: '-' },
                { id: 'e91', name: '-' },
                { id: 'e92', name: 'bento' },
                { id: 'e351', name: 'sushi' },
                { id: 'e290', name: 'naruto' },
                { id: 'e88', name: '-' },
                { id: 'e81', name: 'rice' },
                { id: 'e95', name: 'ramen' },
                { id: 'e97', name: 'oden' },
                { id: 'e83', name: '-' },
                { id: 'e332', name: 'pudding' },
                { id: 'e94', name: 'cone' },
                { id: 'e251', name: '-' },
                { id: 'e118', name: 'birthday' },
                { id: 'e84', name: 'cake' },
                { id: 'e333', name: 'chocolatebar' },
                { id: 'e247', name: 'apple' },
                { id: 'e275', name: 'cherry' },
                { id: 'e121', name: 'watermelon' },
                { id: 'e329', name: 'strawberry' },
                { id: 'e330', name: 'peach' }
            ],
            '5': [
                { id: 'e151', name: 'house' },
                { id: 'e141', name: 'school' },
                { id: 'e150', name: 'office' },
                { id: 'e173', name: 'postoffice' },
                { id: 'e140', name: 'hospital' },
                { id: 'e174', name: 'bank' },
                { id: 'e175', name: 'atm' },
                { id: 'e177', name: '-' },
                { id: 'e178', name: 'carservice' },
                { id: 'e176', name: 'hotel' },
                { id: 'e45', name: 'sunset' },
                { id: 'e122', name: 'castle' },
                { id: 'e249', name: 'fuji' },
                { id: 'e126', name: 'happyland' },
                { id: 'e64', name: 'cruise' },
                { id: 'e221', name: 'yacht' },
                { id: 'e48', name: 'rocket' },
                { id: 'e62', name: 'ufo' },
                { id: 'e58', name: 'plane' },
                { id: 'e59', name: 'helicopter' },
                { id: 'e63', name: 'bullettrain' },
                { id: 'e61', name: '-' },
                { id: 'e50', name: '-' },
                { id: 'e52', name: 'bus' },
                { id: 'e51', name: 'car' },
                { id: 'e53', name: 'sportscar' },
                { id: 'e49', name: 'bigtruck' },
                { id: 'e323', name: 'siren' },
                { id: 'e65', name: 'policecar' },
                { id: 'e57', name: 'bicycle' },
                { id: 'e54', name: '-' },
                { id: 'e55', name: '-' },
                { id: 'e56', name: '-' },
                { id: 'e190', name: 'ticket' },
                { id: 'e180', name: 'trafficlight' },
                { id: 'e269', name: 'caution' },
                { id: 'e350', name: 'beginner' },
                { id: 'e315', name: 'casino' },
                { id: 'e117', name: 'hotsprings' },
                { id: 'e353', name: '-' },
                { id: 'e189', name: 'event' },
                { id: 'e155', name: 'japan' }
            ],
            '6': [
                { id: 'e201', name: '1' },
                { id: 'e202', name: '2' },
                { id: 'e203', name: '3' },
                { id: 'e204', name: '4' },
                { id: 'e205', name: '5' },
                { id: 'e206', name: '6' },
                { id: 'e207', name: '7' },
                { id: 'e208', name: '8' },
                { id: 'e209', name: '9' },
                { id: 'e200', name: '0' },
                { id: 'e282', name: 'up' },
                { id: 'e283', name: 'down' },
                { id: 'e280', name: 'left' },
                { id: 'e281', name: 'right' },
                { id: 'e185', name: 'NE' },
                { id: 'e217', name: 'NW' },
                { id: 'e216', name: 'SE' },
                { id: 'e222', name: 'SW' },
                { id: 'e310', name: '-' },
                { id: 'e230', name: 'goback' },
                { id: 'e294', name: 'drop' },
                { id: 'e271', name: 'jump' },
                { id: 'e243', name: 'ok' },
                { id: 'e232', name: 'new' },
                { id: 'e293', name: 'up' },
                { id: 'e228', name: 'free' },
                { id: 'e292', name: 'signal' },
                { id: 'e260', name: 'kara' },
                { id: 'e254', name: 'full' },
                { id: 'e181', name: 'washroom' },
                { id: 'e179', name: 'parking' },
                { id: 'e220', name: 'handicap' },
                { id: 'e192', name: 'nosmoking' },
                { id: 'e264', name: '-' },
                { id: 'e288', name: '-' },
                { id: 'e317', name: '-' },
                { id: 'e229', name: 'id' },
                { id: 'e291', name: 'mature' },
                { id: 'e316', name: 'VS' },
                { id: 'e287', name: 'callcenter' },
                { id: 'e160', name: 'aries' },
                { id: 'e161', name: 'taurus' },
                { id: 'e162', name: 'gemini' },
                { id: 'e163', name: 'cancer' },
                { id: 'e164', name: 'leo' },
                { id: 'e165', name: 'virgo' },
                { id: 'e166', name: 'libra' },
                { id: 'e167', name: 'scorpio' },
                { id: 'e168', name: 'sagittarius' },
                { id: 'e169', name: 'capricorn' },
                { id: 'e170', name: 'aquarius' },
                { id: 'e171', name: 'pisces' },
                { id: 'e227', name: '-' },
                { id: 'e262', name: '-' },
                { id: 'e261', name: '-' },
                { id: 'e263', name: '-' },
                { id: 'e285', name: '-' },
                { id: 'e284', name: '-' },
                { id: 'e148', name: '!' },
                { id: 'e147', name: '?' },
                { id: 'e241', name: '!!' },
                { id: 'e240', name: '!?' },
                { id: 'e211', name: 'spades' },
                { id: 'e210', name: 'hearts' },
                { id: 'e213', name: 'clubs' },
                { id: 'e212', name: 'diamonds' }
            ]
        };
    })(Blitz.Emoji || (Blitz.Emoji = {}));
    var Emoji = Blitz.Emoji;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EmojiPaletteViewModel = (function (_super) {
        __extends(EmojiPaletteViewModel, _super);
        function EmojiPaletteViewModel(isEnabled) {
            _super.call(this);
            this.isEnabled = isEnabled;
            this.EVENT_NAME_CLICKED_EMOJI = 'EVENT_NAME_CLICKED_EMOJI';
            this.EVENT_NAME_DELETED_EMOJI = 'EVENT_NAME_DELETED_EMOJI';
        }
        EmojiPaletteViewModel.prototype.inputEmoji = function (emojiId) {
            this.emit(this.EVENT_NAME_CLICKED_EMOJI, emojiId);
        };

        EmojiPaletteViewModel.prototype.onInputEmoji = function (callback) {
            this.on(this.EVENT_NAME_CLICKED_EMOJI, callback);
        };

        EmojiPaletteViewModel.prototype.deletedEmoji = function () {
            this.emit(this.EVENT_NAME_DELETED_EMOJI);
        };

        EmojiPaletteViewModel.prototype.onDeleteEmoji = function (callback) {
            this.on(this.EVENT_NAME_DELETED_EMOJI, callback);
        };
        return EmojiPaletteViewModel;
    })(EventEmitter);
    Blitz.EmojiPaletteViewModel = EmojiPaletteViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DomainError = (function () {
        function DomainError(code, message) {
            if (typeof message === "undefined") { message = ""; }
            this.code = code;
            this.message = message;
            this.name = 'ChatDomainError';
        }
        return DomainError;
    })();
    Blitz.DomainError = DomainError;

    (function (DomainErrorCode) {
        DomainErrorCode[DomainErrorCode["HasPenalty"] = 3000] = "HasPenalty";
        DomainErrorCode[DomainErrorCode["DontHaveWritePermission"] = 3001] = "DontHaveWritePermission";
        DomainErrorCode[DomainErrorCode["DontHaveReadPermission"] = 3002] = "DontHaveReadPermission";
        DomainErrorCode[DomainErrorCode["CommunicateOnlyFriends"] = 3003] = "CommunicateOnlyFriends";
        DomainErrorCode[DomainErrorCode["CommunicateOnlyTwoDegrees"] = 3004] = "CommunicateOnlyTwoDegrees";
        DomainErrorCode[DomainErrorCode["Blocked"] = 3005] = "Blocked";
    })(Blitz.DomainErrorCode || (Blitz.DomainErrorCode = {}));
    var DomainErrorCode = Blitz.DomainErrorCode;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (RelationalPermissionContext) {
        RelationalPermissionContext[RelationalPermissionContext["Enable"] = 0] = "Enable";
        RelationalPermissionContext[RelationalPermissionContext["OnlyFriend"] = 1] = "OnlyFriend";
        RelationalPermissionContext[RelationalPermissionContext["TwoDegrees"] = 2] = "TwoDegrees";
        RelationalPermissionContext[RelationalPermissionContext["Blocked"] = 3] = "Blocked";
    })(Blitz.RelationalPermissionContext || (Blitz.RelationalPermissionContext = {}));
    var RelationalPermissionContext = Blitz.RelationalPermissionContext;

    var RelationalPermission = (function () {
        function RelationalPermission(context) {
            this.context = context;
        }
        RelationalPermission.prototype.isPermitted = function () {
            return this.context === 0 /* Enable */;
        };
        return RelationalPermission;
    })();

    var NonRelationalPermission = (function () {
        function NonRelationalPermission() {
            this.context = 0 /* Enable */;
        }
        NonRelationalPermission.prototype.isPermitted = function () {
            return true;
        };
        return NonRelationalPermission;
    })();

    var RelationalPermissionFactory = (function () {
        function RelationalPermissionFactory() {
        }
        RelationalPermissionFactory.withoutPermission = function () {
            return new NonRelationalPermission();
        };

        RelationalPermissionFactory.create = function (response) {
            var permission = response['permission'];
            if (permission === 'enable') {
                return new RelationalPermission(0 /* Enable */);
            } else if (permission === 'only_friend') {
                return new RelationalPermission(1 /* OnlyFriend */);
            } else if (permission === 'two_degrees') {
                return new RelationalPermission(2 /* TwoDegrees */);
            } else if (permission === 'blocked') {
                return new RelationalPermission(3 /* Blocked */);
            } else {
                throw new Error('Invalid permission context: ' + permission);
            }
        };
        return RelationalPermissionFactory;
    })();
    Blitz.RelationalPermissionFactory = RelationalPermissionFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var SendMessagePermission = (function () {
        function SendMessagePermission(myself, relationalPermission) {
            this.myself = myself;
            this.relationalPermission = relationalPermission;
        }
        SendMessagePermission.prototype.hasPenalty = function () {
            return this.myself.hasPenalty;
        };

        SendMessagePermission.prototype.isForbidden = function () {
            return !this.getForbiddenReason().isEmpty;
        };

        SendMessagePermission.prototype.getForbiddenReason = function () {
            if (this.hasPenalty()) {
                return this.createDomainError(3000 /* HasPenalty */);
            }

            if (!this.myself.permission.isChatWritable()) {
                return this.createDomainError(3001 /* DontHaveWritePermission */);
            }

            if (!this.relationalPermission.isPermitted()) {
                switch (this.relationalPermission.context) {
                    case 1 /* OnlyFriend */:
                        return this.createDomainError(3003 /* CommunicateOnlyFriends */);
                    case 2 /* TwoDegrees */:
                        return this.createDomainError(3004 /* CommunicateOnlyTwoDegrees */);
                    case 3 /* Blocked */:
                        return this.createDomainError(3005 /* Blocked */);
                }
            }

            return new monapt.None();
        };

        SendMessagePermission.prototype.createDomainError = function (code) {
            return new monapt.Some(new Blitz.DomainError(code));
        };
        return SendMessagePermission;
    })();
    Blitz.SendMessagePermission = SendMessagePermission;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var Stamp = (function (_super) {
        __extends(Stamp, _super);
        function Stamp(identity, name, description, thumbnailUrlBig, thumbnailUrlSmall, hasCondition, isPreInstall, period) {
            _super.call(this, identity);
            this.name = name;
            this.description = description;
            this.thumbnailUrlBig = thumbnailUrlBig;
            this.thumbnailUrlSmall = thumbnailUrlSmall;
            this.hasCondition = hasCondition;
            this.isPreInstall = isPreInstall;
            this.period = period;
        }
        Stamp.apply = function (params) {
            var identity = new StampIdentity(params.identity);
            var period = new StampPeriod(new Date(params.period.start_available_time), new Date(params.period.end_acquire_time), new Date(params.period.end_use_time));

            return new Stamp(identity, params.name, params.description, params.thumbnail_url.big, params.thumbnail_url.small, params.has_condition, params.is_pre_install, period);
        };
        return Stamp;
    })(DDD.Entity);
    Blitz.Stamp = Stamp;

    var StampIdentity = (function (_super) {
        __extends(StampIdentity, _super);
        function StampIdentity(identity) {
            _super.call(this, identity);
        }
        return StampIdentity;
    })(DDD.Identity);
    Blitz.StampIdentity = StampIdentity;

    var StampPeriod = (function () {
        function StampPeriod(startAvailableTime, endAcquireTime, endUseTime) {
            this.startAvailableTime = startAvailableTime;
            this.endAcquireTime = endAcquireTime;
            this.endUseTime = endUseTime;
        }
        return StampPeriod;
    })();
    Blitz.StampPeriod = StampPeriod;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var StampPackage = (function () {
        function StampPackage(stamp, stampUnits, possession) {
            this.stamp = stamp;
            this.stampUnits = stampUnits;
            this.possession = possession;
        }
        StampPackage.apply = function (params) {
            var stamp = Blitz.Stamp.apply(params.stamp);
            var stampUnits = _.map(params.stamp_units, function (stampUnit) {
                return Blitz.StampUnit.apply(stampUnit);
            });
            var possession = params.possession;

            return new StampPackage(stamp, stampUnits, possession);
        };
        return StampPackage;
    })();
    Blitz.StampPackage = StampPackage;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var StampService = (function () {
        function StampService(client, conversationId, sendMessagePermission) {
            this.client = client;
            this.conversationId = conversationId;
            this.sendMessagePermission = sendMessagePermission;
        }
        StampService.prototype.getMyStamps = function () {
            var promise = new monapt.Promise();
            this.client.getMyStamps(true).next(function (response) {
                var stampsObj = response['stamps'];
                var stamps = _.map(stampsObj, function (s) {
                    return Blitz.Stamp.apply(s);
                });
                promise.success(stamps);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        StampService.prototype.getStampPackage = function (stampId) {
            var promise = new monapt.Promise();
            this.client.getStampPackage(stampId.getValue()).next(function (response) {
                var stampPackageObj = response['stamp_package'];
                var stampPackage = Blitz.StampPackage.apply(stampPackageObj);
                promise.success(stampPackage);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        StampService.prototype.sendStampUnit = function (stampUnitId, correlationKey) {
            var promise = new monapt.Promise();
            if (this.sendMessagePermission.isForbidden()) {
                var error = this.sendMessagePermission.getForbiddenReason().get();
                promise.failure(error);
            } else {
                this.client.sendStampUnit(stampUnitId.getValue(), this.conversationId.getValue(), correlationKey).next(function (response) {
                    var eventFactory = new Blitz.EventFactory();
                    var event = eventFactory.create(response);
                    promise.success(event);
                }).error(function (error) {
                    return promise.failure(error);
                });
            }

            return promise.future();
        };

        StampService.prototype.generateSendingStampUnitEvent = function (stampUnitId, imageUrl, correlationKey) {
            var ctime = new Date().getTime();
            var myself = Blitz.Myself.getMe();
            var rawSendingEvent = {
                "sender": {
                    "type": "User",
                    "identity": myself.cobitUserId.getValue(),
                    "ref_key": myself.getUserId()
                },
                "content": {
                    "content_type": "message/sending",
                    "message": {
                        "content": {
                            "type": "message/stamp",
                            "stamp_unit": {
                                "identity": stampUnitId.getValue(),
                                "stamp_id": "",
                                "image_url": imageUrl
                            },
                            "stamp_name": ""
                        },
                        "create_time": ctime,
                        "identity": "",
                        "ref_key": null,
                        "sender": {
                            "type": "User",
                            "identity": myself.cobitUserId.getValue(),
                            "ref_key": myself.getUserId()
                        },
                        "status": "Enabled",
                        "to_conversation": {
                            "identity": this.conversationId.getValue(),
                            "ref_key": this.conversationId.refKey
                        }
                    }
                },
                "correlation_key": correlationKey,
                "create_time": ctime
            };
            var factory = new Blitz.EventFactory();
            var sendingEvent = factory.create(rawSendingEvent);

            return sendingEvent;
        };
        return StampService;
    })();
    Blitz.StampService = StampService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var StampPaletteViewModel = (function (_super) {
        __extends(StampPaletteViewModel, _super);
        function StampPaletteViewModel(isEnabled, stampService) {
            _super.call(this);
            this.isEnabled = isEnabled;
            this.stampService = stampService;
            this.loadedStampIds = [];
        }
        StampPaletteViewModel.prototype.loadMyStamps = function () {
            var _this = this;
            var future = this.stampService.getMyStamps();
            future.onSuccess(function (stamps) {
                return _this.emit(StampPaletteViewModel.EVENT_NAME_LOADED_MY_STAMPS, stamps);
            });
            future.onFailure(function (error) {
                return _this.emit(StampPaletteViewModel.EVENT_NAME_FAILED_TO_LOAD_MY_STAMPS, error);
            });
        };

        StampPaletteViewModel.prototype.loadStampPackageIfNeeded = function (stampId) {
            if (_.contains(this.loadedStampIds, stampId.getValue())) {
                this.emit(StampPaletteViewModel.EVENT_NAME_ALREADY_LOADED_STAMP_PACKAGE, stampId);
            } else {
                this.loadedStampIds.push(stampId.getValue());
                this.loadStampPackage(stampId);
            }
        };

        StampPaletteViewModel.prototype.loadStampPackage = function (stampId) {
            var _this = this;
            var future = this.stampService.getStampPackage(stampId);
            future.onSuccess(function (stampPackage) {
                return _this.emit(StampPaletteViewModel.EVENT_NAME_LOADED_STAMP_PACKAGE, stampPackage);
            });
            future.onFailure(function (error) {
                return _this.emit(StampPaletteViewModel.EVENT_NAME_FAILED_TO_LOAD_STAMP_PACKAGE, error);
            });
        };

        StampPaletteViewModel.prototype.inputStampUnit = function (stampId, imageUrl) {
            var _this = this;
            var correlationKey = app.cobit.api.generateCorrelationKey();
            var sendingEvent = this.stampService.generateSendingStampUnitEvent(stampId, imageUrl, correlationKey);
            this.emit(StampPaletteViewModel.EVENT_NAME_INPUT_STAMP_UNIT, sendingEvent);

            var future = this.stampService.sendStampUnit(stampId, correlationKey);
            future.onSuccess(function (event) {
                return _this.emit(StampPaletteViewModel.EVENT_NAME_SUCCEED_IN_SENDING_STAMP_UNIT, event);
            });
            future.onFailure(function (error) {
                return _this.emit(StampPaletteViewModel.EVENT_NAME_FAILED_TO_SEND_STAMP_UNIT, error, correlationKey);
            });
        };
        StampPaletteViewModel.EVENT_NAME_LOADED_MY_STAMPS = 'EVENT_NAME_LOADED_MY_STAMPS';
        StampPaletteViewModel.EVENT_NAME_FAILED_TO_LOAD_MY_STAMPS = 'EVENT_NAME_FAILED_TO_LOAD_MY_STAMPS';
        StampPaletteViewModel.EVENT_NAME_INPUT_STAMP_UNIT = 'EVENT_NAME_INPUT_STAMP_UNIT';
        StampPaletteViewModel.EVENT_NAME_SUCCEED_IN_SENDING_STAMP_UNIT = 'EVENT_NAME_SUCCEED_IN_SENDING_STAMP_UNIT';
        StampPaletteViewModel.EVENT_NAME_FAILED_TO_SEND_STAMP_UNIT = 'EVENT_NAME_FAILED_TO_SEND_STAMP_UNIT';
        StampPaletteViewModel.EVENT_NAME_LOADED_STAMP_PACKAGE = 'EVENT_NAME_LOADED_STAMP_PACKAGE';
        StampPaletteViewModel.EVENT_NAME_ALREADY_LOADED_STAMP_PACKAGE = 'EVENT_NAME_ALREADY_LOADED_STAMP_PACKAGE';
        StampPaletteViewModel.EVENT_NAME_FAILED_TO_LOAD_STAMP_PACKAGE = 'EVENT_NAME_FAILED_TO_LOAD_STAMP_PACKAGE';
        return StampPaletteViewModel;
    })(EventEmitter);
    Blitz.StampPaletteViewModel = StampPaletteViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var PaletteTabViewModel = (function (_super) {
        __extends(PaletteTabViewModel, _super);
        function PaletteTabViewModel() {
            _super.apply(this, arguments);
            this.EVENT_NAME_SWITCH_TO_EMOJI = 'switchToEmoji';
            this.EVENT_NAME_SWITCH_TO_STAMP = 'switchToStamp';
        }
        PaletteTabViewModel.prototype.onSwitchedToEmoji = function (callback) {
            this.on(this.EVENT_NAME_SWITCH_TO_EMOJI, callback);
        };

        PaletteTabViewModel.prototype.emitSwitchedToEmoji = function () {
            this.emit(this.EVENT_NAME_SWITCH_TO_EMOJI);
        };

        PaletteTabViewModel.prototype.onSwitchedToStamp = function (callback) {
            this.on(this.EVENT_NAME_SWITCH_TO_STAMP, callback);
        };

        PaletteTabViewModel.prototype.emitSwitchedToStamp = function () {
            this.emit(this.EVENT_NAME_SWITCH_TO_STAMP);
        };
        return PaletteTabViewModel;
    })(EventEmitter);
    Blitz.PaletteTabViewModel = PaletteTabViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var Swiper = (function () {
        function Swiper(params) {
            this.flipNode = params.flipNode;
            this.lampNode = params.lampNode;
            this.viewNode = params.viewNode;
            this.itemNode = params.itemNode;
            this.lampCurClassName = params.lampCurClassName;
        }
        Swiper.prototype.toSwipeable = function (index) {
            var viewNode = this.viewNode + index;
            var curLampIndex = $('.' + this.lampCurClassName, $(viewNode)).index();
            TOOLKIT.loadQflipper({
                flipNode: this.flipNode + index,
                flipType: 'rich',
                lampNode: this.lampNode + index,
                viewNode: viewNode,
                itemNode: this.itemNode,
                lampItemNodeTagName: 'div',
                lampItemNodeClassName: 'lamp',
                lampItemNodeCurClassName: this.lampCurClassName,
                defaultCurLampIndex: curLampIndex > 0 ? curLampIndex : 0,
                autoChanger: false
            });
        };
        return Swiper;
    })();
    Blitz.Swiper = Swiper;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var Slider = (function () {
        function Slider($el, slidableWidth, easing) {
            if (typeof easing === "undefined") { easing = 400; }
            this.$el = $el;
            this.easing = easing;
            this.touchX = 0;
            this.slideX = 0;
            this.inertia = 0;
            this.rangeW = 0;
            this.rangeW = slidableWidth - this.$el.width();
        }
        Slider.prototype.toSlideable = function () {
            var _this = this;
            this.$el.on({
                'touchstart': function (event) {
                    _this.touchX = event.changedTouches[0].pageX;
                    _this.slideX = _this.$el.position().left;
                },
                'touchmove': function (event) {
                    event.preventDefault();
                    var moveX = event.changedTouches[0].pageX;
                    _this.slideX = _this.slideX - (_this.touchX - moveX);
                    _this.$el.css({ left: _this.slideX });
                    _this.inertia = (moveX - _this.touchX) * 5;
                    _this.touchX = moveX;
                },
                'touchend': function (event) {
                    _this.slideX += _this.inertia;
                    _this.$el.animate({ left: _this.slideX }, _this.easing, 'linear');
                    _this.inertia = 0;

                    if (_this.slideX < _this.rangeW) {
                        _this.slideX = _this.rangeW;
                        _this.$el.animate({ left: _this.slideX }, _this.easing);
                    }
                    if (_this.slideX > 0) {
                        _this.slideX = 0;
                        _this.$el.animate({ left: _this.slideX }, _this.easing);
                    }
                }
            });
        };
        return Slider;
    })();
    Blitz.Slider = Slider;
})(Blitz || (Blitz = {}));

var Blitz;
(function (Blitz) {
    var categoryEventSplitter = /event-(category([0-9].*))/;

    var PaletteOption = (function () {
        function PaletteOption(emojiPaletteViewModelOpt, stampPaletteViewModelOpt) {
            this.emojiPaletteViewModelOpt = emojiPaletteViewModelOpt;
            this.stampPaletteViewModelOpt = stampPaletteViewModelOpt;
            if (emojiPaletteViewModelOpt.isEmpty && stampPaletteViewModelOpt.isEmpty) {
                throw new Error("must implement either EmojiPaletteViewModel or StampPaletteViewModel");
            }
        }
        PaletteOption.prototype.isEnabledEmojiPalette = function () {
            return this.emojiPaletteViewModelOpt.map(function (vm) {
                return vm.isEnabled;
            }).getOrElse(function () {
                return false;
            });
        };

        PaletteOption.prototype.isEnabledStampPalette = function () {
            return this.stampPaletteViewModelOpt.map(function (vm) {
                return vm.isEnabled;
            }).getOrElse(function () {
                return false;
            });
        };

        PaletteOption.prototype.isEnabledPalette = function () {
            return this.isEnabledEmojiPalette() || this.isEnabledStampPalette();
        };

        PaletteOption.prototype.getEmojiPaletteViewModel = function () {
            return this.emojiPaletteViewModelOpt.get();
        };

        PaletteOption.prototype.getStampPaletteViewModel = function () {
            return this.stampPaletteViewModelOpt.get();
        };
        return PaletteOption;
    })();
    Blitz.PaletteOption = PaletteOption;

    var PaletteView = (function (_super) {
        __extends(PaletteView, _super);
        function PaletteView(option) {
            _super.call(this, {
                className: 'modalControlAttachPalette upsideDown'
            });
            this.option = option;
            this.internalPaletteView = InternalPaletteView.create(option);
        }
        PaletteView.prototype.render = function () {
            this.$el.append(this.internalPaletteView.render().$el);
            return this;
        };

        PaletteView.prototype.show = function () {
            this.$el.addClass('open');
            this.internalPaletteView.show();
        };

        PaletteView.prototype.hide = function () {
            this.$el.removeClass('open');
            this.internalPaletteView.hide();
        };

        PaletteView.prototype.isOpen = function () {
            return this.$el.hasClass('open');
        };
        return PaletteView;
    })(Blitz.BlitzView);
    Blitz.PaletteView = PaletteView;

    var InternalPaletteView = (function (_super) {
        __extends(InternalPaletteView, _super);
        function InternalPaletteView() {
            _super.apply(this, arguments);
        }
        InternalPaletteView.create = function (op) {
            if (op.isEnabledEmojiPalette() && op.isEnabledStampPalette()) {
                return new StampEmojiPaletteView(op.getStampPaletteViewModel(), op.getEmojiPaletteViewModel());
            } else if (op.isEnabledEmojiPalette() && !op.isEnabledStampPalette()) {
                return new EmojiPaletteView(op.getEmojiPaletteViewModel());
            } else if (!op.isEnabledEmojiPalette() && op.isEnabledStampPalette()) {
                return new StampPaletteView(op.getStampPaletteViewModel());
            } else {
                debugAsError("invalid option");
            }
        };

        InternalPaletteView.prototype.show = function () {
            debugAsError("must override!!");
            return null;
        };

        InternalPaletteView.prototype.hide = function () {
            debugAsError("must override!!");
            return null;
        };

        InternalPaletteView.prototype.isOpen = function () {
            return this.$el.hasClass('show');
        };
        return InternalPaletteView;
    })(Blitz.BlitzView);

    var PaletteTabView = (function (_super) {
        __extends(PaletteTabView, _super);
        function PaletteTabView(paletteViewModel) {
            _super.call(this, {
                tagName: 'section',
                className: 'modalControlAttachTab'
            });
            this.paletteViewModel = paletteViewModel;
            this.$usingStamp = $(new SNS.HBSTemplate("palette/tab-using-stamp.hbs").render());
            this.$usingEmoji = $(new SNS.HBSTemplate("palette/tab-using-emoji.hbs").render());
        }
        PaletteTabView.prototype.events = function () {
            return {
                'click .js-tab-stamp': 'switchToStamp',
                'click .js-tab-emoji': 'switchToEmoji'
            };
        };

        PaletteTabView.prototype.render = function () {
            this.$el.append(this.$usingStamp);
            return this;
        };

        PaletteTabView.prototype.switchToStamp = function () {
            this.$el.html(this.$usingStamp);
            this.paletteViewModel.emitSwitchedToStamp();
        };

        PaletteTabView.prototype.switchToEmoji = function () {
            this.$el.html(this.$usingEmoji);
            this.paletteViewModel.emitSwitchedToEmoji();
        };
        return PaletteTabView;
    })(Blitz.BlitzView);

    var StampEmojiPaletteView = (function (_super) {
        __extends(StampEmojiPaletteView, _super);
        function StampEmojiPaletteView(stampPaletteViewModel, emojiPaletteViewModel) {
            _super.call(this);
            this.stampPaletteView = new StampPaletteView(stampPaletteViewModel);
            this.emojiPaletteView = new EmojiPaletteView(emojiPaletteViewModel);
            this.paletteViewModel = new Blitz.PaletteTabViewModel();
            this.paletteViewModel.onSwitchedToEmoji($.proxy(this.switchToEmoji, this));
            this.paletteViewModel.onSwitchedToStamp($.proxy(this.switchToStamp, this));
        }
        StampEmojiPaletteView.prototype.render = function () {
            this.$el.append(new PaletteTabView(this.paletteViewModel).render().$el);
            this.$el.append(this.stampPaletteView.render().$el);
            this.$el.append(this.emojiPaletteView.render().$el);
            return this;
        };

        StampEmojiPaletteView.prototype.show = function () {
            if (this.lastOpenedPaletteView) {
                this.lastOpenedPaletteView.show();
            } else {
                this.stampPaletteView.show();
                this.emojiPaletteView.hide();
            }
            return this;
        };

        StampEmojiPaletteView.prototype.hide = function () {
            this.lastOpenedPaletteView = this.emojiPaletteView.isOpen() ? this.emojiPaletteView : this.stampPaletteView.isOpen() ? this.stampPaletteView : this.lastOpenedPaletteView;
            this.stampPaletteView.hide();
            this.emojiPaletteView.hide();
            return this;
        };

        StampEmojiPaletteView.prototype.switchToStamp = function () {
            this.emojiPaletteView.hide();
            this.stampPaletteView.show();
        };

        StampEmojiPaletteView.prototype.switchToEmoji = function () {
            this.stampPaletteView.hide();
            this.emojiPaletteView.show();
        };
        return StampEmojiPaletteView;
    })(InternalPaletteView);

    var EmojiPaletteView = (function (_super) {
        __extends(EmojiPaletteView, _super);
        function EmojiPaletteView(viewModel) {
            _super.call(this, {
                id: 'modalControlEmojiPalette',
                className: 'modalControlAttachContr'
            });
            this.viewModel = viewModel;
            this.paletteSpTpl = new SNS.HBSTemplate('palette/emoji-palette.hbs');
            this.palettePcTpl = new SNS.HBSTemplate('palette/emoji-palette-pc.hbs');
            this.categoryTpl = new SNS.HBSTemplate('palette/emoji-palette-category.hbs');
            this.partialTpl = new SNS.HBSTemplate('palette/emoji-palette-partial.hbs');
            this.EMOJI_CHUNK_NUM = 18;
            this.firstShow = true;
            this.CATEGORIES = _.map(_.range(6), function (i) {
                return 'category' + (i + 1);
            });
            this.CATEGORY_CLASSES = [
                'ia24_emocon_history',
                'ia24_emocon_people',
                'ia24_emocon_deco',
                'ia24_emocon_event',
                'ia24_emocon_town',
                'ia24_emocon_symbol',
                'ia24_emocon_delete'
            ];
            this.cancelNext = false;
            this.swiper = new Blitz.Swiper({
                flipNode: '#carlEmojiCont',
                lampNode: '#carlEmojiLmp',
                viewNode: '#carlEmojilist',
                itemNode: '.carlEmojiCol',
                lampCurClassName: 'curEmoji'
            });
        }
        EmojiPaletteView.prototype.events = function () {
            return {
                'fptouchmove .carlEmojiCont': 'onMoveTouchEmoji',
                'touchstart .js-emoji': 'onStartTouchEmoji',
                'click .js-emoji': 'onEndTouchEmoji',
                'click .js-emoji-category': 'onSelectCategory',
                'click .js-emoji-delete': 'onDelete'
            };
        };

        EmojiPaletteView.prototype.render = function () {
            var _this = this;
            var categories = $.map(this.CATEGORIES, function (category, i) {
                return {
                    eventId: 'event-' + category,
                    className: _this.CATEGORY_CLASSES[i],
                    id: category,
                    index: i + 1,
                    partials: (i == 0) ? [_this.renderEmojiHistoryPalettePartial(Blitz.Emoji.getHistory())] : _this.renderPartialEmojiUnits(Blitz.Emoji.greeEmoji[i + 1])
                };
            });

            var paletteTpl = SNS.Config.isPC() ? this.palettePcTpl : this.paletteSpTpl;
            this.$el.append(paletteTpl.render({ categories: categories }), this.categoryTpl.render({ categories: categories }));
            return this;
        };

        EmojiPaletteView.prototype.renderPartialEmojiUnits = function (emojiUnits) {
            return SNS.Config.isPC() ? [this.renderEachChunkedColumn(emojiUnits)] : this.renderEachColumn(emojiUnits);
        };

        EmojiPaletteView.prototype.renderEachColumn = function (emojiContents) {
            var _this = this;
            var chunks = _.chain(emojiContents).groupBy(function (e, i) {
                return Math.floor(i / _this.EMOJI_CHUNK_NUM);
            }).toArray().value();

            return _.foldl(chunks, function (left, emojis) {
                var rendered = _this.renderEachChunkedColumn(emojis);
                return left.concat(rendered);
            }, []);
        };

        EmojiPaletteView.prototype.renderEachChunkedColumn = function (emojis) {
            return this.partialTpl.render(_.map(emojis, function (emojiUnit) {
                return { id: emojiUnit.id, name: emojiUnit.name };
            }));
        };

        EmojiPaletteView.prototype.renderEmojiHistoryPalettePartial = function (emojiHistory) {
            var emojiCol = _.map(emojiHistory, function (emojiId) {
                return { id: emojiId, name: '---' };
            });

            return this.renderEachChunkedColumn(emojiCol);
        };

        EmojiPaletteView.prototype.show = function () {
            if (this.firstShow) {
                this.selectFirstCategory();
                this.firstShow = false;
            }
            this.$el.addClass('show');
            return this;
        };

        EmojiPaletteView.prototype.hide = function () {
            this.$el.removeClass('show');
            return this;
        };

        EmojiPaletteView.prototype.inputEmoji = function (emojiId) {
            this.viewModel.inputEmoji(emojiId);
            Blitz.Emoji.pushHistory(emojiId);
        };

        EmojiPaletteView.prototype.onStartTouchEmoji = function () {
            this.cancelNext = false;
        };

        EmojiPaletteView.prototype.onMoveTouchEmoji = function () {
            this.cancelNext = true;
        };

        EmojiPaletteView.prototype.onEndTouchEmoji = function (event) {
            if (!this.cancelNext) {
                this.inputEmoji($(event.currentTarget).attr('emoji_id'));
            }
            this.cancelNext = false;
        };

        EmojiPaletteView.prototype.onDelete = function () {
            this.viewModel.deletedEmoji();
        };

        EmojiPaletteView.prototype.onSelectCategory = function (event) {
            this.updateHistory(Blitz.Emoji.getHistory());
            var $current = $(event.currentTarget);
            var matches = $current.attr('id').match(categoryEventSplitter);
            this.selectCategory(parseInt(matches[2], 10));
        };

        EmojiPaletteView.prototype.updateHistory = function (emojiHistory) {
            $('#carlEmojiCont1', this.$el).html(this.renderEmojiHistoryPalettePartial(emojiHistory));
        };

        EmojiPaletteView.prototype.selectCategory = function (id) {
            $('div.js-emoji-category', this.$el).addClass('tap').filter('#event-category' + id).removeClass('tap');
            $('div.carlEmojilist', this.$el).hide().filter('#carlEmojilist' + id).show();
            this.swiper.toSwipeable(id.toString());
        };

        EmojiPaletteView.prototype.selectFirstCategory = function () {
            var emojiHistory = Blitz.Emoji.getHistory();
            if (emojiHistory.length == 0) {
                this.selectCategory(2);
            } else {
                this.selectCategory(1);
            }
        };
        return EmojiPaletteView;
    })(InternalPaletteView);

    var StampPaletteView = (function (_super) {
        __extends(StampPaletteView, _super);
        function StampPaletteView(viewModel) {
            _super.call(this, {
                id: 'modalControlStampPalette',
                className: 'modalControlAttachContr'
            });
            this.viewModel = viewModel;
            this.paletteSpTpl = new SNS.HBSTemplate('palette/stamp-palette.hbs');
            this.palettePcTpl = new SNS.HBSTemplate('palette/stamp-palette-pc.hbs');
            this.categoryTpl = new SNS.HBSTemplate('palette/stamp-palette-category.hbs');
            this.partialTpl = new SNS.HBSTemplate('palette/stamp-palette-partial.hbs');
            this.firstShow = true;
            this.STAMP_CHUNK_NUM = 8;
            this.cancelNext = false;
            this.swiper = new Blitz.Swiper({
                flipNode: '#carlStampCont',
                lampNode: '#carlStampLmp',
                viewNode: '#carlStamplist',
                itemNode: '.carlStampCol',
                lampCurClassName: 'curStamp'
            });

            this.viewModel.on(Blitz.StampPaletteViewModel.EVENT_NAME_LOADED_MY_STAMPS, $.proxy(this.onLoadMyStamps, this));
            this.viewModel.on(Blitz.StampPaletteViewModel.EVENT_NAME_LOADED_STAMP_PACKAGE, $.proxy(this.onLoadStampPackage, this));
            this.viewModel.on(Blitz.StampPaletteViewModel.EVENT_NAME_ALREADY_LOADED_STAMP_PACKAGE, $.proxy(this.onAlreadyLoadedStampPackage, this));
        }
        StampPaletteView.prototype.events = function () {
            return {
                'fptouchmove .carlStampCont': 'onMoveTouch',
                'touchstart .js-stamp': 'onStartTouch',
                'click .js-stamp': 'onEndTouch',
                'click .js-stamp-category': 'onSelectCategory'
            };
        };

        StampPaletteView.prototype.render = function () {
            return this;
        };

        StampPaletteView.prototype.renderPaletteCategories = function (stamps) {
            var stampSets = _.map(stamps, function (stamp) {
                return {
                    stampId: stamp.getIdentity().getValue(),
                    thumbnailUrl: stamp.thumbnailUrlSmall
                };
            });
            var paletteTpl = SNS.Config.isPC() ? this.palettePcTpl : this.paletteSpTpl;

            this.$el.append(paletteTpl.render({ stampSets: stampSets }), this.categoryTpl.render({ stampSets: stampSets }));
        };

        StampPaletteView.prototype.renderPaletteContents = function (stampPackage) {
            var stampId = stampPackage.stamp.getIdentity().getValue();
            var $partialWrapper = $('.stampUnitWrapper' + stampId);

            $partialWrapper.append(SNS.Config.isPC() ? this.renderEachChunkedColumn(stampPackage.stampUnits) : this.renderEachColumn(stampPackage.stampUnits));
        };

        StampPaletteView.prototype.renderEachColumn = function (stampUnits) {
            var _this = this;
            var chunks = _.chain(stampUnits).groupBy(function (e, i) {
                return Math.floor(i / _this.STAMP_CHUNK_NUM);
            }).toArray().value();

            return _.foldl(chunks, function (left, stampUnits) {
                var rendered = _this.renderEachChunkedColumn(stampUnits);
                return left.concat(rendered);
            }, []);
        };

        StampPaletteView.prototype.renderEachChunkedColumn = function (stampUnits) {
            var raw = this.partialTpl.render({
                stampUnits: _.map(stampUnits, function (stampUnit) {
                    return {
                        stamp_unit_id: stampUnit.getIdentity().getValue(),
                        stamp_unit_img_url: stampUnit.imageUrl
                    };
                })
            });

            return $('<div/>').html(raw).contents();
        };

        StampPaletteView.prototype.show = function () {
            if (this.firstShow) {
                this.firstShow = false;
                this.viewModel.loadMyStamps();
            }
            this.$el.addClass('show');

            var scrollElement = $('#selectStamp');
            new Blitz.Slider(scrollElement, scrollElement.parent('.contr').width()).toSlideable();
            return this;
        };

        StampPaletteView.prototype.hide = function () {
            this.$el.removeClass('show');
            return this;
        };

        StampPaletteView.prototype.onLoadMyStamps = function (stamps) {
            this.renderPaletteCategories(stamps);
            var stampAtFirst = _.first(stamps);
            this.viewModel.loadStampPackageIfNeeded(stampAtFirst.getIdentity());
        };

        StampPaletteView.prototype.onLoadStampPackage = function (stampPackage) {
            this.renderPaletteContents(stampPackage);
            this.selectCategory(stampPackage.stamp.getIdentity().getValue());
        };

        StampPaletteView.prototype.onAlreadyLoadedStampPackage = function (stampId) {
            this.selectCategory(stampId.getValue());
        };

        StampPaletteView.prototype.onInput = function (stampUnitId, imageUrl) {
            this.viewModel.inputStampUnit(stampUnitId, imageUrl);
        };

        StampPaletteView.prototype.onStartTouch = function () {
            this.cancelNext = false;
        };

        StampPaletteView.prototype.onMoveTouch = function () {
            this.cancelNext = true;
        };

        StampPaletteView.prototype.onEndTouch = function (event) {
            if (!this.cancelNext) {
                var $stampUnit = $(event.currentTarget);
                var stampUnitId = $stampUnit.attr('stamp_unit_id');
                var imageUrl = $("img", $stampUnit).attr("src");
                this.onInput(new Blitz.StampUnitIdentity(stampUnitId), imageUrl);
            }
            this.cancelNext = false;
        };

        StampPaletteView.prototype.onSelectCategory = function (event) {
            var $current = $(event.currentTarget);
            var stampId = $current.attr('stamp_id');
            this.viewModel.loadStampPackageIfNeeded(new Blitz.StampIdentity(stampId));
        };

        StampPaletteView.prototype.selectCategory = function (stampId) {
            $('div.carlStamplist', this.$el).hide().filter('#carlStamplist' + stampId).show();
            this.swiper.toSwipeable(stampId);
        };
        return StampPaletteView;
    })(InternalPaletteView);
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var PaletteButtonViewModel = (function (_super) {
        __extends(PaletteButtonViewModel, _super);
        function PaletteButtonViewModel() {
            _super.apply(this, arguments);
            this.EVENT_NAME_CLICK = 'EVENT_NAME_CLICK';
        }
        PaletteButtonViewModel.prototype.onClick = function (callback) {
            this.on(this.EVENT_NAME_CLICK, callback);
        };

        PaletteButtonViewModel.prototype.click = function () {
            this.emit(this.EVENT_NAME_CLICK);
        };
        return PaletteButtonViewModel;
    })(EventEmitter);
    Blitz.PaletteButtonViewModel = PaletteButtonViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EmojiPaletteDelegate = (function () {
        function EmojiPaletteDelegate($textArea) {
            this.$textArea = $textArea;
        }
        EmojiPaletteDelegate.prototype.didInputEmoji = function (emojiId) {
            var text = this.$textArea.val();
            var caretPos = this.$textArea.get(0).selectionStart;
            var emojiHtml = Blitz.Emoji.emojiIdToTag(emojiId);
            this.$textArea.val(text.substr(0, caretPos) + emojiHtml + text.substr(caretPos));

            var newCaretPos = caretPos + emojiHtml.length;
            this.$textArea.get(0).setSelectionRange(newCaretPos, newCaretPos);
            this.$textArea.keyup().blur();
        };

        EmojiPaletteDelegate.prototype.didDeleteEmoji = function () {
            var text = this.$textArea.val();
            var caretPos = this.$textArea.get(0).selectionStart;
            var deletedText = Blitz.Emoji.xBackspace(text.slice(0, caretPos));
            this.$textArea.val(deletedText + text.slice(caretPos));

            var newCaretPos = deletedText.length;
            this.$textArea.get(0).setSelectionRange(newCaretPos, newCaretPos);
            this.$textArea.keyup().blur();
        };
        return EmojiPaletteDelegate;
    })();
    Blitz.EmojiPaletteDelegate = EmojiPaletteDelegate;

    var PaletteButtonView = (function (_super) {
        __extends(PaletteButtonView, _super);
        function PaletteButtonView($context, viewModel) {
            _super.call(this, {
                '$el': $context
            });
            this.viewModel = viewModel;
        }
        PaletteButtonView.prototype.events = function () {
            var _this = this;
            return {
                'click #emojiPaletteToggleButton': function () {
                    return _this.viewModel.click();
                }
            };
        };

        PaletteButtonView.prototype.render = function () {
            return this;
        };

        PaletteButtonView.prototype.changeOpenableMode = function () {
            this.$el.find('#emojiPaletteOpenButton').addClass("dB");
            this.$el.find('#emojiPaletteCloseButton').css("display", "none");
            this.$el.find('#emojiPaletteCloseButton').removeClass("dB");
        };

        PaletteButtonView.prototype.changeCloseableMode = function () {
            this.$el.find('#emojiPaletteOpenButton').css("display", "none");
            this.$el.find('#emojiPaletteOpenButton').removeClass("dB");
            this.$el.find('#emojiPaletteCloseButton').addClass("dB");
        };
        return PaletteButtonView;
    })(Blitz.BlitzView);
    Blitz.PaletteButtonView = PaletteButtonView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var PaletteComponentsFactory = (function () {
        function PaletteComponentsFactory() {
        }
        PaletteComponentsFactory.create = function ($context, option) {
            return option.isEnabledPalette() ? new PaletteComponents($context, option) : new NonSupportPaletteComponents($context);
        };
        return PaletteComponentsFactory;
    })();
    Blitz.PaletteComponentsFactory = PaletteComponentsFactory;

    var NonSupportPaletteComponents = (function () {
        function NonSupportPaletteComponents($context) {
            this.$context = $context;
        }
        NonSupportPaletteComponents.prototype.render = function () {
            this.hidePaletteButton();
            return $();
        };

        NonSupportPaletteComponents.prototype.show = function (options) {
        };

        NonSupportPaletteComponents.prototype.hidePalette = function () {
        };

        NonSupportPaletteComponents.prototype.hidePaletteButton = function () {
            this.$context.find('#emojiPaletteWrapper').hide();
        };

        NonSupportPaletteComponents.prototype.isPanelOpened = function () {
            return false;
        };

        NonSupportPaletteComponents.prototype.height = function () {
            return 0;
        };
        return NonSupportPaletteComponents;
    })();

    var PaletteComponents = (function () {
        function PaletteComponents($context, option) {
            this.$context = $context;
            this.flagService = Blitz.FlagService.ofSnsApi();
            this.flagOpenPalette = new Blitz.FlagOpenPalette();
            var paletteButtonViewModel = new Blitz.PaletteButtonViewModel();
            paletteButtonViewModel.onClick($.proxy(this.toggleEmojiPalette, this));
            this.paletteButtonView = new Blitz.PaletteButtonView($context, paletteButtonViewModel);
            this.paletteView = new Blitz.PaletteView(option);
        }
        PaletteComponents.prototype.render = function () {
            this.paletteView.render();
            this.paletteButtonView.render();
            this.hidePalette();
            this.$textArea = this.$context.find('textarea');
            if (this.flagService.isDown(this.flagOpenPalette) && new Date("2016/04/20 15:00") > new Date()) {
                this.$context.find('#paletteNewBadge').show();
            }

            return this.paletteView.$el;
        };

        PaletteComponents.prototype.swapControlTab = function () {
            var tab = this.paletteButtonView.$el.find('.modalControlEmojiTab');
            var before = tab.prev();
            tab.remove();
            before.before(tab);
        };

        PaletteComponents.prototype.show = function (options) {
            if (options.modalControlEmojiTab) {
                this.swapControlTab();
            }
        };

        PaletteComponents.prototype.hidePalette = function () {
            this.paletteView.hide();
            this.paletteButtonView.changeOpenableMode();
        };

        PaletteComponents.prototype.hidePaletteButton = function () {
            this.$context.find('#emojiPaletteWrapper').hide();
        };

        PaletteComponents.prototype.isPanelOpened = function () {
            return this.paletteView.isOpen();
        };

        PaletteComponents.prototype.height = function () {
            return this.paletteView.$el.height();
        };

        PaletteComponents.prototype.toggleEmojiPalette = function () {
            if (this.paletteView.isOpen()) {
                this.paletteView.hide();
                this.paletteButtonView.changeOpenableMode();
            } else {
                this.paletteView.show();
                this.paletteButtonView.changeCloseableMode();
                this.$textArea.blur();
                if (this.flagService.isDown(this.flagOpenPalette)) {
                    this.flagService.up(this.flagOpenPalette);
                }
            }
        };
        return PaletteComponents;
    })();
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatFooterView = (function (_super) {
        __extends(ChatFooterView, _super);
        function ChatFooterView(collection, viewModel, permission) {
            var _this = this;
            _super.call(this, {
                tagName: 'section',
                className: 'mdlFootWrap'
            });
            this.collection = collection;
            this.viewModel = viewModel;
            this.permission = permission;
            this.agreementMessageTemplate = new SNS.HBSTemplate('chat/view/agreement-message.hbs');
            this.penaltyMessageTemplate = new SNS.HBSTemplate('chat/view/penalty-message.hbs');
            this.errorMessageTemplate = new SNS.HBSTemplate('chat/view/error-message.hbs');
            this.textAreaTemplate = new SNS.HBSTemplate('chat/view/textarea.hbs');
            this.$glContr = $('.glContr');
            this.footerEvent = {
                'focus .txtarea': 'onFocus',
                'blur .txtarea': 'onBlur',
                'keyup .txtarea': 'onInput',
                'input .txtarea': 'onInput',
                'paste .txtarea': 'onInput',
                'click .txtarea': 'onClickTextArea',
                'propertychange .txtarea': 'onInput',
                'click #emojiPaletteToggleButton': 'toggleEmojiPalette'
            };

            this.conversation = this.collection.conversation;
            this.DRAFT_KEY = 'message-draft-' + this.conversation.getConversationId();
            this.collection.on('messageSendSucceed', function (message) {
                return _this.messageSendSucceed();
            });
            this.collection.on('messageSendFailed', function (error) {
                return _this.messageSendFailed(error);
            });

            var emojiPaletteViewModel = new Blitz.EmojiPaletteViewModel(SNS.Config.isEnabledEmojiPalette());
            emojiPaletteViewModel.onInputEmoji($.proxy(this.onClickedEmoji, this));
            emojiPaletteViewModel.onDeleteEmoji($.proxy(this.onDeletedEmoji, this));

            var stampService = new Blitz.StampService(app.cobit, this.conversation.getIdentity(), permission);
            var stampPaletteViewModel = new Blitz.StampPaletteViewModel(SNS.Config.isEnabledStampPalette(), stampService);
            stampPaletteViewModel.on(Blitz.StampPaletteViewModel.EVENT_NAME_INPUT_STAMP_UNIT, $.proxy(this.onInputStampUnit, this));
            stampPaletteViewModel.on(Blitz.StampPaletteViewModel.EVENT_NAME_SUCCEED_IN_SENDING_STAMP_UNIT, $.proxy(this.onSucceedInSendingStampUnit, this));
            stampPaletteViewModel.on(Blitz.StampPaletteViewModel.EVENT_NAME_FAILED_TO_SEND_STAMP_UNIT, $.proxy(this.onFailedToSendStampUnit, this));

            var paletteOption = new Blitz.PaletteOption(new monapt.Some(emojiPaletteViewModel), new monapt.Some(stampPaletteViewModel));
            this.paletteComponents = Blitz.PaletteComponentsFactory.create(this.$el, paletteOption);
        }
        ChatFooterView.prototype.delegateEvents = function (events) {
            _super.prototype.delegateEvents.call(this);
            this.$el.off('click.aTag');
            this.$el.on('click.aTag', 'a', function (event) {
                var url = $(event.currentTarget).attr('href');
                if (url) {
                    event.stopPropagation();
                    event.preventDefault();
                    new Blitz.JumpPageConfirmDialogView(url).show();
                }
            });
            return this;
        };

        ChatFooterView.prototype.show = function () {
            this.$glContr.after(this.render().$el);
        };

        ChatFooterView.prototype.hide = function () {
            this.undelegateAll();
            this.$el.remove();
        };

        ChatFooterView.prototype.render = function () {
            this.$el.append(this.renderErrorMessage(), this.renderAgreementMessage(), this.renderPenaltyMessage(), this.textAreaTemplate.render());
            this.$el.find('#agreement-message').before(this.paletteComponents.render());
            this.paletteComponents.show({
                modalControlEmojiTab: false
            });

            this.$txtarea = $('.txtarea', this.$el);
            this.$textarea = $('textarea', this.$txtarea);
            this.emojiPaletteDelegate = new Blitz.EmojiPaletteDelegate(this.$textarea);
            this.$sendBtn = $('.agreeSendBtn', this.$el);
            this.$agreementMessage = $('#agreement-message', this.$el);

            this.$errorMessage = $('#error-message', this.$el).hide();

            this.prepareByPermission();
            this.delegateEvents(this.footerEvent);
            this.restoreDraft();
            this.onInput();

            return this;
        };

        ChatFooterView.prototype.renderAgreementMessage = function () {
            return this.agreementMessageTemplate.render({
                message: Blitz.Language.getMessage('chat.send_moderation_consent', {
                    url: SNS.Config.getModerationConfirmUrl()
                })
            });
        };

        ChatFooterView.prototype.renderPenaltyMessage = function () {
            return this.penaltyMessageTemplate.render({
                message: Blitz.Language.getMessage('chat.error_send_penalty', {
                    url: SNS.Config.getPenaltyHelpUrl()
                })
            });
        };

        ChatFooterView.prototype.renderErrorMessage = function () {
            return this.errorMessageTemplate.render();
        };

        ChatFooterView.prototype.toggleEmojiPalette = function () {
            if (this.paletteComponents.isPanelOpened()) {
                this.$agreementMessage.show();
                this.viewModel.emit("showPalette", this.calcAroundPaletteHeight());
            } else {
                this.onInput();
                this.hidePalette();
            }
        };

        ChatFooterView.prototype.calcAroundPaletteHeight = function () {
            return this.paletteComponents.height() + this.$agreementMessage.height();
        };

        ChatFooterView.prototype.scrollDiffOfKeyboardHeight = function (preFooterOffset) {
            var postFooterOffset = this.$el.offset().top;
            var keyboardHeight = Math.abs(preFooterOffset - postFooterOffset);
            scrollBy(0, keyboardHeight);
        };

        ChatFooterView.prototype.onFocus = function () {
            this.showAgreementMessage();
            if (SNS.Config.isAndroid()) {
                var preFooterOffset = this.$el.offset().top;
                var debounced = _.debounce($.proxy(this.scrollDiffOfKeyboardHeight, this), 100);
                $(window).resize(function () {
                    return debounced(preFooterOffset);
                });
            }

            if (Util.UA.isIOS()) {
                this.$glContr.removeClass('mdlFootH').addClass('staticNavFoot');
                $('#dataArea').css('min-height', 350);
                $('.mdlWrap').removeClass('fixed');
                this.$el.css('position', 'static');
                scrollBy(0, document.documentElement.offsetHeight);
            }
        };

        ChatFooterView.prototype.onBlur = function () {
            this.hideAgreementMessage();
            if (SNS.Config.isAndroid()) {
                $(window).off("resize");
            }

            if (Util.UA.isIOS()) {
                this.$glContr.removeClass('staticNavFoot').addClass('mdlFootH');
                $('#dataArea').css('min-height', '');
                $('.mdlWrap').addClass('fixed');
                this.$el.css('position', 'fixed');
            }
        };

        ChatFooterView.prototype.onInput = function () {
            var input = this.$textarea.val();
            this.storeDraft(input);
            if (input.length > 0) {
                this.showAgreementMessage();

                this.enableSendButton();
                this.enableSend();
            } else {
                this.hideAgreementMessage();

                this.disableSendButton();
                this.disableSend();
            }

            if (this.paletteComponents.isPanelOpened()) {
                this.$agreementMessage.show();
            }
        };

        ChatFooterView.prototype.hidePalette = function () {
            this.paletteComponents.hidePalette();
            this.viewModel.emit("hidePalette");
        };

        ChatFooterView.prototype.onClickTextArea = function () {
            this.hidePalette();
        };

        ChatFooterView.prototype.showAgreementMessage = function () {
            this.$agreementMessage.show();

            this.$glContr.addClass('mdlFootHL');
        };

        ChatFooterView.prototype.hideAgreementMessage = function () {
            this.$agreementMessage.hide();
            this.$glContr.removeClass('mdlFootHL');
        };

        ChatFooterView.prototype.enableSend = function () {
            this.footerEvent['click .agreeSendBtn'] = 'send';
            this.refreshEvents();
        };

        ChatFooterView.prototype.disableSend = function () {
            delete this.footerEvent['click .agreeSendBtn'];
            this.refreshEvents();
        };

        ChatFooterView.prototype.refreshEvents = function () {
            var _this = this;
            this.events = function () {
                return Blitz.mapHeaderEvents(_this.footerEvent, _this);
            };
            this.delegateEvents();
        };

        ChatFooterView.prototype.send = function () {
            SNS.Analytics.event('send');
            if (this.permission.isForbidden()) {
                this.handleError(this.permission.getForbiddenReason().get());
                return;
            }

            this.disableSend();
            this.hidePalette();
            this.disableTextArea();
            this.showIndicator();
            var textMessage = new Blitz.TextMessage(this.conversation.getConversationId(), Blitz.Myself.getMe().getIdentity(), new Blitz.Meta(new Date().getTime(), null), this.$textarea.val());
            this.collection.sendTextMessage(textMessage);

            $('<input type="checkbox">').appendTo(this.$textarea.parent()).focus().remove();
        };

        ChatFooterView.prototype.onClickedEmoji = function (emojiId) {
            this.emojiPaletteDelegate.didInputEmoji(emojiId);
        };

        ChatFooterView.prototype.onDeletedEmoji = function () {
            this.emojiPaletteDelegate.didDeleteEmoji();
        };

        ChatFooterView.prototype.onInputStampUnit = function (event) {
            this.hidePalette();
            this.hideAgreementMessage();
            this.collection.addNewEvent(event);
        };

        ChatFooterView.prototype.onSucceedInSendingStampUnit = function (event) {
            this.collection.addNewEvent(event);
            var stampMessage = event.getEventContents().getMessage();
            var beaconParam = {
                "stamp_id": stampMessage.stampUnit.stampId.getValue(),
                "stamp_unit_id": stampMessage.stampUnit.getIdentity().getValue(),
                "conversation_type": this.conversation.getTypeShortName()
            };
            SNS.Analytics.event('send_stamp', '', beaconParam);
        };

        ChatFooterView.prototype.onFailedToSendStampUnit = function (error, correlationKey) {
            this.collection.removeItemViewIfNeeded(correlationKey);
            this.handleError(error);
        };

        ChatFooterView.prototype.enableTextArea = function () {
            this.$txtarea.toggleClass('disabled', false);
            this.$textarea.removeAttr('disabled');
        };

        ChatFooterView.prototype.disableTextArea = function () {
            this.$txtarea.toggleClass('disabled', true);
            this.$textarea.attr('disabled', true);
        };

        ChatFooterView.prototype.enableSendButton = function () {
            this.$sendBtn.addClass('prim').toggleClass('disabled', false);
        };

        ChatFooterView.prototype.disableSendButton = function () {
            this.$sendBtn.removeClass('prim').toggleClass('disabled', true);
        };

        ChatFooterView.prototype.showIndicator = function () {
            this.$sendBtn.html('<span class="spr throbWhite18"></span>');
        };

        ChatFooterView.prototype.hideIndicator = function () {
            this.$sendBtn.html('<span class="agreeSendTxt"></span>');
        };

        ChatFooterView.prototype.clearInputMessage = function () {
            this.$textarea.val('');
        };

        ChatFooterView.prototype.storeDraft = function (draft) {
            AsyncStorage.Session.setItem(this.DRAFT_KEY, draft);
        };

        ChatFooterView.prototype.restoreDraft = function () {
            var draft = AsyncStorage.Session.getItem(this.DRAFT_KEY);
            if (_.isString(draft)) {
                this.$textarea.val(draft);
            }
        };

        ChatFooterView.prototype.deleteDraft = function () {
            AsyncStorage.Session.removeItem(this.DRAFT_KEY);
        };

        ChatFooterView.prototype.prepareByPermission = function () {
            if (this.permission.hasPenalty()) {
                this.disableTextArea();
                this.deleteDraft();
                this.clearInputMessage();
                this.disableSendButton();
                $('aside', this.$el).filter('#penalty-message').show().not('#penalty-message').hide();
                this.paletteComponents.hidePaletteButton();
            }
        };

        ChatFooterView.prototype.messageSendSucceed = function () {
            this.deleteDraft();
            this.clearInputMessage();
            this.disableSendButton();
            this.disableSend();
            this.enableTextArea();
            this.hideIndicator();
            this.hideAgreementMessage();
        };

        ChatFooterView.prototype.messageSendFailed = function (error) {
            SNS.Analytics.event('error_sendFailed');
            this.enableSend();
            this.enableTextArea();
            this.hideIndicator();
            if (error instanceof Cobit.AccessTokenExpireError || error instanceof Cobit.AuthenticationFailedError) {
                this.showError(error);
                return;
            }
            this.showErrorMessage(error.message);
        };

        ChatFooterView.prototype.showErrorMessage = function (message) {
            var _this = this;
            this.$errorMessage.find('.fsS').text(message);
            this.$errorMessage.show();
            setTimeout(function () {
                return _this.$errorMessage.hide();
            }, 3000);
        };

        ChatFooterView.prototype.offLine = function () {
            this.enableSend();
            this.enableTextArea();
            this.hideIndicator();
            var message = Blitz.Language.getMessage('chat.error_send_offline');
            this.showErrorMessage(message);
        };
        return ChatFooterView;
    })(Blitz.BlitzView);
    Blitz.ChatFooterView = ChatFooterView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var SSEBaseView = (function (_super) {
        __extends(SSEBaseView, _super);
        function SSEBaseView(viewModel, option) {
            var _this = this;
            _super.call(this, option);

            viewModel.on('messageReceivedEvent', function (event) {
                return _this.messageReceivedEvent(event);
            });

            viewModel.on('messageSuspendedEvent', function (event) {
                return _this.messageSuspendedEvent(event);
            });

            viewModel.on('messageRejectedEvent', function (event) {
                return _this.messageRejectedEvent(event);
            });

            viewModel.on('messageDeletedEvent', function (event) {
                return _this.messageDeletedEvent(event);
            });

            viewModel.on('conversationCreatedEvent', function (event) {
                return _this.conversationCreatedEvent(event);
            });

            viewModel.on('conversationDeletedEvent', function (event) {
                return _this.conversationDeletedEvent(event);
            });

            viewModel.on('conversationUpdatedEvent', function (event) {
                return _this.conversationUpdatedEvent(event);
            });

            viewModel.on('userAddedEvent', function (event) {
                return _this.userAddedEvent(event);
            });

            viewModel.on('userLeftEvent', function (event) {
                return _this.userLeftEvent(event);
            });

            viewModel.on('otherConversationEvent', function (event) {
                return _this.otherConversationEvent(event);
            });

            viewModel.on('controlDisconnected', function (event) {
                return _this.controlDisconnected(event);
            });

            viewModel.on('offline', function () {
                return _this.offLine();
            });
        }
        SSEBaseView.prototype.messageReceivedEvent = function (event) {
        };
        SSEBaseView.prototype.messageSuspendedEvent = function (event) {
        };
        SSEBaseView.prototype.messageRejectedEvent = function (event) {
        };
        SSEBaseView.prototype.messageDeletedEvent = function (event) {
        };
        SSEBaseView.prototype.conversationCreatedEvent = function (event) {
        };
        SSEBaseView.prototype.conversationDeletedEvent = function (event) {
        };
        SSEBaseView.prototype.conversationUpdatedEvent = function (event) {
        };
        SSEBaseView.prototype.userAddedEvent = function (event) {
        };
        SSEBaseView.prototype.userLeftEvent = function (event) {
        };
        SSEBaseView.prototype.otherConversationEvent = function (event) {
        };

        SSEBaseView.prototype.controlDisconnected = function (event) {
            this.reload();
        };

        SSEBaseView.prototype.offLine = function () {
            this.showAlert(Blitz.Language.getMessage('chat.error_offline'));
        };
        return SSEBaseView;
    })(Blitz.BlitzView);
    Blitz.SSEBaseView = SSEBaseView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationService = (function () {
        function ConversationService(client) {
            this.client = client;
            this.conversationRepository = Blitz.ConversationRepository.ofApi(client);
            this.blockUserRepository = Blitz.BlockUserRepository.ofApi();
            this.loadComplete = false;
        }
        ConversationService.prototype.getUpdatedParticipatingListWithFilter = function (range) {
            var _this = this;
            var promise = new monapt.Promise();
            var request = this.conversationRepository.getUpdatedParticipatingList(range);
            request.next(function (participatingList) {
                promise.success((_this.filterOneOnOneWithBlockUser(participatingList)));
            });
            request.error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        ConversationService.prototype.getParticipatingListWithFilter = function (range) {
            var _this = this;
            var defer = new Deferred();
            var request = this.conversationRepository.getParticipatingList(range);
            request.next(function (participatingList) {
                if (participatingList.length < range.limit) {
                    _this.loadComplete = true;
                }
                defer.call(_this.filterOneOnOneWithBlockUser(participatingList));
            });
            request.error(function (error) {
                return defer.fail(error);
            });
            return defer;
        };

        ConversationService.prototype.filterOneOnOneWithBlockUser = function (participatingList) {
            return participatingList.filter(function (conversation) {
                return !conversation.isOneOnOneWithBlockUser();
            });
        };
        return ConversationService;
    })();
    Blitz.ConversationService = ConversationService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var MergedConversationService = (function () {
        function MergedConversationService(conversationService, deliveryRepository) {
            this.conversationService = conversationService;
            this.deliveryRepository = deliveryRepository;
        }
        MergedConversationService.prototype.getUpdatedParticipatingList = function (range) {
            var deliveriesFuture = this.deliveryRepository.getList();
            var conversationsDeferred = this.conversationService.getUpdatedParticipatingListWithFilter(range);

            return deliveriesFuture.flatMap(function (deliveries) {
                return conversationsDeferred.map(function (conversations, promise) {
                    var merged = deliveries.concat(conversations);
                    merged.sort(function (a, b) {
                        return b.getUpdateTime() - a.getUpdateTime();
                    });
                    promise.success(merged);
                });
            });
        };
        return MergedConversationService;
    })();
    Blitz.MergedConversationService = MergedConversationService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (ConversationDisplayType) {
        ConversationDisplayType[ConversationDisplayType["Visible"] = 0] = "Visible";
        ConversationDisplayType[ConversationDisplayType["Hidden"] = 1] = "Hidden";
    })(Blitz.ConversationDisplayType || (Blitz.ConversationDisplayType = {}));
    var ConversationDisplayType = Blitz.ConversationDisplayType;

    var ConversationCollection = (function (_super) {
        __extends(ConversationCollection, _super);
        function ConversationCollection(displayType) {
            _super.call(this);
            this.displayType = displayType;
            this.DISPLAY_LIMIT = 10;
            this.LIMIT_UPDATED_PARTICIPATING = 100;
            this.LIMIT_PARTICIPATING = 50;
            this.initIndex();
            this.isSwitchApi = false;
            this.tmpStorage = [];
            this.conversationService = new Blitz.ConversationService(app.cobit);
            this.mergedConversationService = new Blitz.MergedConversationService(this.conversationService, Blitz.DeliveryRepository.ofApi());
        }
        ConversationCollection.prototype.switchApi = function () {
            this.isSwitchApi = true;
            this.initIndex();
        };

        ConversationCollection.prototype.initIndex = function () {
            this.currentIndex = 0;
        };

        ConversationCollection.prototype.loadNext = function () {
            if (this.getConversationListFromCache()) {
                return;
            }

            if (this.conversationService.loadComplete && _.isEmpty(this.tmpStorage)) {
                this.loadCompleted();
                return;
            }

            if (!this.isSwitchApi) {
                this.switchApi();
                this.getUpdatedConversationList(new SNS.Range(this.LIMIT_UPDATED_PARTICIPATING, this.currentIndex));
            } else {
                this.getConversationList(new SNS.Range(this.LIMIT_PARTICIPATING + 1, this.currentIndex));
            }
        };

        ConversationCollection.prototype.getConversationListFromCache = function () {
            var rest = [], items = [];
            if (this.tmpStorage.length) {
                rest = this.tmpStorage.splice(this.DISPLAY_LIMIT);
                items = this.tmpStorage;
                this.tmpStorage = rest;
                this.addItems(items);
                this.loadSucceed(items);
                return true;
            }

            return false;
        };

        ConversationCollection.prototype.filterByDisplayType = function (conversations) {
            switch (this.displayType) {
                case 0 /* Visible */:
                    return _.filter(conversations, function (c) {
                        return c.isDisplayed();
                    });
                case 1 /* Hidden */:
                    return _.filter(conversations, function (c) {
                        return c.isHidden();
                    });
            }
        };

        ConversationCollection.prototype.getUpdatedConversationList = function (range) {
            var _this = this;
            var future = this.mergedConversationService.getUpdatedParticipatingList(range);
            future.onSuccess(function (conversationList) {
                var displayConversations = _this.filterByDisplayType(conversationList);
                if (displayConversations.length > _this.DISPLAY_LIMIT) {
                    _this.tmpStorage = displayConversations.splice(_this.DISPLAY_LIMIT);
                }
                _this.addItems(displayConversations);
                _this.loadSucceed(displayConversations);
            });
            future.onFailure(function (error) {
                return _this.loadFailed(error);
            });
        };

        ConversationCollection.prototype.getConversationList = function (range) {
            var _this = this;
            var getConversation = this.conversationService.getParticipatingListWithFilter(range);
            getConversation.next(function (conversationList) {
                _this.currentIndex += _.isEmpty(conversationList) ? 0 : conversationList.length - 1;
                var displayConversations = _this.filterByDisplayType(conversationList);
                var uniqueConversations = _this.filterDuplicatedConversation(displayConversations);
                if (uniqueConversations.length > _this.DISPLAY_LIMIT) {
                    _this.tmpStorage = uniqueConversations.splice(_this.DISPLAY_LIMIT);
                }
                _this.addItems(uniqueConversations);
                _this.loadSucceed(uniqueConversations);
            });
            getConversation.error(function (error) {
                return _this.loadFailed(error);
            });
        };

        ConversationCollection.prototype.filterDuplicatedConversation = function (conversationList) {
            var _this = this;
            return conversationList.filter(function (conversation) {
                var duplicated = _this.items.some(function (item) {
                    return item.equals(conversation);
                });
                return !duplicated;
            });
        };

        ConversationCollection.prototype.deleteItem = function (conversation) {
            var _this = this;
            this.items.some(function (item, idx) {
                if (conversation.equals(item)) {
                    delete _this.items[idx];
                    return true;
                }
                return false;
            });
        };
        return ConversationCollection;
    })(SNS.LoadMoreCollection);
    Blitz.ConversationCollection = ConversationCollection;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var BlitzViewModel = (function (_super) {
        __extends(BlitzViewModel, _super);
        function BlitzViewModel() {
            _super.call(this);
            this.conversationRepo = Blitz.ConversationRepository.ofApi(app.cobit);
        }
        BlitzViewModel.prototype.newEventReceived = function (event) {
            switch (event.type) {
                case 7 /* MessageReceived */:
                    this.emitMessageReceived(event);
                    break;
                case 10 /* MessageSuspended */:
                    this.emitMessageSuspended(event);
                    break;
                case 11 /* MessageRejected */:
                    this.emitMessageRejected(event);
                    break;
                case 9 /* MessageDeleted */:
                    this.emitMessageDeleted(event);
                    break;
                case 0 /* Created */:
                    this.emitConversationCreated(event);
                    break;
                case 2 /* Deleted */:
                    this.emitConversationDeleted(event);
                    break;
                case 1 /* Updated */:
                    this.emitConversationUpdated(event);
                    break;
                case 5 /* UserAdded */:
                    this.emitUserAdded(event);
                    break;
                case 6 /* UserLeft */:
                    this.emitUserLeft(event);
                    break;
                case 14 /* ControlDisconnected */:
                    this.emitControlDisconnected(event);
                    break;
                default:
                    debug('undefined event type: ' + event.type);
                    this.emitOtherConversation(event);
            }
        };

        BlitzViewModel.prototype.emitMessageReceived = function (event) {
            var _this = this;
            var conversationId = event.getToConversationId();
            this.conversationRepo.getConversation(conversationId).map(function (r, p) {
                if (!r.isOneOnOneWithBlockUser()) {
                    _this.emit('messageReceivedEvent', event);
                }
            });
        };

        BlitzViewModel.prototype.emitMessageSuspended = function (event) {
            this.emit('messageSuspendedEvent', event);
        };

        BlitzViewModel.prototype.emitMessageRejected = function (event) {
            this.emit('messageRejectedEvent', event);
        };

        BlitzViewModel.prototype.emitMessageDeleted = function (event) {
            this.emit('messageDeletedEvent', event);
        };

        BlitzViewModel.prototype.emitConversationCreated = function (event) {
            if (!event.getEventContents().getConversation().isOneOnOneWithBlockUser()) {
                this.emit('conversationCreatedEvent', event);
            }
        };

        BlitzViewModel.prototype.emitConversationDeleted = function (event) {
            IdentityService.Cache.deleteConversationFromCache(event.conversationIdentity);
            this.emit('conversationDeletedEvent', event);
        };

        BlitzViewModel.prototype.emitConversationUpdated = function (event) {
            IdentityService.Cache.deleteConversationFromCache(event.conversationIdentity);
            this.emit('conversationUpdatedEvent', event);
        };

        BlitzViewModel.prototype.emitUserAdded = function (event) {
            IdentityService.Cache.deleteConversationFromCache(event.conversationIdentity);
            this.emit('userAddedEvent', event);
        };

        BlitzViewModel.prototype.emitUserLeft = function (event) {
            IdentityService.Cache.deleteConversationFromCache(event.conversationIdentity);
            this.emit('userLeftEvent', event);
        };

        BlitzViewModel.prototype.emitControlDisconnected = function (event) {
            this.emit('controlDisconnected', event);
        };

        BlitzViewModel.prototype.emitOtherConversation = function (event) {
            this.emit('otherConversationEvent', event);
        };
        return BlitzViewModel;
    })(EventEmitter);
    Blitz.BlitzViewModel = BlitzViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatListViewModel = (function (_super) {
        __extends(ChatListViewModel, _super);
        function ChatListViewModel(displayType) {
            _super.call(this);
            this.displayType = displayType;
            this.conversationCollection = new Blitz.ConversationCollection(displayType);
            this.userRepository = Blitz.UserRepository.ofApi();
        }
        ChatListViewModel.prototype.emitMessageReceived = function (event) {
            var targetConversation = _.find(this.conversationCollection.items, function (conversation) {
                return conversation.getIdentity().equals(event.conversationIdentity);
            });

            if (!_.isUndefined(targetConversation)) {
                this.conversationCollection.deleteItem(targetConversation);

                this.conversationCollection.items.unshift(targetConversation);
                this.emit('moveTopOfList', targetConversation);
            }
            _super.prototype.emitMessageReceived.call(this, event);
        };
        return ChatListViewModel;
    })(Blitz.BlitzViewModel);
    Blitz.ChatListViewModel = ChatListViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ReadingService = (function () {
        function ReadingService(client) {
            this.client = client;
            this.conversationFactory = new Blitz.ConversationFactory();
            this.deliveryRepo = Blitz.DeliveryRepository.ofApi();
        }
        ReadingService.prototype.getHiddenMergedConversationsUnreadCount = function () {
            var fConversationsUnreadCount = this.getHiddenConversationsUnreadCount();
            var fDeliveriesUnreadCount = this.getHiddenDeliveriesUnreadCount();
            return fConversationsUnreadCount.flatMap(function (conversationsUnreadCount) {
                return fDeliveriesUnreadCount.map(function (deliveriesUnreadCount, promise) {
                    return promise.success(conversationsUnreadCount + deliveriesUnreadCount);
                });
            });
        };

        ReadingService.prototype.getHiddenConversationsUnreadCount = function () {
            var _this = this;
            var promise = new monapt.Promise();
            this.client.getHiddenConversationsUnreadCount().next(function (response) {
                var iConversations = response['conversations'];
                var unreadCount = _.chain(iConversations).map(function (ic) {
                    return _this.conversationFactory.create(ic);
                }).filter(function (c) {
                    return !c.isOneOnOneWithBlockUser();
                }).foldl(function (memo, c) {
                    return memo + c.unreadCount;
                }, 0).value();
                promise.success(unreadCount);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        ReadingService.prototype.getHiddenDeliveriesUnreadCount = function () {
            return this.deliveryRepo.getList().map(function (deliveries, promise) {
                var unreadCount = _.chain(deliveries).filter(function (d) {
                    return d.isHidden();
                }).foldl(function (memo, d) {
                    return memo + d.unreadCount;
                }, 0).value();
                promise.success(unreadCount);
            });
        };
        return ReadingService;
    })();
    Blitz.ReadingService = ReadingService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var HiddenChatListLinkViewModel = (function (_super) {
        __extends(HiddenChatListLinkViewModel, _super);
        function HiddenChatListLinkViewModel() {
            _super.apply(this, arguments);
            this.readingService = new Blitz.ReadingService(app.cobit);
        }
        HiddenChatListLinkViewModel.prototype.hiddenConversationsUnreadCount = function () {
            var _this = this;
            var future = this.readingService.getHiddenMergedConversationsUnreadCount();
            future.onSuccess(function (unreadCount) {
                _this.emit('loadedHiddenConversationsUnreadCount', unreadCount);
            });
        };
        return HiddenChatListLinkViewModel;
    })(Blitz.BlitzViewModel);
    Blitz.HiddenChatListLinkViewModel = HiddenChatListLinkViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var NotSupportedDeviceLinkView = (function (_super) {
        __extends(NotSupportedDeviceLinkView, _super);
        function NotSupportedDeviceLinkView() {
            _super.call(this, {
                className: 'unit'
            });
            this.template = new SNS.HBSTemplate('chat/list/not-supported-device.hbs');
        }
        NotSupportedDeviceLinkView.prototype.events = function () {
            var _this = this;
            return {
                'click .js-not-supported-device': function () {
                    return _this.linkTo("https://ja.help.gree.net/faq.asp?faqid=6044&sugtype=3&logid=565462966&detailid=12,18");
                }
            };
        };

        NotSupportedDeviceLinkView.prototype.render = function () {
            if (SNS.Config.isNotSupportedDevice()) {
                this.$el.html(this.template.render());
            }
            return this;
        };
        return NotSupportedDeviceLinkView;
    })(Blitz.BlitzView);
    Blitz.NotSupportedDeviceLinkView = NotSupportedDeviceLinkView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var IntroLinkView = (function (_super) {
        __extends(IntroLinkView, _super);
        function IntroLinkView() {
            _super.call(this, {
                tagName: 'section',
                className: 'unit'
            });
            this.introLinkTemplate = new SNS.HBSTemplate('intro-link.hbs');
        }
        IntroLinkView.prototype.events = function () {
            return {
                'click .tap': 'jumpToIntro'
            };
        };

        IntroLinkView.prototype.render = function () {
            if (SNS.Config.isAgeUnder13()) {
                return this;
            }

            if (SNS.Config.willMaintenance()) {
                this.$el.append(this.renderIntroLink(Util.getFormattedDateString('chat.link_intro_with_maintenance', SNS.Config.getMaintenanceStartingDate())));
            } else if (SNS.Config.isMaintenance()) {
                this.$el.append(this.renderIntroLink(Blitz.Language.getMessage('chat.link_intro_with_under_maintenance')));
            }

            return this;
        };

        IntroLinkView.prototype.renderIntroLink = function (message) {
            return this.introLinkTemplate.render({
                message: message
            });
        };

        IntroLinkView.prototype.jumpToIntro = function () {
            this.linkTo('chat#view=chat_intro');
        };
        return IntroLinkView;
    })(Blitz.BlitzView);
    Blitz.IntroLinkView = IntroLinkView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var AnnounceLinkView = (function (_super) {
        __extends(AnnounceLinkView, _super);
        function AnnounceLinkView(message, url) {
            _super.call(this, {
                tagName: 'section',
                className: 'unit'
            });
            this.message = message;
            this.url = url;
            this.template = new SNS.HBSTemplate('intro-link.hbs');
        }
        AnnounceLinkView.prototype.events = function () {
            var _this = this;
            return {
                'click .tap': function () {
                    return _this.linkTo(_this.url);
                }
            };
        };

        AnnounceLinkView.prototype.render = function () {
            this.$el.append(this.template.render({
                message: this.message
            }));
            return this;
        };
        return AnnounceLinkView;
    })(Blitz.BlitzView);
    Blitz.AnnounceLinkView = AnnounceLinkView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var AnnounceLinkViews = (function (_super) {
        __extends(AnnounceLinkViews, _super);
        function AnnounceLinkViews(announces) {
            _super.call(this, {
                tagName: 'section'
            });
            this.announces = announces;
        }
        AnnounceLinkViews.prototype.render = function () {
            var _this = this;
            _.each(this.announces, function (announce) {
                _this.$el.append(new Blitz.AnnounceLinkView(announce['announce_text'], announce['announce_url']).render().$el);
            });
            return this;
        };
        return AnnounceLinkViews;
    })(Blitz.BlitzView);
    Blitz.AnnounceLinkViews = AnnounceLinkViews;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ListItemLinkView = (function (_super) {
        __extends(ListItemLinkView, _super);
        function ListItemLinkView(args) {
            _super.call(this, {
                tagName: 'section',
                className: 'unit'
            });
            this.args = args;
            this.template = new SNS.HBSTemplate('list-item-link.hbs');
        }
        ListItemLinkView.prototype.events = function () {
            var _this = this;
            return {
                'click .js-list-item-link': function (event) {
                    return _this.linkTo($(event.currentTarget).attr('data-url'));
                }
            };
        };

        ListItemLinkView.prototype.render = function () {
            var _this = this;
            _.each(this.args, function (a) {
                _this.$el.append(_this.template.render({
                    title: a.title,
                    url: a.url
                }));
            });

            return this;
        };
        return ListItemLinkView;
    })(Blitz.BlitzView);
    Blitz.ListItemLinkView = ListItemLinkView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeprecatedPCBrowserView = (function (_super) {
        __extends(DeprecatedPCBrowserView, _super);
        function DeprecatedPCBrowserView() {
            _super.call(this, {
                tagName: 'section',
                className: 'unit'
            });
            this.template = new SNS.HBSTemplate('chat/deprecated-pc-browser.hbs');
        }
        DeprecatedPCBrowserView.prototype.render = function () {
            if (SNS.Config.isDeprecatedPCBrowser()) {
                this.$el.append(this.renderTemplate());
            }
            return this;
        };

        DeprecatedPCBrowserView.prototype.renderTemplate = function () {
            return this.template.render({
                url_root_img: SNS.Config.getDeprecatedPCBrowserImgRootURL()
            });
        };
        return DeprecatedPCBrowserView;
    })(Blitz.BlitzView);
    Blitz.DeprecatedPCBrowserView = DeprecatedPCBrowserView;
})(Blitz || (Blitz = {}));

var Ads;
(function (Ads) {
    var AdInformation = (function () {
        function AdInformation() {
            this.getBrowserType = 2;
        }
        AdInformation.prototype.fetch = function (done) {
            if ($('#greeads').length == 0) {
                return;
            }

            var forceInit = function () {
                GREEADS.force_init();
                GREEADS.load();
                done();
            };

            if (window['GREEADS']) {
                forceInit();
            } else {
                this.loadAdJs(forceInit);
            }
        };

        AdInformation.prototype.prepareHTML = function (options) {
            var me = options.me;
            var pos = options.pos || 'SP';
            if (!me) {
                throw new Error('me is required');
            }

            var tag = _.map(this.getCustomAttr(me), function (value, key) {
                return '<div class="greeads-custom" data-greeads-custom-key="' + key + '" data-greeads-custom-value="' + value + '"></div>';
            }).join('');

            var attr = _.map(this.getGreeAdsAttr(options), function (value, key) {
                return key + '=' + value;
            }).join(' ');

            return '<div class="greeads greeads-pos-' + pos + '" style="display: block;"></div>' + tag + '<div id="greeads" ' + attr + '></div>';
        };

        AdInformation.prototype.loadAdJs = function (onloadFunc) {
            var adJs = document.createElement('script');
            adJs.type = 'text/javascript';
            adJs.onload = onloadFunc;
            adJs.src = SNS.Config.getAdDomain() + "greeads_loader.js";
            document.body.appendChild(adJs);
        };

        AdInformation.prototype.getOSType = function () {
            if (SNS.Config.isAndroid()) {
                return 1;
            } else if (SNS.Config.isIOS()) {
                return 2;
            } else {
                return 0;
            }
        };

        AdInformation.prototype.getGreeAdsAttr = function (options) {
            var spid = options['spid'];
            var overlay = options['overlay'] || null;
            var sdkv = options['sdkv'] || null;
            if (!spid) {
                throw new Error('spid is required!');
            }

            var attr = {
                'data-greeads-spid': spid,
                'data-greeads-mode': '2'
            };

            if (SNS.Config.isAdsAppendHost()) {
                attr['data-greeads-greeappshost'] = SNS.Config.getAppsDomain();
                attr['data-greeads-greerdurl'] = SNS.Config.getAdsDomain();
            }

            if (overlay) {
                attr['data-greeads-overlay'] = overlay;
            }

            if (sdkv) {
                attr['data-greeads-greesdkv'] = sdkv;
            }
            return attr;
        };

        AdInformation.prototype.getCustomAttr = function (user) {
            if (!user) {
                throw new Error('user info is required');
            }

            return {
                g: user.gender,
                b: user.birthday ? user.birthday.slice(0, 4) : null,
                l: user.language ? user.language.slice(0, 2) : null,
                r: user.language ? user.language.slice(-2) : null,
                greeid: user.user_id,
                a: user.region,
                o: this.getOSType(),
                brt: this.getBrowserType
            };
        };
        return AdInformation;
    })();
    Ads.AdInformation = AdInformation;
})(Ads || (Ads = {}));
var Blitz;
(function (Blitz) {
    var AdView = (function (_super) {
        __extends(AdView, _super);
        function AdView(spid) {
            if (typeof spid === "undefined") { spid = 112; }
            _super.call(this, {
                className: 'taC'
            });
            this.spid = spid;

            this.ad = new Ads.AdInformation();
            this.$loading = $(new SNS.HBSTemplate("loading.hbs").render());
        }
        AdView.isDisplayable = function () {
            return !AdView.isForbidden();
        };

        AdView.isForbidden = function () {
            return SNS.Config.isPC() || (SNS.Config.isIOS() && (SNS.Config.isApp() || SNS.Config.isSDK()));
        };

        AdView.prototype.prepareAdSpace = function (px) {
            if (typeof px === "undefined") { px = '50px'; }
            this.$el.css('min-height', px);
        };

        AdView.prototype.showIndicator = function () {
            this.$el.append(this.$loading);
        };

        AdView.prototype.hideIndicator = function () {
            this.$loading.remove();
        };

        AdView.prototype.fetchAd = function () {
            var _this = this;
            this.ad.fetch(function () {
                return _this.hideIndicator();
            });
        };

        AdView.prototype.render = function () {
            if (AdView.isDisplayable()) {
                this.$el.html(this.ad.prepareHTML({
                    me: SNS.Config.getMyself(),
                    spid: this.spid
                }));
                this.prepareAdSpace();
                this.showIndicator();
            }
            return this;
        };
        return AdView;
    })(Blitz.BlitzView);
    Blitz.AdView = AdView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ReleaseAnnounceDialogView = (function (_super) {
        __extends(ReleaseAnnounceDialogView, _super);
        function ReleaseAnnounceDialogView(flag, params) {
            _super.call(this);
            this.flag = flag;
            this.params = params;
            this.template = new SNS.HBSTemplate('dialog/release-announce-dialog.hbs');
            this.flagService = Blitz.FlagService.ofSnsApi();
        }
        ReleaseAnnounceDialogView.prototype.events = function () {
            return {
                'click .js-action': 'action'
            };
        };

        ReleaseAnnounceDialogView.prototype.render = function () {
            this.$el.append(this.template.render({
                imagePath: this.params.imagePath,
                body: this.params.body,
                actionLabel: this.params.actionLabel || Blitz.Language.getMessage('chat.ok')
            }));
            return this;
        };

        ReleaseAnnounceDialogView.prototype.show = function () {
            $('#dataArea').before(this.$el);
            return this;
        };

        ReleaseAnnounceDialogView.prototype.action = function () {
            var _this = this;
            this.$el.remove();
            if (!_.isUndefined(this.params.actionAfterHide)) {
                this.params.actionAfterHide();
            }
            this.flagService.up(this.flag).error(function (error) {
                return _this.showError(error);
            });
        };
        return ReleaseAnnounceDialogView;
    })(SNS.SnsView);
    Blitz.ReleaseAnnounceDialogView = ReleaseAnnounceDialogView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var HiddenChatListLinkView = (function (_super) {
        __extends(HiddenChatListLinkView, _super);
        function HiddenChatListLinkView(viewModel) {
            var _this = this;
            _super.call(this, {
                tagName: 'section',
                className: 'unit'
            });
            this.template = new SNS.HBSTemplate('chat/list/hidden-chat-list-link.hbs');

            viewModel.on('loadedHiddenConversationsUnreadCount', function (unreadCountEvents) {
                _this.renderUnreadCounts(unreadCountEvents);
            });
        }
        HiddenChatListLinkView.prototype.events = function () {
            var _this = this;
            return {
                'click .js-list-item-link': function (event) {
                    return _this.linkTo($(event.currentTarget).attr('data-url'));
                }
            };
        };

        HiddenChatListLinkView.prototype.render = function () {
            this.$el.append(this.template.render({
                title: Blitz.Language.getMessage('chat.chat_hidden_list_name'),
                url: "chat#view=chat_hidden_list"
            }));
            return this;
        };

        HiddenChatListLinkView.prototype.renderUnreadCounts = function (unreadCount) {
            this.renderUnreadCount(unreadCount);
        };

        HiddenChatListLinkView.prototype.renderUnreadCount = function (unreadCount) {
            if (unreadCount > 0) {
                var $unreadTag = $('.tag.skYellow', this.$el);
                var $tagCont = $('.tagCont', $unreadTag);
                $tagCont.attr('data-unread-count', unreadCount);
                var outputCount = '' + unreadCount;
                if (unreadCount > 99) {
                    outputCount = '99+';
                }
                $tagCont.text(outputCount);
                $unreadTag.show();
                $(".cst", this.$el).addClass('unread');
            }
        };
        return HiddenChatListLinkView;
    })(Blitz.BlitzView);
    Blitz.HiddenChatListLinkView = HiddenChatListLinkView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var BaseChatListView = (function (_super) {
        __extends(BaseChatListView, _super);
        function BaseChatListView(viewModel) {
            var _this = this;
            _super.call(this, viewModel, { className: 'contr' });
            this.viewModel = viewModel;

            this.viewModel.on('moveTopOfList', function (conversation) {
                _this.moveTopOfList(conversation);
            });

            this.viewModel.conversationCollection.on('loadSucceed', function (r) {
                _this.getConversationListSucceed(r);
            });
            this.viewModel.conversationCollection.on('loadFailed', function (error) {
                _this.getConversationListFail(error);
            });

            this.updateBadgeOnlyOnce = _.once(this.updateBadge);
        }
        BaseChatListView.prototype.renderViews = function () {
            debug("must override!");
        };

        BaseChatListView.prototype.render = function () {
            this.renderViews();
            Gryfon.addPersistentListener("leave-chat", function () {
                window.location.reload();
            });
            Gryfon.addPersistentListener("read-past-message", function () {
                window.location.reload();
            });
            return this;
        };

        BaseChatListView.prototype.renderUnreadCount = function (conversationId, unreadCount) {
            if (unreadCount > 0) {
                var $el = $('#' + conversationId);
                if (!$el.length) {
                    return;
                }
                var $unreadTag = $('.tag.skYellow', $el);
                var $tagCont = $('.tagCont', $unreadTag);
                $tagCont.attr('data-unread-count', unreadCount);
                var outputCount = '' + unreadCount;
                if (unreadCount > 99) {
                    outputCount = '99+';
                }
                $tagCont.text(outputCount);
                $unreadTag.show();
                $el.addClass('unread');
            }
        };

        BaseChatListView.prototype.renderHeadline = function (headline) {
            var $el = $('#' + headline.conversationId());
            if (!$el.length) {
                return;
            }

            $el.find('.minor.ellp.fsS').html(headline.value());

            $el.find('.minor.fsS:not(.ellp)').children().first().text(headline.formattedCtime());
        };

        BaseChatListView.prototype.messageReceivedEvent = function (event) {
            var _this = this;
            var conversationId = event.conversationIdentity.getValue();
            var message = event.getEventContents().getMessage();
            var headline = new Blitz.Headline(message);

            if ($('#' + conversationId).length) {
                this.renderHeadline(headline);
                this.updateUnreadCount(conversationId);
                this.beUnread(conversationId);
                return;
            }

            this.getAndRerenderConversation(conversationId, function () {
                _this.renderHeadline(headline);
                _this.updateUnreadCount(conversationId);
                _this.beUnread(conversationId);
            });
        };

        BaseChatListView.prototype.updateUnreadCount = function (conversationId) {
            var $unreadTag = $('.tag.skYellow', $('#' + conversationId));
            if (_.isEmpty($unreadTag)) {
                return;
            }
            var count = 1;
            var dataUnreadCount = $('.tagCont', $unreadTag).attr('data-unread-count');
            if (!_.isNull(dataUnreadCount)) {
                count += parseInt(dataUnreadCount);
            }
            this.renderUnreadCount(conversationId, count);
        };

        BaseChatListView.prototype.conversationCreatedEvent = function (event) {
            var _this = this;
            var conversationId = event.conversationIdentity.getValue();

            if ($('#' + conversationId).length) {
                return;
            }
            this.getAndRerenderConversation(conversationId, function () {
                _this.addNewBadge(conversationId);
                _this.beUnread(conversationId);
            });
        };

        BaseChatListView.prototype.userLeftEvent = function (event) {
            var participantNum = event.getEventContents().conversation.participants.length;
            this.decrementParticipantNum(event.conversationIdentity.getValue(), participantNum);
        };

        BaseChatListView.prototype.userAddedEvent = function (event) {
            var _this = this;
            var conversationId = event.conversationIdentity.getValue();
            var $conversation = $('#' + conversationId);

            if ($conversation.length) {
                var addedCount = event.getEventContents().getAddUsers().length;
                this.incrementParticipantNum(conversationId, addedCount);
                return;
            }

            if (!event.getEventContents().isContainMyself()) {
                return;
            }

            this.getAndRerenderConversation(conversationId, function () {
                _this.addNewBadge(conversationId);
                _this.beUnread(conversationId);
            });
        };

        BaseChatListView.prototype.conversationUpdatedEvent = function (event) {
            this.getAndRerenderConversation(event.conversationIdentity.getValue(), function () {
                var conversation = event.getEventContents().getConversation();
                var name = new Util.Text(conversation.name).escape().convertEmoji().disableATag().text;
                var $conversation = $('#' + conversation.getIdentity().getValue());
                $conversation.find('.lead').html(name);
                var $parent = $conversation.parent();
                $conversation.remove();
                $parent.prepend($conversation);
            });
        };

        BaseChatListView.prototype.renderConversationList = function () {
            return new Blitz.ConversationCollectionView(this.viewModel).render().$el;
        };

        BaseChatListView.prototype.satisfiedRerenderConversation = function (conversation) {
            debug("must override!");
            return true;
        };

        BaseChatListView.prototype.getAndRerenderConversation = function (conversationId, done) {
            var _this = this;
            if (typeof done === "undefined") { done = function () {
            }; }
            var conversationRepo = Blitz.ConversationRepository.ofApi(app.cobit);
            var getConversation = conversationRepo.getConversation(conversationId);
            getConversation.onSuccess(function (conversation) {
                if (_this.satisfiedRerenderConversation(conversation)) {
                    var $conversation = $('#' + conversation.getIdentity().getValue());
                    if (!$conversation.length) {
                        _this.viewModel.conversationCollection.addNewItem(conversation);
                        _this.complementIdentities();
                    }
                }
                done();
            });
        };

        BaseChatListView.prototype.addNewBadge = function (conversationId) {
            var $badge = $('<div class="tag skPink"><span class="tagCont">NEW</span></div>');
            $('.tag.skYellow', '#' + conversationId).after($badge).remove();
        };

        BaseChatListView.prototype.beUnread = function (conversationId) {
            var $el = $('#' + conversationId).addClass('unread');
        };

        BaseChatListView.prototype.incrementParticipantNum = function (conversationId, addedCount) {
            var $participantNum = $('[data-participant-num]', $('#' + conversationId));
            var total = parseInt($participantNum.data('participant-num')) + addedCount;
            $participantNum.text(total);
            $participantNum.data('participant-num', total);
        };

        BaseChatListView.prototype.decrementParticipantNum = function (conversationId, participantNum) {
            var $participantNum = $('[data-participant-num]', $('#' + conversationId));
            $participantNum.text(participantNum);
            $participantNum.data('participant-num', participantNum);
        };

        BaseChatListView.prototype.moveTopOfList = function (conversation) {
            var $conversation = $('#' + conversation.getIdentity().getValue());
            $conversation.remove().prependTo('.collection-conversation');
        };

        BaseChatListView.prototype.getConversationListSucceed = function (mergedConversations) {
            if (!mergedConversations.length) {
                this.viewModel.emit('fetchAdOnce');
                return;
            }

            this.complementIdentities();

            var conversations = _.filter(mergedConversations, function (mergedConversation) {
                return mergedConversation.isConversation();
            });
            var deliveries = _.difference(mergedConversations, conversations);

            this.succeedWithConversations(conversations);
            this.succeedWithDeliveries(deliveries);

            this.viewModel.emit('fetchAdOnce');
        };

        BaseChatListView.prototype.succeedWithConversations = function (conversations) {
            var _this = this;
            if (!_.isEmpty(conversations)) {
                _.each(conversations, function (c) {
                    _this.renderUnreadCount(c.getConversationId(), c.unreadCount);
                });
            }
            this.updateBadgeOnlyOnce();
        };

        BaseChatListView.prototype.succeedWithDeliveries = function (deliveries) {
            var _this = this;
            if (!_.isEmpty(deliveries)) {
                _.each(deliveries, function (delivery) {
                    var headline = new Blitz.Headline(new Blitz.TextMessage(delivery.getIdentity().getValue(), delivery.publisher.getIdentity(), new Blitz.Meta(delivery.getUpdateTime(), null), delivery.headline));
                    _this.renderHeadline(headline);
                    _this.renderUnreadCount(delivery.getIdentity().getValue(), delivery.unreadCount);
                });
            }
        };

        BaseChatListView.prototype.getConversationListFail = function (error) {
            this.showError(error);
        };

        BaseChatListView.prototype.updateBadge = function () {
            Gryfon.updateBadge('chat', false);
        };
        return BaseChatListView;
    })(Blitz.SSEBaseView);
    Blitz.BaseChatListView = BaseChatListView;

    var ChatListView = (function (_super) {
        __extends(ChatListView, _super);
        function ChatListView(viewModel) {
            var _this = this;
            _super.call(this, viewModel);
            viewModel.once('fetchAdOnce', function () {
                if (Blitz.AdView.isDisplayable()) {
                    _this.fetchAd();
                }
            });

            var flagService = Blitz.FlagService.ofSnsApi();
            var releaseFlag = new Blitz.FlagReleaseStampPalette();

            if (flagService.isDown(releaseFlag) && SNS.Config.isAge13OrOlder() && new Date("2016/04/20 15:00") > new Date()) {
                new Blitz.ReleaseAnnounceDialogView(releaseFlag, {
                    imagePath: "http://aimg-static.gree.net/img/common/0c9fd6b932e4588cd8932144fc3d7da7692.jpg",
                    body: "チャットルーム内で、顔マークを押すとスタンプが使えるよ！",
                    actionLabel: "閉じる"
                }).render().show();
            }

            this.adView = new Blitz.AdView();
        }
        ChatListView.prototype.renderViews = function () {
            this.$el.append(this.renderDeprecatedPCBrowser(), this.renderAdLink(), this.renderAnnounceLink(), this.renderIntroLink(), this.renderNotSupportedDeviceLinkView(), this.renderConversationList(), this.renderHiddenChatListLink(), this.renderBottomLinks());
        };

        ChatListView.prototype.satisfiedRerenderConversation = function (conversation) {
            return conversation.isDisplayed();
        };

        ChatListView.prototype.renderDeprecatedPCBrowser = function () {
            return new Blitz.DeprecatedPCBrowserView().render().$el;
        };

        ChatListView.prototype.renderAnnounceLink = function () {
            var announces = SNS.Config.getAnnounces();
            return new Blitz.AnnounceLinkViews(announces).render().$el;
        };

        ChatListView.prototype.renderIntroLink = function () {
            return new Blitz.IntroLinkView().render().$el;
        };

        ChatListView.prototype.renderNotSupportedDeviceLinkView = function () {
            return new Blitz.NotSupportedDeviceLinkView().render().$el;
        };

        ChatListView.prototype.renderHiddenChatListLink = function () {
            var vm = new Blitz.HiddenChatListLinkViewModel();
            vm.hiddenConversationsUnreadCount();
            return new Blitz.HiddenChatListLinkView(vm).render().$el;
        };

        ChatListView.prototype.renderBottomLinks = function () {
            var args = [];
            if (SNS.Config.isAge13OrOlder()) {
                args.push({
                    title: Blitz.Language.getMessage('chat.link_faq'),
                    url: "http://gree.jp/r/78066/1?guid=ON"
                });
                if (!SNS.Config.isPC()) {
                    args.push({
                        title: Blitz.Language.getMessage('chat.link_chat_setting'),
                        url: "chat#view=chat_setting"
                    });
                }
            }

            if (!app.theme.isEmpty && app.theme.get().term.isValid) {
                args.push({
                    title: 'ハロウィン背景設定',
                    url: "chat#view=theme_setting"
                });
            }

            return new Blitz.ListItemLinkView(args).render().$el;
        };

        ChatListView.prototype.renderAdLink = function () {
            return this.adView.render().$el;
        };

        ChatListView.prototype.fetchAd = function () {
            this.adView.fetchAd();
        };
        return ChatListView;
    })(BaseChatListView);
    Blitz.ChatListView = ChatListView;

    var ChatHiddenListView = (function (_super) {
        __extends(ChatHiddenListView, _super);
        function ChatHiddenListView(viewModel) {
            _super.call(this, viewModel);
        }
        ChatHiddenListView.prototype.renderViews = function () {
            this.$el.append(this.renderChatListLinkView(), this.renderConversationList());
        };

        ChatHiddenListView.prototype.satisfiedRerenderConversation = function (conversation) {
            return conversation.isHidden();
        };

        ChatHiddenListView.prototype.renderChatListLinkView = function () {
            return new Blitz.ListItemLinkView([{
                    title: Blitz.Language.getMessage('chat.back_to_top'),
                    url: "chat#view=chat_list"
                }]).render().$el;
        };
        return ChatHiddenListView;
    })(BaseChatListView);
    Blitz.ChatHiddenListView = ChatHiddenListView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryTypeMark = (function () {
        function DeliveryTypeMark(delivery) {
            this.delivery = delivery;
        }
        DeliveryTypeMark.prototype.getElement = function () {
            switch (this.delivery.getConversationType()) {
                case 4 /* Game */:
                    return '<span class="mark skGreen spaceR vaM">GAME</span>';
                case 5 /* Official */:
                    return '<span class="mark skPink spaceR vaM">OFFICIAL</span>';
                case 6 /* Staff */:
                    return '<span class="mark spaceR vaM">STAFF</span>';
                case 7 /* Community */:
                    return '<span class="mark spaceR vaM">コミュニティ</span>';
                case 8 /* Special */:
                    return '<span class="mark spaceR vaM">SPECIAL</span>';
                default:
                    debug('Invalid type: ' + this.delivery.getConversationType());
            }
        };
        return DeliveryTypeMark;
    })();
    Blitz.DeliveryTypeMark = DeliveryTypeMark;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var PublisherIcon = (function () {
        function PublisherIcon(delivery) {
            this.delivery = delivery;
        }
        PublisherIcon.prototype.getElement = function () {
            var imageUrl = this.delivery.publisher.profileImageUrl;
            var type = this.delivery.isCommunity() ? 'comm' : 'usr';
            var $element = $('<div class="ico48 tap ' + type + '">');
            var formatted = _.isEmpty(imageUrl) ? $element : $element.css('background-image', 'url(' + imageUrl + ')');
            return $('<div>').html(formatted).html();
        };
        return PublisherIcon;
    })();
    Blitz.PublisherIcon = PublisherIcon;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EditConversationCollectionModeViewModel = (function (_super) {
        __extends(EditConversationCollectionModeViewModel, _super);
        function EditConversationCollectionModeViewModel() {
            _super.call(this);
            this.DEFAULT_MODE = false;
            this.isEditing = this.DEFAULT_MODE;
        }
        EditConversationCollectionModeViewModel.prototype.toggle = function () {
            if (this.isEditing) {
                this.toComplete();
            } else {
                this.toEdit();
            }
        };

        EditConversationCollectionModeViewModel.prototype.toEdit = function () {
            this.isEditing = true;
            this.emit("toEditMode");
        };

        EditConversationCollectionModeViewModel.prototype.toComplete = function () {
            this.isEditing = false;
            this.emit("toNormalMode");
        };

        EditConversationCollectionModeViewModel.prototype.edits = function () {
            return this.isEditing;
        };

        EditConversationCollectionModeViewModel.prototype.noEdits = function () {
            return !this.edits();
        };
        return EditConversationCollectionModeViewModel;
    })(Blitz.BlitzViewModel);
    Blitz.EditConversationCollectionModeViewModel = EditConversationCollectionModeViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EditConversationCollectionModeButtonView = (function (_super) {
        __extends(EditConversationCollectionModeButtonView, _super);
        function EditConversationCollectionModeButtonView(viewModel) {
            _super.call(this, {
                className: 'wrapBtnSSS'
            });
            this.viewModel = viewModel;
            this.normalModeTpl = new SNS.HBSTemplate('chat/list/edit-conversation-collection-mode-button/normal.hbs');
            this.editingModeTpl = new SNS.HBSTemplate("chat/list/edit-conversation-collection-mode-button/complete.hbs");
            this.viewModel.on('toEditMode', $.proxy(this.renderAsEditingMode, this));
            this.viewModel.on('toNormalMode', $.proxy(this.renderAsNormalMode, this));
        }
        EditConversationCollectionModeButtonView.prototype.events = function () {
            return {
                'click #conversationDisplaySetting': 'toggleMode'
            };
        };

        EditConversationCollectionModeButtonView.prototype.render = function () {
            if (SNS.Config.isChatRunning()) {
                this.renderAsNormalMode();
            }
            return this;
        };

        EditConversationCollectionModeButtonView.prototype.renderAsNormalMode = function () {
            this.$el.html(this.normalModeTpl.render());
        };

        EditConversationCollectionModeButtonView.prototype.renderAsEditingMode = function () {
            this.$el.html(this.editingModeTpl.render());
        };

        EditConversationCollectionModeButtonView.prototype.toggleMode = function () {
            if (this.viewModel.noEdits()) {
                SNS.Analytics.event('edit_conversation_display_mode');
            }
            this.viewModel.toggle();
        };
        return EditConversationCollectionModeButtonView;
    })(Blitz.BlitzView);
    Blitz.EditConversationCollectionModeButtonView = EditConversationCollectionModeButtonView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var CreateConversationModalView = (function (_super) {
        __extends(CreateConversationModalView, _super);
        function CreateConversationModalView(collection, items) {
            _super.call(this, collection, items);
            this.conversationRepo = Blitz.ConversationRepository.ofApi(app.cobit);
        }
        CreateConversationModalView.prototype.renderSelectableMemberCollection = function () {
            return new Blitz.SelectableMemberCollectionView(this.collection).render().$el;
        };

        CreateConversationModalView.prototype.validateBefore = function (targetUserRefKeys) {
            if (!_super.prototype.validateBefore.call(this, targetUserRefKeys)) {
                return false;
            }
            var num = targetUserRefKeys.length + 1;
            if (num > Blitz.GroupConversation.MEMBER_NUM_LIMIT) {
                SNS.Analytics.event('error_createMaxMemberNum');
                new Blitz.ExceedMemberDialogView().show();
                return false;
            }
            return true;
        };

        CreateConversationModalView.prototype.doExecute = function (targetUserRefKeys) {
            var _this = this;
            SNS.Analytics.event('decide_create', 'chat_member_select');
            if (targetUserRefKeys.length === 1) {
                this.getOrCreateOneOnOne(targetUserRefKeys);
            } else {
                this.conversationRepo.createAndAdd(targetUserRefKeys).next(function (converastion) {
                    SNS.Analytics.event('create_chat_group', 'chat_member_select');
                    _this.createSucceed(converastion);
                }).error(function (error) {
                    return _this.createFailed(error);
                });
            }
        };

        CreateConversationModalView.prototype.getOrCreateOneOnOne = function (targetUserRefKeys) {
            var _this = this;
            var myUserId = Blitz.Myself.getMe().getUserId();
            var targetUserId = targetUserRefKeys.pop();
            var conversationRefKey = Util.createConversationRefKey(myUserId, targetUserId);
            this.conversationRepo.getByRefKey(conversationRefKey).next(function (conversation) {
                _this.createSucceed(conversation);
            }).error(function (error) {
                _this.conversationRepo.createAndAdd([targetUserId], conversationRefKey).next(function (conversation) {
                    SNS.Analytics.event('create_chat_1on1', 'chat_member_select');
                    _this.createSucceed(conversation);
                }).error(function (error) {
                    return _this.createFailed(error);
                });
            });
        };

        CreateConversationModalView.prototype.jumpToChat = function (conversationId) {
            SNS.Analytics.event('enter_chat', 'chat_member_select');
            this.linkTo('chat#view=chat_view&id=' + conversationId);
        };

        CreateConversationModalView.prototype.createSucceed = function (conversation) {
            this.hide();
            this.jumpToChat(conversation.getConversationId());
        };

        CreateConversationModalView.prototype.createFailed = function (error) {
            SNS.Analytics.event('error_createFailed');
            this.showError(error);
            this.enable();
            this.enableCheck();
        };

        CreateConversationModalView.prototype.show = function () {
            if (this.hasPenalty() || !this.isChatWritePermitted()) {
                return;
            }
            _super.prototype.show.call(this);
        };

        CreateConversationModalView.prototype.hide = function () {
            $('input.form_check:checked').prop('checked', false);

            $('#modalHeader .execute').html(Blitz.Language.getMessage(this.messageKey, { num: 0 }));
            this.disable();

            _super.prototype.hide.call(this);
        };
        return CreateConversationModalView;
    })(Blitz.SelectMemberModalView);
    Blitz.CreateConversationModalView = CreateConversationModalView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var CreateConversationButtonView = (function (_super) {
        __extends(CreateConversationButtonView, _super);
        function CreateConversationButtonView(displayType) {
            _super.call(this, {
                className: 'wrapBtnSSS'
            });
            this.displayType = displayType;
            this.template = new SNS.HBSTemplate('chat/list/create-conversation-button.hbs');
        }
        CreateConversationButtonView.prototype.events = function () {
            return {
                'click #chatCreateConversation': 'openMemberSelectForm'
            };
        };

        CreateConversationButtonView.prototype.render = function () {
            if (SNS.Config.isChatRunning() && SNS.Config.isAge13OrOlder()) {
                this.$el.append(this.template.render());
            }
            if (this.displayType == 1 /* Hidden */ || SNS.Config.isAgeUnder13()) {
                this.$el.hide();
            }
            return this;
        };

        CreateConversationButtonView.prototype.openMemberSelectForm = function () {
            SNS.Analytics.event('create_chat');
            var collection = new Blitz.SelectableContactCollection();
            var modalItems = {
                items: [
                    SNS.ModalItem.button5(Blitz.Language.getMessage('chat.cancel'), { cssClass: 'cancel' }),
                    SNS.ModalItem.title(Blitz.Language.getMessage('chat.member_select_title')),
                    SNS.ModalItem.button5(Blitz.Language.getMessage('chat.member_select_create', { num: 0 }), {
                        cssClass: 'execute disabled',
                        primary: true
                    })
                ]
            };
            var modalView = new Blitz.CreateConversationModalView(collection, modalItems);
            modalView.show();
        };
        return CreateConversationButtonView;
    })(Blitz.BlitzView);
    Blitz.CreateConversationButtonView = CreateConversationButtonView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationCollectionHeaderView = (function (_super) {
        __extends(ConversationCollectionHeaderView, _super);
        function ConversationCollectionHeaderView(displayType, editModeViewModel) {
            _super.call(this, {
                tagName: "h1",
                className: "hl skWhite noIndentHl"
            });
            this.displayType = displayType;
            this.editModeViewModel = editModeViewModel;
            this.template = new SNS.HBSTemplate('chat/list/collection-header.hbs');
        }
        ConversationCollectionHeaderView.prototype.headerName = function () {
            switch (this.displayType) {
                case 0 /* Visible */:
                    return Blitz.Language.getMessage("chat.chat_list_name");
                case 1 /* Hidden */:
                    return Blitz.Language.getMessage("chat.chat_hidden_list_name");
            }
        };

        ConversationCollectionHeaderView.prototype.render = function () {
            this.$el.append(this.template.render({
                headerName: this.headerName()
            }));
            $(".flex", this.$el).append(new Blitz.EditConversationCollectionModeButtonView(this.editModeViewModel).render().$el, new Blitz.CreateConversationButtonView(this.displayType).render().$el);
            return this;
        };
        return ConversationCollectionHeaderView;
    })(Blitz.BlitzView);
    Blitz.ConversationCollectionHeaderView = ConversationCollectionHeaderView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationItemViewModel = (function (_super) {
        __extends(ConversationItemViewModel, _super);
        function ConversationItemViewModel(conversation) {
            _super.call(this);
            this.conversation = conversation;
        }
        ConversationItemViewModel.prototype.hide = function () {
            var _this = this;
            this.toggle(function () {
                return _this.conversation.hide();
            });
        };

        ConversationItemViewModel.prototype.display = function () {
            var _this = this;
            this.toggle(function () {
                return _this.conversation.display();
            });
        };

        ConversationItemViewModel.prototype.toggle = function (f) {
            var _this = this;
            var future = f();
            future.onSuccess(function (updated) {
                _this.emit('toggleDisplaySettingSucceed');
            });
            future.onFailure(function (error) {
                debug(error);
                _this.emit('toggleDisplaySettingFailed');
            });
        };

        ConversationItemViewModel.prototype.getConversation = function () {
            return _.clone(this.conversation);
        };
        return ConversationItemViewModel;
    })(Blitz.BlitzViewModel);
    Blitz.ConversationItemViewModel = ConversationItemViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var HideConversationHelpDialogShowSpec = (function () {
        function HideConversationHelpDialogShowSpec() {
            this.count = 0;
        }
        HideConversationHelpDialogShowSpec.prototype.incrementClickHideButtonCount = function () {
            this.count++;
        };

        HideConversationHelpDialogShowSpec.prototype.clickAtFirst = function () {
            return this.count == 0;
        };

        HideConversationHelpDialogShowSpec.prototype.satisfied = function () {
            return this.clickAtFirst();
        };
        return HideConversationHelpDialogShowSpec;
    })();

    var HideConversationHelpDialogShowSpecOnMemory = new HideConversationHelpDialogShowSpec();

    var ToggleDisplayButtonView = (function (_super) {
        __extends(ToggleDisplayButtonView, _super);
        function ToggleDisplayButtonView(viewModel) {
            _super.call(this, {
                className: 'wrapBtnM',
                delegate: false
            });

            this.viewModel = viewModel;
            this.viewModel.on('toggleDisplaySettingSucceed', $.proxy(this.toggleDisplaySettingSucceed, this));
            this.viewModel.on('toggleDisplaySettingFailed', $.proxy(this.toggleDisplaySettingFailed, this));
        }
        ToggleDisplayButtonView.createByDisplayType = function (conversationDisplayType, viewModel) {
            switch (conversationDisplayType) {
                case 0 /* Visible */:
                    var conversation = viewModel.getConversation();
                    var view = conversation.isMustRead() ? new HideMustReadConversationButton(viewModel) : new HideConversationButtonView(viewModel);
                    return view;
                case 1 /* Hidden */:
                    return new RedisplayButtonView(viewModel);
            }
        };

        ToggleDisplayButtonView.prototype.events = function () {
            return {
                'click .js-toggle-display': 'toggleDisplay'
            };
        };

        ToggleDisplayButtonView.prototype.render = function () {
            this.$el.append(this.renderButton());
            this.delegateEvents();
            return this;
        };

        ToggleDisplayButtonView.prototype.renderButton = function () {
            return this.template.render();
        };

        ToggleDisplayButtonView.prototype.show = function () {
            this.$el.show();
        };

        ToggleDisplayButtonView.prototype.hide = function () {
            this.$el.hide();
        };

        ToggleDisplayButtonView.prototype.toggleDisplaySetting = function () {
            debug("must override!");
            return null;
        };

        ToggleDisplayButtonView.prototype.toggleDisplaySettingSucceed = function () {
            this.hide();

            var conversation = this.viewModel.getConversation();
            var beaconParam = {
                "type": conversation.isDelivery() ? 'delivery' : 'conversation',
                "conversation_id": conversation.getIdentity().getValue()
            };
            SNS.Analytics.event('toggle_conversation_display', '', beaconParam);
        };

        ToggleDisplayButtonView.prototype.toggleDisplaySettingFailed = function (error) {
            this.recoverButton();
            this.showError(error);
        };

        ToggleDisplayButtonView.prototype.toggleDisplay = function (event) {
            this.startLoading();
            event.stopPropagation();
            this.toggleDisplaySetting();
        };

        ToggleDisplayButtonView.prototype.startLoading = function () {
            this.$el.html(this.loadingButtonTpl.render());
        };

        ToggleDisplayButtonView.prototype.recoverButton = function () {
            this.$el.html(this.template.render());
            this.delegateEvents();
        };
        return ToggleDisplayButtonView;
    })(Blitz.BlitzView);
    Blitz.ToggleDisplayButtonView = ToggleDisplayButtonView;

    var HideConversationButtonView = (function (_super) {
        __extends(HideConversationButtonView, _super);
        function HideConversationButtonView(viewModel) {
            _super.call(this, viewModel);
            this.template = new SNS.HBSTemplate('chat/list/toggle-display-button/hide-conversation-button.hbs');
            this.loadingButtonTpl = new SNS.HBSTemplate("chat/list/toggle-display-button/hide-conversation-loading-button.hbs");
        }
        HideConversationButtonView.prototype.toggleDisplaySetting = function () {
            var _this = this;
            if (HideConversationHelpDialogShowSpecOnMemory.satisfied()) {
                var dialog = new Blitz.HideConversationHelpDialogView(function () {
                    return _this.viewModel.hide();
                }, function () {
                    return _this.recoverButton();
                });
                dialog.show();
            } else {
                this.viewModel.hide();
            }
            HideConversationHelpDialogShowSpecOnMemory.incrementClickHideButtonCount();
        };
        return HideConversationButtonView;
    })(ToggleDisplayButtonView);

    var HideMustReadConversationButton = (function (_super) {
        __extends(HideMustReadConversationButton, _super);
        function HideMustReadConversationButton(viewModel) {
            _super.call(this, viewModel);
            this.template = new SNS.HBSTemplate('chat/list/toggle-display-button/hide-must-read-conversation-button.hbs');
            this.loadingButtonTpl = new SNS.HBSTemplate("chat/list/toggle-display-button/hide-conversation-loading-button.hbs");
        }
        HideMustReadConversationButton.prototype.toggleDisplaySetting = function () {
            new Blitz.DialogView({
                title: Blitz.Language.getMessage("chat.disable_hide_conversation_dialog_title"),
                message: Blitz.Language.getMessage("chat.disable_hide_conversation_dialog_body")
            }).show();
            this.recoverButton();
        };
        return HideMustReadConversationButton;
    })(ToggleDisplayButtonView);

    var RedisplayButtonView = (function (_super) {
        __extends(RedisplayButtonView, _super);
        function RedisplayButtonView(viewModel) {
            _super.call(this, viewModel);
            this.template = new SNS.HBSTemplate('chat/list/toggle-display-button/redisplay-conversation-button.hbs');
            this.loadingButtonTpl = new SNS.HBSTemplate("chat/list/toggle-display-button/redisplay-conversation-loading-button.hbs");
        }
        RedisplayButtonView.prototype.toggleDisplaySetting = function () {
            this.viewModel.display();
        };
        return RedisplayButtonView;
    })(ToggleDisplayButtonView);
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ConversationCollectionView = (function (_super) {
        __extends(ConversationCollectionView, _super);
        function ConversationCollectionView(viewModel) {
            var _this = this;
            _super.call(this, viewModel.conversationCollection, {
                tagName: 'section',
                className: 'unit'
            });
            this.template = new SNS.HBSTemplate('loadmore-collection.hbs');
            this.emptyCollectionTemplate = new SNS.HBSTemplate('chat/list/empty-collection.hbs');
            this.collectionClass = 'collection-conversation';
            viewModel.conversationCollection.on('completed', function () {
                return _this.completed();
            });
            this.displayType = viewModel.displayType;
            this.editModeViewModel = new Blitz.EditConversationCollectionModeViewModel();
        }
        ConversationCollectionView.prototype.render = function () {
            _super.prototype.render.call(this);
            this.$el.prepend(this.renderCollectionHeader());
            this.loadMoreView.loadMore();
            return this;
        };

        ConversationCollectionView.prototype.renderCollectionHeader = function () {
            return new Blitz.ConversationCollectionHeaderView(this.displayType, this.editModeViewModel).render().$el;
        };

        ConversationCollectionView.prototype.renderItem = function (item) {
            return new ConversationItemView(item, this.displayType, this.editModeViewModel).render().$el;
        };

        ConversationCollectionView.prototype.renderLoadMore = function () {
            this.loadMoreView = new SNS.LoadMoreView(this.viewModel, this.loadMoreTextKey, { selector: '.' + this.loadMoreClass, context: this.$el, className: 'cst' }).render();
            return this.loadMoreView.$el;
        };

        ConversationCollectionView.prototype.completed = function () {
            this.loadMoreView.hide();
            if (_.isEmpty(this.viewModel.items)) {
                this.$collection.append(this.emptyCollectionTemplate.render());
            }
        };
        return ConversationCollectionView;
    })(SNS.LoadMoreCollectionView);
    Blitz.ConversationCollectionView = ConversationCollectionView;

    var ConversationItemView = (function (_super) {
        __extends(ConversationItemView, _super);
        function ConversationItemView(conversation, displayType, editModeViewModel) {
            _super.call(this, {
                tagName: 'article',
                className: 'cst',
                id: conversation.getIdentity().getValue()
            });
            this.conversation = conversation;
            this.displayType = displayType;
            this.editModeViewModel = editModeViewModel;

            this.viewModel = new Blitz.ConversationItemViewModel(conversation);
            this.viewModel.on('toggleDisplaySettingSucceed', $.proxy(this.toggleDisplaySettingSucceed, this));
            this.toggleDisplayButtonView = Blitz.ToggleDisplayButtonView.createByDisplayType(this.displayType, this.viewModel);

            this.editModeViewModel.on('toEditMode', $.proxy(this.renderAsEditingMode, this));
            this.editModeViewModel.on('toNormalMode', $.proxy(this.renderAsNormalMode, this));
        }
        ConversationItemView.prototype.events = function () {
            return {
                'click .js-toggle-display': 'toggleDisplay',
                'click a.tap': 'jumpToChat'
            };
        };

        ConversationItemView.prototype.render = function () {
            BaseConversationContentItemView.create(this.conversation, this.$el).render();
            $('.flex', this.$el).append(this.toggleDisplayButtonView.render().$el.hide());
            if (this.editModeViewModel.edits()) {
                this.renderAsEditingMode();
            }
            return this;
        };

        ConversationItemView.prototype.showToggleButton = function () {
            this.toggleDisplayButtonView.show();
        };

        ConversationItemView.prototype.hideToggleButton = function () {
            this.toggleDisplayButtonView.hide();
        };

        ConversationItemView.prototype.hideCaretInCollection = function () {
            $('.itmCaret', this.$el).hide();
        };

        ConversationItemView.prototype.showCaretInCollection = function () {
            $('.itmCaret', this.$el).show();
        };

        ConversationItemView.prototype.renderAsEditingMode = function () {
            this.showToggleButton();
            this.hideCaretInCollection();
        };

        ConversationItemView.prototype.renderAsNormalMode = function () {
            this.hideToggleButton();
            this.showCaretInCollection();
        };

        ConversationItemView.prototype.toggleDisplaySettingSucceed = function () {
            this.$el.hide();
        };

        ConversationItemView.prototype.jumpToChat = function () {
            if (this.editModeViewModel.noEdits()) {
                SNS.Analytics.event('enter_chat');
                var conversationId = this.conversation.getIdentity().getValue();
                var url = this.conversation.isConversation() ? 'chat#view=chat_view&id=' + conversationId : 'chat#view=chat_delivery_view&id=' + conversationId;
                this.linkTo(url);
            }
        };
        return ConversationItemView;
    })(Blitz.BlitzView);
    Blitz.ConversationItemView = ConversationItemView;

    var BaseConversationContentItemView = (function (_super) {
        __extends(BaseConversationContentItemView, _super);
        function BaseConversationContentItemView() {
            _super.call(this);
        }
        BaseConversationContentItemView.prototype.render = function () {
            debug("must override!");
            return this;
        };

        BaseConversationContentItemView.create = function (conversation, context) {
            return conversation.isConversation() ? new ConversationItemContentView(conversation, context) : new DeliveryItemContentView(conversation, context);
        };
        return BaseConversationContentItemView;
    })(Blitz.BlitzView);

    var ConversationItemContentView = (function (_super) {
        __extends(ConversationItemContentView, _super);
        function ConversationItemContentView(conversation, context) {
            _super.call(this);
            this.conversation = conversation;
            this.context = context;
            this.template = new SNS.HBSTemplate('chat/list/conversation-content.hbs');
        }
        ConversationItemContentView.prototype.render = function () {
            this.context.html(this.template.render({
                'name': this.getConversationName(),
                'escapedMessage': this.conversation.latestMessage.map(function (headline) {
                    return headline.value();
                }).getOrElse(function () {
                    return "";
                }),
                'messageCreatedTime': this.conversation.latestMessage.map(function (headline) {
                    return headline.formattedCtime();
                }).getOrElse(function () {
                    return "";
                }),
                'isGroup': this.conversation.isGroup(),
                'isNotified': this.conversation.setting.isNotified,
                'participantNum': this.conversation.participants.length,
                'filteredParticipants': this.conversation.getFilteredParticipants()
            }));
            return this;
        };

        ConversationItemContentView.prototype.getConversationName = function () {
            var name = this.conversation.getName();
            switch (this.conversation.getConversationType()) {
                case 0 /* Group */:
                    if (name) {
                        return (new Util.Text(name)).escape().convertEmoji().disableATag().text;
                    } else {
                        return this.getFormattedGroupConversationNameElement(this.conversation.getParticipants());
                    }
                case 1 /* OneOnOne */:
                    return this.getFormattedNameElement(this.conversation.getTargetUser().getIdentity().getValue());
                case 3 /* My */:
                    return Blitz.Language.getMessage('chat.mychat');
                default:
                    return '';
            }
        };
        return ConversationItemContentView;
    })(BaseConversationContentItemView);

    var DeliveryItemContentView = (function (_super) {
        __extends(DeliveryItemContentView, _super);
        function DeliveryItemContentView(conversation, context) {
            _super.call(this);
            this.conversation = conversation;
            this.context = context;
            this.template = new SNS.HBSTemplate('chat/list/conversation-delivery-content.hbs');
        }
        DeliveryItemContentView.prototype.render = function () {
            this.context.html(this.template.render({
                'name': this.getConversationName(),
                'mark': new Blitz.DeliveryTypeMark(this.conversation).getElement(),
                'icon': new Blitz.PublisherIcon(this.conversation).getElement(),
                'isNotified': this.conversation.isNotified()
            }));
            return this;
        };

        DeliveryItemContentView.prototype.getConversationName = function () {
            var name = this.conversation.getName();
            switch (this.conversation.getConversationType()) {
                case 4 /* Game */:
                case 5 /* Official */:
                case 6 /* Staff */:
                case 7 /* Community */:
                case 8 /* Special */:
                    return (new Util.Text(name)).escape().convertEmoji().disableATag().text;
                default:
                    return '';
            }
        };
        return DeliveryItemContentView;
    })(BaseConversationContentItemView);
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatViewView = (function (_super) {
        __extends(ChatViewView, _super);
        function ChatViewView(viewModel, relationalPermission) {
            var _this = this;
            _super.call(this, viewModel, {
                className: 'contr'
            });
            this.viewModel = viewModel;
            this.$dummyPaletteSpace = $(new SNS.HBSTemplate('chat/view/dummy-palette-space.hbs').render());
            this.headerEvents = {
                'click .option': 'toggleOption',
                'click .js-link-group-setting': 'jumpToGroupSetting',
                'click .js-link-profile-dialog': 'showProfileDialog',
                'click .ntfBrd.brdT.tap': 'jumpToOtherChat'
            };
            this.conversation = viewModel.eventCollection.conversation;
            this.eventCollection = viewModel.eventCollection;
            this.eventService = Blitz.EventService.ofApi(app.cobit);

            var succeedLoadHistoryOnlyOnce = _.once(this.succeedLoadHistory);
            this.eventCollection.on('loadFailed', function (error) {
                return _this.failedLoadHistory(error);
            });
            this.eventCollection.on('loadSucceed', function () {
                return succeedLoadHistoryOnlyOnce();
            });
            this.eventCollection.on('addedNewEvent', function () {
                return _this.complementIdentities();
            });
            this.eventCollection.on('collectionRendered', function (items) {
                return _this.collectionRendered(items);
            });
            this.eventCollection.on('appendedNewItem', function (eventItemView) {
                return _this.appendedNewItem(eventItemView);
            });
            this.eventCollection.on('deleteDateSeparator', function (dateId) {
                return _this.deleteDateSeparator(dateId);
            });

            if (this.viewModel.conversation.isOneOnOne()) {
                this.eventCollection.on('completed', function () {
                    return _this.eventCollectionLoadcompleted();
                });
            }

            this.viewModel.on('addSucceed', function (event) {
                return _this.addSucceed(event);
            });
            this.viewModel.on('addFailed', function (error) {
                return _this.addFailed(error);
            });
            this.viewModel.on('leaveSucceed', function () {
                return _this.leaveSucceed();
            });
            this.viewModel.on('leaveFailed', function (error) {
                return _this.leaveFailed(error);
            });
            this.viewModel.on('showPalette', function (paletteHeight) {
                return _this.onShowedPalette(paletteHeight);
            });
            this.viewModel.on('hidePalette', function () {
                return _this.onHidPalette();
            });

            this.backBtnUid = Util.uid();
            this.headerView = new Blitz.ChatHeaderView(viewModel, this.conversation, this.backBtnUid);
            this.headerView.events = function () {
                _this.headerEvents['click .back-' + _this.backBtnUid] = 'back';
                return Blitz.mapHeaderEvents(_this.headerEvents, _this);
            };
            var sendMessagePermission = new Blitz.SendMessagePermission(Blitz.Myself.getMe(), relationalPermission);
            this.footerView = new Blitz.ChatFooterView(this.eventCollection, viewModel, sendMessagePermission);
            this.eventCollectionView = new Blitz.EventCollectionView(this.eventCollection);
            this.userRepository = Blitz.UserRepository.ofApi();

            this.viewModel.fetchNotificationSetting(this.conversation.getIdentity());
        }
        ChatViewView.prototype.events = function () {
            return {
                'click #load-more-view': 'onClickLoadMore'
            };
        };

        ChatViewView.prototype.onClickLoadMore = function () {
            if (SNS.Config.isIEUnder11()) {
                this.eventCollectionView.loadMoreView.onClickLoadMore();
            }
            SNS.Analytics.event('load_history');
        };

        ChatViewView.prototype.render = function () {
            this.headerView.show();
            this.footerView.show();
            this.renderChatOption();
            this.delegateEvents();
            this.$el.append(this.renderEventCollection(), this.$dummyPaletteSpace);
            return this;
        };

        ChatViewView.prototype.renderEventCollection = function () {
            return this.eventCollectionView.render().$el.children();
        };

        ChatViewView.prototype.renderChatOption = function () {
            this.$option = new Blitz.ChatOptionView(this.viewModel).render();
            this.headerView.$el.after(this.$option.$el.hide());
        };

        ChatViewView.prototype.back = function () {
            this.headerView.hide();
            this.footerView.hide();
            this.$option.$el.remove();
            Gryfon.back();
        };

        ChatViewView.prototype.toggleOption = function () {
            this.$option.$el.toggle();
        };

        ChatViewView.prototype.scrollToEnd = function () {
            scrollBy(0, document.documentElement.offsetHeight);
        };

        ChatViewView.prototype.jumpToGroupSetting = function () {
        };

        ChatViewView.prototype.showProfileDialog = function () {
            if (this.conversation.isOneOnOne()) {
                var sender = this.conversation.getSenders(Blitz.Myself.getMe())[0];
                this.userRepository.getUserInfo(sender.getIdentity()).next(function (greeUser) {
                    new Blitz.SnsProfileDialogView(greeUser, false).show();
                });
            }
        };

        ChatViewView.prototype.jumpToOtherChat = function (event) {
            SNS.Analytics.event('notify_other');
            event.stopPropagation();
            this.$notificationHeader.$el.remove();
            this.linkTo('chat#view=chat_view&id=' + this.$notificationHeader.conversationId);
        };

        ChatViewView.prototype.failedLoadHistory = function (error) {
            SNS.Analytics.event('error_loadHistory');
            this.showError(error);
        };

        ChatViewView.prototype.succeedLoadHistory = function () {
            SNS.Analytics.event('succeed_loadHistory');
        };

        ChatViewView.prototype.addSucceed = function (event) {
            this.$option.hide();
            this.incrementParticipantNum(event);
        };

        ChatViewView.prototype.incrementParticipantNum = function (event) {
            var addedCount = event.getEventContents().getAddUsers().length;
            var $participantNum = $('[data-participant-num]', this.headerView.$el);
            var total = parseInt($participantNum.data('participant-num')) + addedCount;
            $participantNum.text(total);
            $participantNum.data('participant-num', total);
        };

        ChatViewView.prototype.addFailed = function (error) {
            this.showError(error);
        };

        ChatViewView.prototype.leaveSucceed = function () {
            this.$option.leaveDialog.hide();
            this.$option.hide();
            this.headerView.hide();
            Gryfon.notify("leave-chat");
            Gryfon.back();
        };

        ChatViewView.prototype.leaveFailed = function (error) {
            this.showError(error);
            this.$option.leaveDialog.enableLeave();
        };

        ChatViewView.prototype.onShowedPalette = function (paletteHeight) {
            this.$dummyPaletteSpace.show();
            this.$dummyPaletteSpace.height(paletteHeight);
            scrollBy(0, paletteHeight);
        };

        ChatViewView.prototype.onHidPalette = function () {
            var paletteHeight = this.$dummyPaletteSpace.height();
            var distanceFromScrollPositionToBottom = Blitz.BlitzLayout.calcDistanceFromScrollPositionToBottom();
            this.$dummyPaletteSpace.hide();

            var scrollSize = distanceFromScrollPositionToBottom > paletteHeight ? paletteHeight : distanceFromScrollPositionToBottom;
            scrollBy(0, -scrollSize);
        };

        ChatViewView.prototype.collectionRendered = function (items) {
            this.complementIdentities();

            var $firstItem = $('article').first();
            var latestEventId = items.length ? items[0].event.getIdentity().getValue() : '';
            var $lastItem = $('.collection .unit').filter('[data-event-identity="' + latestEventId + '"]');
            if ($firstItem.length && $lastItem.length) {
                window.scrollBy(0, $lastItem.offset().top - $firstItem.offset().top);
            }
        };

        ChatViewView.prototype.appendedNewItem = function (eventItemView) {
            this.$el.find('[data-eventType="1on1welcome"]').remove();
            if (eventItemView instanceof Blitz.DateSeparatorItemView) {
                return;
            }
            if (eventItemView instanceof Blitz.BaseMessageItemView && eventItemView.isMyMessage()) {
                this.scrollToEnd();
                return;
            }
            this.notifyByFooter(eventItemView);
        };

        ChatViewView.prototype.notifyByFooter = function (eventItemView) {
            var _this = this;
            var footerHeight = $('.mdlFootWrap').offset().top;
            var latestItemHeight = $('.collection .unit').filter('[data-event-identity="' + eventItemView.getEvent().getIdentity().getValue() + '"]').offset().top;

            if (latestItemHeight > footerHeight) {
                if (this.$notificationFooter && this.$notificationFooter.$el) {
                    this.$notificationFooter.$el.remove();
                    clearTimeout(this.notificationFooterTimerId);
                }
                this.$notificationFooter = new Blitz.NotificationFooterView(eventItemView);
                this.footerView.$el.prepend(this.$notificationFooter.render().$el);
                this.complementIdentities();
                this.notificationFooterTimerId = setTimeout(function () {
                    _this.$notificationFooter.$el.remove();
                }, 5 * 1000);
                return;
            }
            this.scrollToEnd();
        };

        ChatViewView.prototype.deleteDateSeparator = function (dateId) {
            var $dateSeparator = $('#' + dateId);
            if ($dateSeparator.length)
                $dateSeparator.remove();
        };

        ChatViewView.prototype.eventCollectionLoadcompleted = function () {
            if (!this.eventCollection.allLoaded) {
                return;
            }

            if (this.eventCollection.items.length) {
                return;
            }
            var welcome = new SNS.HBSTemplate('chat/view/1on1-welcome-event.hbs');
            this.$el.append(welcome.render());
        };

        ChatViewView.prototype.messageReceivedEvent = function (event) {
            var messageId = event.getEventContents().getMessageId();
            if (this.conversation.getIdentity().equals(event.conversationIdentity)) {
                if (this.isSuspendedMessage(event)) {
                    this.updateMessageIdAttr(event);
                    return;
                }
                if (this.isDeletedMessage(event)) {
                    var textMessage = event.getEventContents().getMessage();
                    this.restoreMessage(messageId, textMessage.getText());
                    return;
                }

                this.eventCollection.addNewEvent(event);
                this.markAsRead(messageId);
                return;
            }
            this.notifyNewEventOfOtherConversation(event);
        };

        ChatViewView.prototype.conversationUpdatedEvent = function (event) {
            if (!this.conversation.getIdentity().equals(event.conversationIdentity)) {
                return;
            }
            this.eventCollection.addNewEvent(event);
            this.conversation = event.getEventContents().getConversation();
            this.eventCollection.conversation = this.conversation;
            this.viewModel.conversation = this.conversation;
            this.headerView.setConversationName(this.conversation.name);
        };

        ChatViewView.prototype.markAsRead = function (messageId) {
            var _this = this;
            var $target = $('#' + messageId);
            if (($target.offset().top + $target.height()) < $('.mdlFoot').offset().top) {
                this.eventService.readPastAllMessages(this.conversation.getIdentity());
                return;
            }
            $(window).on('scroll.' + messageId, function () {
                if (($target.offset().top + $target.height()) < $('.mdlFoot').offset().top) {
                    _this.eventService.readPastAllMessages(_this.conversation.getIdentity());
                    $(window).off('scroll.' + messageId);
                }
            });
        };

        ChatViewView.prototype.isSuspendedMessage = function (event) {
            var messageId = event.getCorrelationKey();
            if (!_.isEmpty($('#' + messageId))) {
                return true;
            }
            return this.eventCollection.suspendedMessageIds.indexOf(messageId) !== -1;
        };

        ChatViewView.prototype.isDeletedMessage = function (event) {
            var messageId = event.getEventContents().getMessageId();
            if (!_.isEmpty($('#' + messageId))) {
                return true;
            }
            return this.eventCollection.disabledMessageIds.indexOf(messageId) !== -1;
        };

        ChatViewView.prototype.notifyNewEventOfOtherConversation = function (event) {
            var _this = this;
            if (this.$notificationHeader && this.$notificationHeader.$el) {
                this.$notificationHeader.$el.remove();
                clearTimeout(this.notificationHeaderTimerId);
            }
            this.$notificationHeader = new Blitz.NotificationHeaderView(event);
            this.headerView.$el.append(this.$notificationHeader.render().$el);
            this.notificationHeaderTimerId = setTimeout(function () {
                _this.$notificationHeader.$el.remove();
            }, 5 * 1000);
        };

        ChatViewView.prototype.userAddedEvent = function (event) {
            if (this.conversation.getIdentity().equals(event.conversationIdentity)) {
                this.eventCollection.addNewEvent(event);
                this.incrementParticipantNum(event);
            }
        };

        ChatViewView.prototype.userLeftEvent = function (event) {
            if (this.conversation.getIdentity().equals(event.conversationIdentity)) {
                this.eventCollection.addNewEvent(event);

                var $participantNum = $('[data-participant-num]');
                var participantNum = event.getEventContents().conversation.participants.length;
                $participantNum.text(participantNum);
                $participantNum.data('participant-num', participantNum);
            }
        };

        ChatViewView.prototype.messageRejectedEvent = function (event) {
            if (this.conversation.getIdentity().equals(event.conversationIdentity)) {
                this.replaceNGMessage(event.getEventContents().getMessageId());
                this.eventCollection.disabledMessageIds.push(event.getEventContents().getMessageId());
            }
        };

        ChatViewView.prototype.messageDeletedEvent = function (event) {
            if (this.conversation.getIdentity().equals(event.conversationIdentity)) {
                this.replaceNGMessage(event.getEventContents().getMessageId());
                this.eventCollection.disabledMessageIds.push(event.getEventContents().getMessageId());
            }
        };

        ChatViewView.prototype.replaceNGMessage = function (messageId) {
            var $message = $('.posT8', '#' + messageId);
            if ($message) {
                $message.text(Blitz.Language.getMessage('chat.message_censored'));
            }
        };

        ChatViewView.prototype.restoreMessage = function (messageId, message) {
            var $message = $('.posT8', '#' + messageId);
            if ($message) {
                $message.html(message);
            }
        };

        ChatViewView.prototype.updateMessageIdAttr = function (event) {
            var $article = $('#' + event.getCorrelationKey());
            $article.attr('id', event.getEventContents().getMessageId());
        };

        ChatViewView.prototype.conversationDeletedEvent = function (event) {
            if (this.conversation.getIdentity().equals(event.conversationIdentity)) {
                this.showAlert(Blitz.Language.getMessage('chat.error_freeze_chat'));
                this.linkTo('chat#view=chat_list');
            }
        };

        ChatViewView.prototype.offLine = function () {
            this.footerView.offLine();
        };
        return ChatViewView;
    })(Blitz.SSEBaseView);
    Blitz.ChatViewView = ChatViewView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EventCollectionView = (function (_super) {
        __extends(EventCollectionView, _super);
        function EventCollectionView(collection, options) {
            if (typeof options === "undefined") { options = {}; }
            _super.call(this, collection, options);
            this.collection = collection;
            this.autoPagerize = true;
            this.sortType = 0 /* AscendingOrder */;
            this.template = new SNS.HBSTemplate('loadmore-history-collection.hbs');
        }
        EventCollectionView.prototype.events = function () {
            return {};
        };

        EventCollectionView.prototype.render = function () {
            _super.prototype.render.call(this);
            this.loadMoreView.loadMore();
            return this;
        };

        EventCollectionView.prototype.renderItem = function (event) {
            return event.render().$el;
        };
        return EventCollectionView;
    })(SNS.LoadMoreCollectionView);
    Blitz.EventCollectionView = EventCollectionView;

    var EventItemView = (function (_super) {
        __extends(EventItemView, _super);
        function EventItemView(options, event) {
            _super.call(this, options);
            this.event = event;
        }
        EventItemView.prototype.getEvent = function () {
            return this.event;
        };

        EventItemView.prototype.getEventMessage = function () {
        };
        return EventItemView;
    })(Blitz.BlitzView);
    Blitz.EventItemView = EventItemView;

    var DateSeparatorItemView = (function (_super) {
        __extends(DateSeparatorItemView, _super);
        function DateSeparatorItemView(event, dateId) {
            _super.call(this, {
                tagName: 'div',
                id: dateId
            }, event);
            this.eventTemplate = new SNS.HBSTemplate('chat/view/message-separator.hbs');
        }
        DateSeparatorItemView.prototype.render = function () {
            this.$el.html(this.eventTemplate.render({
                'dateSeparator': this.getEvent().getEventContents().getMeta().getFormattedCTime(1 /* META_FORMATTED_STYLE_LITERAL */)
            }));
            return this;
        };
        return DateSeparatorItemView;
    })(EventItemView);
    Blitz.DateSeparatorItemView = DateSeparatorItemView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DefaultEventItemView = (function (_super) {
        __extends(DefaultEventItemView, _super);
        function DefaultEventItemView(event, messageTemplate) {
            _super.call(this, {
                tagName: 'article',
                className: 'unit taC',
                attributes: {
                    'data-event-identity': event.getIdentity().getValue()
                }
            }, event);
            this.messageTemplate = messageTemplate;
            this.eventTemplate = new SNS.HBSTemplate('chat/view/event.hbs');
        }
        DefaultEventItemView.prototype.render = function () {
            this.$el.html(this.eventTemplate.render({
                'text': this.getEventMessage()
            }));
            return this;
        };

        DefaultEventItemView.prototype.getEventMessage = function () {
            var senderName = this.getFormattedNameElement(this.getEvent().sender.getIdentity().getValue());
            return Blitz.Language.getMessage(this.messageTemplate, [senderName], false);
        };
        return DefaultEventItemView;
    })(Blitz.EventItemView);
    Blitz.DefaultEventItemView = DefaultEventItemView;

    var UserAddedEventItemView = (function (_super) {
        __extends(UserAddedEventItemView, _super);
        function UserAddedEventItemView() {
            _super.apply(this, arguments);
        }
        UserAddedEventItemView.prototype.getEventMessage = function () {
            var _this = this;
            var senderName = this.getFormattedNameElement(this.getEvent().sender.getIdentity().getValue());

            var addedUsers = this.event.getEventContents().getAddUsers();
            var addedUserNames = addedUsers.map(function (user) {
                return _this.getFormattedNameElement(user.getIdentity().getValue());
            });

            var messageTemplate;
            var params = [];

            if (addedUsers.length > 2) {
                messageTemplate = 'chat.conversation_event_add_members_with_subject_2_over';
                params = [senderName, addedUserNames[0], addedUserNames[1], addedUsers.length];
            } else if (addedUsers.length === 2) {
                messageTemplate = 'chat.conversation_event_add_members_with_subject_2';
                params = [senderName, addedUserNames[0], addedUserNames[1]];
            } else {
                messageTemplate = 'chat.conversation_event_add_members_with_subject_1';
                params = [senderName, addedUserNames[0]];
            }

            return Blitz.Language.getMessage(messageTemplate, params, false);
        };
        return UserAddedEventItemView;
    })(DefaultEventItemView);
    Blitz.UserAddedEventItemView = UserAddedEventItemView;

    var HiddenEventItemView = (function (_super) {
        __extends(HiddenEventItemView, _super);
        function HiddenEventItemView(event) {
            _super.call(this, {
                tagName: 'article',
                attributes: {
                    'style': 'display: none'
                }
            }, event);
        }
        HiddenEventItemView.prototype.render = function () {
            return this;
        };

        HiddenEventItemView.prototype.getEventMessage = function () {
            return '';
        };
        return HiddenEventItemView;
    })(Blitz.EventItemView);
    Blitz.HiddenEventItemView = HiddenEventItemView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ReportService = (function () {
        function ReportService() {
        }
        ReportService.prototype.report = function (event) {
            if (Util.UA.isAndroid('4.0')) {
                event.preventDefault();
            }
            var target = event.currentTarget;
            var events = Util.UA.isTouch() ? ['touchend', 'touchmove', 'touchcancel'] : ['mouseup', 'mousemove'];

            var timer = setTimeout(function () {
                SNS.Analytics.event('report_raise');
                removeAll(events);
                new Blitz.ReportConfirmDialogView({
                    targetUserId: $(target).data('sender-id'),
                    urn: $(target).data('urn')
                }).show();
            }, 2000);

            events.forEach(function (evn) {
                $(target).on(evn, function () {
                    window.clearTimeout(timer);
                    removeAll(events);
                });
            });

            var removeAll = function (evns) {
                evns.forEach(function (evn) {
                    return $(target).off(evn);
                });
            };
        };
        return ReportService;
    })();
    Blitz.ReportService = ReportService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var BaseMessageItemView = (function (_super) {
        __extends(BaseMessageItemView, _super);
        function BaseMessageItemView() {
            _super.apply(this, arguments);
        }
        BaseMessageItemView.prototype.isMyMessage = function () {
            debugAsError("must override!");
            return null;
        };
        return BaseMessageItemView;
    })(Blitz.EventItemView);
    Blitz.BaseMessageItemView = BaseMessageItemView;

    var MessageItemView = (function (_super) {
        __extends(MessageItemView, _super);
        function MessageItemView(event) {
            _super.call(this, {
                tagName: 'article',
                className: 'unit',
                id: event.getEventContents().getMessageId(),
                attributes: {
                    'data-event-type': event.type,
                    'data-event-identity': event.getIdentity().getValue()
                }
            }, event);
        }
        MessageItemView.prototype.getEvent = function () {
            return this.event;
        };
        return MessageItemView;
    })(BaseMessageItemView);
    Blitz.MessageItemView = MessageItemView;

    var MessageItemViewFactory = (function () {
        function MessageItemViewFactory() {
        }
        MessageItemViewFactory.create = function (event, isMyMessage) {
            if (event.getEventContents() instanceof Blitz.MessageReceivedTextEventContents) {
                return isMyMessage ? new SelfMessageTextItemView(event) : new OtherMessageTextItemView(event);
            } else if (event.getEventContents() instanceof Blitz.MessageReceivedStampEventContents) {
                return isMyMessage ? new SelfMessageStampItemView(event) : new OtherMessageStampItemView(event);
            } else {
                debugAsError("invalid EventContents");
            }
        };
        return MessageItemViewFactory;
    })();
    Blitz.MessageItemViewFactory = MessageItemViewFactory;

    var MessageSendingItemView = (function (_super) {
        __extends(MessageSendingItemView, _super);
        function MessageSendingItemView(event) {
            _super.call(this, {
                tagName: 'article',
                className: 'unit'
            }, event);
        }
        MessageSendingItemView.prototype.render = function () {
            this.$el.html(this.renderMessage(this.getEvent().getEventContents().getMessage()));
            this.delegateEvents();
            return this;
        };

        MessageSendingItemView.prototype.renderMessage = function (message) {
            throw new Error("must override renderMessage");
        };

        MessageSendingItemView.prototype.getEvent = function () {
            return this.event;
        };

        MessageSendingItemView.prototype.isMyMessage = function () {
            return true;
        };

        MessageSendingItemView.prototype.getEventMessage = function () {
            return Blitz.Language.getMessage("chat.sending_message");
        };
        return MessageSendingItemView;
    })(BaseMessageItemView);
    Blitz.MessageSendingItemView = MessageSendingItemView;

    var MessageSendingItemViewFactory = (function () {
        function MessageSendingItemViewFactory() {
        }
        MessageSendingItemViewFactory.create = function (event) {
            if (event.getEventContents() instanceof Blitz.MessageReceivedTextEventContents) {
                return new MessageSendingTextItemView(event);
            } else if (event.getEventContents() instanceof Blitz.MessageReceivedStampEventContents) {
                return new MessageStampSendingItemView(event);
            } else {
                throw new Error("invalid EventContents");
            }
        };
        return MessageSendingItemViewFactory;
    })();
    Blitz.MessageSendingItemViewFactory = MessageSendingItemViewFactory;

    var MessageTextItemView = (function (_super) {
        __extends(MessageTextItemView, _super);
        function MessageTextItemView(event) {
            _super.call(this, event);
            this.textMessage = event.getEventContents().getMessage();
        }
        MessageTextItemView.prototype.delegateEvents = function (events) {
            _super.prototype.delegateEvents.call(this, events);
            this.$el.off('click.aTag');
            this.$el.on('click.aTag', 'a', function (event) {
                var url = $(event.currentTarget).attr('href');
                if (url) {
                    event.stopPropagation();
                    event.preventDefault();
                    new Blitz.JumpPageConfirmDialogView(url).show();
                }
            });
            return this;
        };

        MessageTextItemView.prototype.getEventMessage = function () {
            var contents = this.getEvent().getEventContents();
            if (contents.isDisabledMessage()) {
                return Blitz.Language.getMessage('chat.message_censored');
            }
            return new Util.Text(this.textMessage.getText()).nl2br().escape().convertEmoji().text;
        };
        return MessageTextItemView;
    })(MessageItemView);

    var MessageStampItemView = (function (_super) {
        __extends(MessageStampItemView, _super);
        function MessageStampItemView(event) {
            _super.call(this, event);
            this.stampMessage = event.getEventContents().getMessage();
        }
        MessageStampItemView.prototype.render = function () {
            this.$el.html(this.renderMessage(this.getEvent()));
            return this;
        };

        MessageStampItemView.prototype.renderMessage = function (event) {
            debugAsError("must override");
            return null;
        };

        MessageStampItemView.prototype.getStampMessage = function () {
            return this.stampMessage;
        };
        return MessageStampItemView;
    })(MessageItemView);

    var OtherMessageTextItemView = (function (_super) {
        __extends(OtherMessageTextItemView, _super);
        function OtherMessageTextItemView() {
            _super.apply(this, arguments);
            this.messageTemplate = new SNS.HBSTemplate('chat/view/message-text-other.hbs');
            this.reportService = new Blitz.ReportService();
        }
        OtherMessageTextItemView.prototype.events = function () {
            var events = {
                'click .ico48.tap.friend': 'showSnsProfileDialog'
            };
            if (Util.UA.isTouch()) {
                events['touchstart .wrapBllnL'] = 'report';
            } else {
                events['mousedown .wrapBllnL'] = 'report';
            }
            return events;
        };

        OtherMessageTextItemView.prototype.render = function () {
            this.$el.html(this.renderMessage(this.getEvent()));
            this.delegateEvents();
            return this;
        };

        OtherMessageTextItemView.prototype.renderMessage = function (event) {
            var senderUserId = event.getEventContents().getSender().getIdentity();

            return this.messageTemplate.render({
                'messageId': event.getIdentity(),
                'userIcon': this.getFormattedIconUrlElement(senderUserId),
                'name': this.getFormattedNameElement(senderUserId.getValue()),
                'urn': event.getUrn(),
                'senderId': senderUserId.getValue(),
                'text': this.getEventMessage(),
                'createTime': event.contents.getMeta().getFormattedCTime(3 /* META_FORMATTED_STYLE_TIMEAT */)
            });
        };

        OtherMessageTextItemView.prototype.isMyMessage = function () {
            return false;
        };

        OtherMessageTextItemView.prototype.report = function (event) {
            this.reportService.report(event);
        };

        OtherMessageTextItemView.prototype.showSnsProfileDialog = function () {
            var _this = this;
            var userId = this.event.sender.getIdentity();
            var showChatLink = false;
            if (this.event.conversationIdentity.getConversationType() === 0 /* Group */) {
                showChatLink = true;
            }
            Blitz.UserRepository.ofApi().getUserInfo(userId).next(function (user) {
                new Blitz.SnsProfileDialogWithReportView(user, showChatLink, _this.getEvent().getUrn()).show();
            }).error(function (error) {
                return _this.showError(error);
            });
        };
        return OtherMessageTextItemView;
    })(MessageTextItemView);

    var SelfMessageTextItemView = (function (_super) {
        __extends(SelfMessageTextItemView, _super);
        function SelfMessageTextItemView() {
            _super.apply(this, arguments);
            this.messageTemplate = new SNS.HBSTemplate('chat/view/message-text-self.hbs');
        }
        SelfMessageTextItemView.prototype.render = function () {
            this.$el.html(this.renderMessage(this.getEvent()));
            this.delegateEvents();
            return this;
        };

        SelfMessageTextItemView.prototype.renderMessage = function (event) {
            return this.messageTemplate.render({
                'text': this.getEventMessage(),
                'createTime': event.contents.getMeta().getFormattedCTime(3 /* META_FORMATTED_STYLE_TIMEAT */)
            });
        };

        SelfMessageTextItemView.prototype.isMyMessage = function () {
            return true;
        };
        return SelfMessageTextItemView;
    })(MessageTextItemView);

    var OtherMessageStampItemView = (function (_super) {
        __extends(OtherMessageStampItemView, _super);
        function OtherMessageStampItemView() {
            _super.apply(this, arguments);
            this.messageTemplate = new SNS.HBSTemplate('chat/view/message-stamp-other.hbs');
        }
        OtherMessageStampItemView.prototype.events = function () {
            return {
                'click .ico48.tap.friend': 'showSnsProfileDialog'
            };
        };

        OtherMessageStampItemView.prototype.render = function () {
            this.$el.html(this.renderMessage(this.getEvent()));
            return this;
        };

        OtherMessageStampItemView.prototype.renderMessage = function (event) {
            var senderUserId = event.getEventContents().getSender().getIdentity();

            return this.messageTemplate.render({
                'userIcon': this.getFormattedIconUrlElement(senderUserId),
                'name': this.getFormattedNameElement(senderUserId.getValue()),
                'stampImgUrl': this.getStampMessage().stampUnit.imageUrl,
                'createTime': event.contents.getMeta().getFormattedCTime(3 /* META_FORMATTED_STYLE_TIMEAT */)
            });
        };

        OtherMessageStampItemView.prototype.isMyMessage = function () {
            return false;
        };

        OtherMessageStampItemView.prototype.getEventMessage = function () {
            var senderUserId = this.getEvent().getEventContents().getSender().getIdentity();
            var senderName = IdentityService.Cache.getUserName(senderUserId.getValue());
            return Blitz.Language.getMessage("chat.received_stamp", { other_name: senderName });
        };

        OtherMessageStampItemView.prototype.showSnsProfileDialog = function () {
            var _this = this;
            var userId = this.event.sender.getIdentity();
            var showChatLink = false;
            if (this.event.conversationIdentity.getConversationType() === 0 /* Group */) {
                showChatLink = true;
            }
            Blitz.UserRepository.ofApi().getUserInfo(userId).next(function (user) {
                new Blitz.SnsProfileDialogView(user, showChatLink).show();
            }).error(function (error) {
                return _this.showError(error);
            });
        };
        return OtherMessageStampItemView;
    })(MessageStampItemView);

    var SelfMessageStampItemView = (function (_super) {
        __extends(SelfMessageStampItemView, _super);
        function SelfMessageStampItemView() {
            _super.apply(this, arguments);
            this.messageTemplate = new SNS.HBSTemplate('chat/view/message-stamp-self.hbs');
        }
        SelfMessageStampItemView.prototype.renderMessage = function (event) {
            return this.messageTemplate.render({
                'stampImgUrl': this.getStampMessage().stampUnit.imageUrl,
                'createTime': event.contents.getMeta().getFormattedCTime(3 /* META_FORMATTED_STYLE_TIMEAT */)
            });
        };

        SelfMessageStampItemView.prototype.isMyMessage = function () {
            return true;
        };

        SelfMessageStampItemView.prototype.getEventMessage = function () {
            return Blitz.Language.getMessage("chat.sent_stamp");
        };
        return SelfMessageStampItemView;
    })(MessageStampItemView);

    var MessageSendingTextItemView = (function (_super) {
        __extends(MessageSendingTextItemView, _super);
        function MessageSendingTextItemView() {
            _super.apply(this, arguments);
            this.messageTemplate = new SNS.HBSTemplate('chat/view/message-text-self.hbs');
        }
        MessageSendingTextItemView.prototype.renderMessage = function (message) {
            var textMessage = message;
            return this.messageTemplate.render({
                'text': textMessage.getText(),
                'createTime': this.getEventMessage()
            });
        };
        return MessageSendingTextItemView;
    })(MessageSendingItemView);

    var MessageStampSendingItemView = (function (_super) {
        __extends(MessageStampSendingItemView, _super);
        function MessageStampSendingItemView() {
            _super.apply(this, arguments);
            this.messageTemplate = new SNS.HBSTemplate('chat/view/message-stamp-self.hbs');
        }
        MessageStampSendingItemView.prototype.renderMessage = function (message) {
            var stampMessage = message;
            return this.messageTemplate.render({
                'stampImgUrl': stampMessage.stampUnit.imageUrl,
                'createTime': this.getEventMessage()
            });
        };
        return MessageStampSendingItemView;
    })(MessageSendingItemView);
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EventCollection = (function (_super) {
        __extends(EventCollection, _super);
        function EventCollection(conversation) {
            _super.call(this);
            this.conversation = conversation;
            this.DISPLAY_LIMIT = 9;
            this.conversationId = conversation.getIdentity();
            this.eventRepository = Blitz.EventRepository.ofApi(app.cobit);
            this.eventService = Blitz.EventService.ofApi(app.cobit);
            this.messageService = Blitz.MessageService.ofApi(app.cobit);
            this.dateSeparatorList = this.suspendedMessageIds = this.disabledMessageIds = [];
            this.readPastAllMessage = false;

            this.updateBadgeOnlyOnce = _.once(this.updateBadge);
        }
        EventCollection.prototype.loadNext = function () {
            var _this = this;
            var range = new SNS.Range(this.DISPLAY_LIMIT + 1, this.offsetEventId);
            this.eventRepository.getEventHistory(this.conversationId.getValue(), range).next(function (events) {
                var items = [];
                if (events.length < range.limit) {
                    items = _this.convertEventToItemView(_.clone(events));
                    _this.addItems(items);
                    _this.loadCompleted();
                } else {
                    events = events.slice(0, _this.DISPLAY_LIMIT);
                    items = _this.convertEventToItemView(_.clone(events));
                    _this.addItems(items);
                }

                var latestMessageEvent = _this.getLatestMessageReceivedEvent(events);
                if (!_this.readPastAllMessage || !_.isUndefined(latestMessageEvent)) {
                    _this.eventService.readPastAllMessages(_this.conversationId);
                    _this.readPastAllMessage = true;
                    _this.updateBadgeOnlyOnce();
                }
                if (events.length !== 0) {
                    _this.offsetEventId = _.last(events).getIdentity().getValue();
                }
                _this.loadSucceed(items);
            }).error(function (error) {
                return _this.loadFailed(error);
            });
        };

        EventCollection.prototype.addNewEvent = function (newEvent) {
            var dateId = this.getDateSeparatorId(newEvent);
            if (this.isBeyondDate(dateId)) {
                this.dateSeparatorList.unshift(dateId);
                this.addNewItem(this.createDateSeparatorItemView(newEvent, dateId));
            }

            if (newEvent instanceof Blitz.MessageReceivedEvent) {
                var messageReceivedEvent = newEvent;
                var srcCorrelationKey = messageReceivedEvent.getCorrelationKey();
                this.removeItemViewIfNeeded(srcCorrelationKey);
            }

            this.addNewItem(this.createItemView(newEvent));
            this.emit('addedNewEvent');
        };

        EventCollection.prototype.removeItemViewIfNeeded = function (correlationKey) {
            this.items = _.reject(this.items, function (item) {
                if (item instanceof Blitz.MessageSendingItemView) {
                    var targetEvent = item.getEvent();
                    if (targetEvent.getCorrelationKey() == correlationKey) {
                        item.$el.remove();
                        return true;
                    }
                }
            });
        };

        EventCollection.prototype.convertEventToItemView = function (events) {
            var _this = this;
            this.deleteDateSeparator(this.dateSeparatorList.pop());
            var checkedEvents = [];
            var dateIds = [];
            events.reverse().forEach(function (event) {
                if (event.isConversationCreatedEvent() && !_this.conversation.isGroup()) {
                    return;
                }
                if (event.isMessageReceivedEvent()) {
                    _this.checkMessageStatus(event);
                }
                var dateId = _this.getDateSeparatorId(event);
                if (!_.contains(dateIds, dateId)) {
                    dateIds.unshift(dateId);
                    checkedEvents.push(_this.createDateSeparatorItemView(event, dateId));
                }
                checkedEvents.push(_this.createItemView(event));
            });
            this.dateSeparatorList = this.dateSeparatorList.concat(dateIds);
            return checkedEvents.reverse();
        };

        EventCollection.prototype.checkMessageStatus = function (event) {
            if (event.getEventContents().isDisabledMessage()) {
                this.disabledMessageIds.push(event.getEventContents().getMessageId());
            }
        };

        EventCollection.prototype.isBeyondDate = function (dateId) {
            return !this.dateSeparatorList.some(function (entry) {
                return (dateId === entry);
            });
        };

        EventCollection.prototype.deleteDateSeparator = function (dateId) {
            this.emit('deleteDateSeparator', dateId);
        };

        EventCollection.prototype.createItemView = function (event) {
            switch (event.type) {
                case 0 /* Created */:
                    return new Blitz.DefaultEventItemView(event, "chat.chat_event_create_chat");
                    break;
                case 6 /* UserLeft */:
                    return new Blitz.DefaultEventItemView(event, "chat.conversation_event_leave_member");
                    break;
                case 1 /* Updated */:
                    if (!event.sender.isSystemUser()) {
                        return new Blitz.DefaultEventItemView(event, "chat.conversation_event_change_title_with_subject");
                    }
                    return new Blitz.DefaultEventItemView(event, "chat.conversation_event_change_title_with_subject_by_system");
                    break;
                case 5 /* UserAdded */:
                    return new Blitz.UserAddedEventItemView(event);
                    break;
                case 7 /* MessageReceived */:
                    var ev = event;
                    var isMyMessage = this.isMyMessage(ev);
                    return Blitz.MessageItemViewFactory.create(ev, isMyMessage);
                    break;
                case 8 /* MessageSending */:
                    return Blitz.MessageSendingItemViewFactory.create(event);
                    break;
                case 10 /* MessageSuspended */:
                    var ev = event;
                    return Blitz.MessageItemViewFactory.create(ev, true);
                    break;
                default:
                    return new Blitz.HiddenEventItemView(event);
                    break;
            }
        };

        EventCollection.prototype.isMyMessage = function (event) {
            return event.getEventContents().getSender().equals(Blitz.Myself.getMe());
        };

        EventCollection.prototype.createDateSeparatorItemView = function (event, dateId) {
            return new Blitz.DateSeparatorItemView(event, dateId);
        };

        EventCollection.prototype.getDateSeparatorId = function (event) {
            var formattedDate = event.getEventContents().getMeta().getFormattedCTime(2 /* META_FORMATTED_STYLE_ROUNDED */);
            return 'dateSeparator_' + formattedDate.replace(/\//g, '');
        };

        EventCollection.prototype.sendTextMessage = function (textMessage) {
            var _this = this;
            this.messageService.sendTextMessage(textMessage).next(function (event) {
                if (event.isMessageSuspendedEvent()) {
                    _this.suspendedMessageIds.push(event.getIdentity().getValue());
                }
                _this.addNewEvent(event);
                _this.eventService.readPastAllMessages(_this.conversationId);
                _this.emit('messageSendSucceed', event);
            }).error(function (error) {
                return _this.emit('messageSendFailed', error);
            });
        };

        EventCollection.prototype.getLatestMessageReceivedEvent = function (events) {
            var event = undefined;
            events.some(function (entry) {
                if (entry.type === 7 /* MessageReceived */) {
                    event = entry;
                    return true;
                }
                return false;
            });
            return event;
        };

        EventCollection.prototype.updateBadge = function () {
            Gryfon.updateBadge('chat', true);
        };
        return EventCollection;
    })(SNS.LoadMoreCollection);
    Blitz.EventCollection = EventCollection;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var NotificationSettingService = (function () {
        function NotificationSettingService(client) {
            this.client = client;
        }
        NotificationSettingService.ofApi = function (client) {
            return new NotificationSettingService(client);
        };

        NotificationSettingService.prototype.get = function (conversationId) {
            var promise = new monapt.Promise();
            this.client.getConversationNotificationSetting(conversationId).next(function (response) {
                var enabled = response['setting']['enabled'];
                promise.success(enabled);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        NotificationSettingService.prototype.update = function (conversationId, notification) {
            var promise = new monapt.Promise();
            this.client.updateConversationNotificationSetting(conversationId, notification).next(function (response) {
                var eventFactory = new Blitz.EventFactory();
                var event = eventFactory.create(response);
                if (event.type == 13 /* NotificationSettingUpdated */) {
                    var notificationSettingUpdatedEvent = event;
                    var status = notificationSettingUpdatedEvent.getEventContents().getStatus();
                    promise.success(status);
                } else {
                    promise.failure(new Error(Blitz.Language.getMessage('chat.error_failed')));
                }
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };
        return NotificationSettingService;
    })();
    Blitz.NotificationSettingService = NotificationSettingService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatViewViewModel = (function (_super) {
        __extends(ChatViewViewModel, _super);
        function ChatViewViewModel(eventCollection) {
            _super.call(this);
            this.eventCollection = eventCollection;
            this.conversation = eventCollection.conversation;
            this.notificationSettingService = Blitz.NotificationSettingService.ofApi(app.cobit);
        }
        ChatViewViewModel.prototype.addUserByRefKey = function (conversationId, targetUserRefKeys) {
            var _this = this;
            var conversation = this.conversationRepo.addUserByRefKey(conversationId, targetUserRefKeys);
            conversation.next(function (event) {
                _this.emit('addSucceed', event);
                _this.eventCollection.addNewEvent(event);
            });
            conversation.error(function (error) {
                _this.emit('addFailed', error);
            });
        };

        ChatViewViewModel.prototype.leaveConversation = function (conversationId) {
            var _this = this;
            var conversationIdentity = new Blitz.ConversationIdentity(conversationId, null);
            var conversation = this.conversationRepo.leaveConversation(conversationIdentity);
            conversation.next(function (conversationId) {
                _this.emit('leaveSucceed');
            });
            conversation.error(function (error) {
                _this.emit('leaveFailed', error);
            });
        };

        ChatViewViewModel.prototype.updateNotificationSetting = function (conversationIdentity, notification) {
            return this.notificationSettingService.update(conversationIdentity.getValue(), notification);
        };

        ChatViewViewModel.prototype.fetchNotificationSetting = function (conversationId) {
            var _this = this;
            var future = this.notificationSettingService.get(conversationId.getValue());
            future.onSuccess(function (notification) {
                return _this.emit('pulledNotification', notification);
            });
            future.onFailure(function (error) {
                return _this.emit('pulledNotificationFailed', error);
            });
        };
        return ChatViewViewModel;
    })(Blitz.BlitzViewModel);
    Blitz.ChatViewViewModel = ChatViewViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (SuspendReceptionDialogModel) {
        var Factory = (function () {
            function Factory() {
            }
            Factory.apply = function (delivery) {
                if (delivery.isCommunity()) {
                    return new Community(delivery);
                } else {
                    if (SNS.Config.isPC()) {
                        return new OfficialUserPc(delivery);
                    } else {
                        return new OfficialUserSp(delivery);
                    }
                }
            };
            return Factory;
        })();
        SuspendReceptionDialogModel.Factory = Factory;

        var OfficialUserPc = (function () {
            function OfficialUserPc(delivery) {
                this.delivery = delivery;
            }
            OfficialUserPc.prototype.getParams = function () {
                return {
                    imageIconUrl: this.delivery.publisher.profileImageUrl,
                    notice: Blitz.Language.getMessage('chat.dialog_suspend_reception_notification'),
                    description: Blitz.Language.getMessage('chat.dialog_suspend_reception_description_pc'),
                    buttonLabel: Blitz.Language.getMessage('chat.dialog_suspend_reception_button_setting_pc'),
                    publisherId: this.delivery.publisher.getUserId()
                };
            };

            OfficialUserPc.prototype.getDetailPageLink = function () {
                return SNS.Config.getGreeJpConfigPrivacyURL();
            };
            return OfficialUserPc;
        })();

        var OfficialUserSp = (function () {
            function OfficialUserSp(delivery) {
                this.delivery = delivery;
            }
            OfficialUserSp.prototype.getParams = function () {
                return {
                    imageIconUrl: this.delivery.publisher.profileImageUrl,
                    notice: Blitz.Language.getMessage('chat.dialog_suspend_reception_notification'),
                    description: Blitz.Language.getMessage('chat.dialog_suspend_reception_description'),
                    buttonLabel: Blitz.Language.getMessage('chat.dialog_suspend_reception_button')
                };
            };

            OfficialUserSp.prototype.getDetailPageLink = function () {
                return this.delivery.publisher.getProfileUrl();
            };
            return OfficialUserSp;
        })();

        var Community = (function () {
            function Community(delivery) {
                this.delivery = delivery;
            }
            Community.prototype.getParams = function () {
                return {
                    imageIconUrl: this.delivery.publisher.profileImageUrl,
                    notice: Blitz.Language.getMessage('chat.dialog_suspend_reception_notification_community'),
                    description: Blitz.Language.getMessage('chat.dialog_suspend_reception_description_community'),
                    buttonLabel: Blitz.Language.getMessage('chat.dialog_suspend_reception_button_community')
                };
            };

            Community.prototype.getDetailPageLink = function () {
                return this.delivery.publisher.getProfileUrl();
            };
            return Community;
        })();
    })(Blitz.SuspendReceptionDialogModel || (Blitz.SuspendReceptionDialogModel = {}));
    var SuspendReceptionDialogModel = Blitz.SuspendReceptionDialogModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (RelationStatus) {
        RelationStatus[RelationStatus["AlreadyFriend"] = 0] = "AlreadyFriend";
        RelationStatus[RelationStatus["RequestOutgoing"] = 1] = "RequestOutgoing";
        RelationStatus[RelationStatus["RequestIncoming"] = 2] = "RequestIncoming";
        RelationStatus[RelationStatus["Requestable"] = 3] = "Requestable";
        RelationStatus[RelationStatus["NonFriendable"] = 4] = "NonFriendable";
    })(Blitz.RelationStatus || (Blitz.RelationStatus = {}));
    var RelationStatus = Blitz.RelationStatus;

    var Relation = (function () {
        function Relation(linkStatus, permissions) {
            this.linkStatus = linkStatus;
            this.permissions = permissions;
        }
        Relation.prototype.get = function () {
            if (this.linkStatus['is_friend']) {
                return 0 /* AlreadyFriend */;
            } else if (this.linkStatus['is_requesting']) {
                return 1 /* RequestOutgoing */;
            } else if (this.linkStatus['is_requested']) {
                return 2 /* RequestIncoming */;
            } else if (this.permissions['friend_request'] && this.permissions['friend_request']['is_permitted']) {
                return 3 /* Requestable */;
            } else {
                return 4 /* NonFriendable */;
            }
        };

        Relation.prototype.enableChat = function () {
            if (this.permissions['chat_connect'] && this.permissions['chat_connect']['is_permitted']) {
                return true;
            }
            return false;
        };
        return Relation;
    })();
    Blitz.Relation = Relation;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var FriendService = (function () {
        function FriendService(client) {
            this.client = client;
        }
        FriendService.ofApi = function () {
            return new FriendService(new SnsApi.FriendClient());
        };

        FriendService.prototype.sendLinkRequest = function (user) {
            return this.client.sendLinkRequest(user.getUserId());
        };

        FriendService.prototype.confirmLinkRequest = function (user) {
            return this.client.confirmLinkRequest(user.getUserId());
        };
        return FriendService;
    })();
    Blitz.FriendService = FriendService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DialogView = (function (_super) {
        __extends(DialogView, _super);
        function DialogView(params) {
            if (typeof params === "undefined") { params = {}; }
            _super.call(this, {
                tagName: 'section',
                id: 'chat-dialog'
            });
            this.params = params;
            this.template = new SNS.HBSTemplate('dialog.hbs');
        }
        DialogView.prototype.events = function () {
            return {
                'click #primary': 'hide',
                'click #secondary': 'hide'
            };
        };

        DialogView.prototype.show = function () {
            this.render();
            $('#dataArea').before(this.$el);
            return this;
        };

        DialogView.prototype.hide = function () {
            this.$el.remove();
            if (!_.isUndefined(this.params.actionAfterHide)) {
                this.params.actionAfterHide();
            }
        };

        DialogView.prototype.render = function () {
            this.$el.append(this.template.render({
                title: this.params.title,
                message: this.params.message || 'Default Message',
                primary: this.params.primary || Blitz.Language.getMessage('chat.ok'),
                secondary: this.params.secondary
            }));
            return this;
        };
        return DialogView;
    })(SNS.SnsView);
    Blitz.DialogView = DialogView;

    var ExceedMemberDialogView = (function (_super) {
        __extends(ExceedMemberDialogView, _super);
        function ExceedMemberDialogView() {
            _super.call(this, {
                title: Blitz.Language.getMessage('chat.dialog_title_member_select_max_member_num'),
                message: Blitz.Language.getMessage('chat.dialog_content_member_select_max_member_num', [Blitz.GroupConversation.MEMBER_NUM_LIMIT]),
                primary: Blitz.Language.getMessage('chat.confirm')
            });
        }
        return ExceedMemberDialogView;
    })(DialogView);
    Blitz.ExceedMemberDialogView = ExceedMemberDialogView;

    var NoticePenaltyDialogView = (function (_super) {
        __extends(NoticePenaltyDialogView, _super);
        function NoticePenaltyDialogView() {
            _super.call(this, {
                title: Blitz.Language.getMessage('chat.dialog_title_penalty'),
                message: Blitz.Language.getMessage('chat.dialog_content_member_select_penalty'),
                primary: Blitz.Language.getMessage('chat.ok'),
                secondary: Blitz.Language.getMessage('chat.confirm')
            });
        }
        NoticePenaltyDialogView.prototype.events = function () {
            return {
                'click #primary': 'hide',
                'click #secondary': 'jumpToHelp'
            };
        };

        NoticePenaltyDialogView.prototype.jumpToHelp = function () {
            this.linkTo('/#view=help_penalty');
        };
        return NoticePenaltyDialogView;
    })(DialogView);
    Blitz.NoticePenaltyDialogView = NoticePenaltyDialogView;

    var LeaveConfirmDialogView = (function (_super) {
        __extends(LeaveConfirmDialogView, _super);
        function LeaveConfirmDialogView(viewModel) {
            _super.call(this, {
                title: Blitz.Language.getMessage('chat.dialog_title_leave_conversation'),
                message: Blitz.Language.getMessage('chat.dialog_content_leave_conversation'),
                primary: Blitz.Language.getMessage('chat.yes'),
                secondary: Blitz.Language.getMessage('chat.no')
            });
            this.viewModel = viewModel;
        }
        LeaveConfirmDialogView.prototype.events = function () {
            return {
                'click #primary': 'leave',
                'click #secondary': 'hide'
            };
        };

        LeaveConfirmDialogView.prototype.leave = function () {
            this.disableLeave();
            SNS.Analytics.event('leave_do', 'leave_confirm');
            this.viewModel.leaveConversation(this.viewModel.eventCollection.conversation.getIdentity().getValue());
        };

        LeaveConfirmDialogView.prototype.enableLeave = function () {
            $('button', this.$el).removeAttr('disabled').toggleClass('disabled', false);
        };

        LeaveConfirmDialogView.prototype.disableLeave = function () {
            $('button', this.$el).attr('disabled', 'disabled').toggleClass('disabled', true);
        };
        return LeaveConfirmDialogView;
    })(DialogView);
    Blitz.LeaveConfirmDialogView = LeaveConfirmDialogView;

    var NoticeUpgradeDialogView = (function (_super) {
        __extends(NoticeUpgradeDialogView, _super);
        function NoticeUpgradeDialogView() {
            _super.call(this, {
                message: Blitz.Language.getMessage('chat.dialog_content_upgrade'),
                primary: Blitz.Language.getMessage('chat.yes'),
                secondary: Blitz.Language.getMessage('chat.no')
            });
        }
        NoticeUpgradeDialogView.prototype.events = function () {
            return {
                'click #primary': 'jumpToUpgrade',
                'click #secondary': 'hide'
            };
        };

        NoticeUpgradeDialogView.prototype.jumpToUpgrade = function () {
            this.linkTo(SNS.Config.getDomains()['id'] + 'upg/entry');
        };
        return NoticeUpgradeDialogView;
    })(DialogView);
    Blitz.NoticeUpgradeDialogView = NoticeUpgradeDialogView;

    var ReportConfirmDialogView = (function (_super) {
        __extends(ReportConfirmDialogView, _super);
        function ReportConfirmDialogView(param) {
            _super.call(this, {
                message: Blitz.Language.getMessage('chat.dialog_content_report'),
                primary: Blitz.Language.getMessage('chat.yes'),
                secondary: Blitz.Language.getMessage('chat.no')
            });
            this.param = param;
        }
        ReportConfirmDialogView.prototype.events = function () {
            return {
                'click #primary': 'jumpToReport',
                'click #secondary': 'hide'
            };
        };

        ReportConfirmDialogView.prototype.jumpToReport = function () {
            SNS.Analytics.event('report_do', 'report_confirm');
            this.linkTo(this.getReportURL());
        };

        ReportConfirmDialogView.prototype.getReportURL = function () {
            if (SNS.Config.isPC()) {
                return SNS.Config.getGreeJpPatrolFormURL() + '&user_id=' + this.param.targetUserId + '&urn=' + this.param.urn;
            } else {
                return SNS.Config.getSNSDomain() + '?p#sb_content_type=7&target_user_id=' + this.param.targetUserId + '&urn=' + this.param.urn + '&view=moderation_add';
            }
        };
        return ReportConfirmDialogView;
    })(DialogView);
    Blitz.ReportConfirmDialogView = ReportConfirmDialogView;

    var DialogWithHistoryBackView = (function (_super) {
        __extends(DialogWithHistoryBackView, _super);
        function DialogWithHistoryBackView(params) {
            _super.call(this, params);
        }
        DialogWithHistoryBackView.prototype.events = function () {
            return {
                'click #primary': 'historyBack'
            };
        };

        DialogWithHistoryBackView.prototype.historyBack = function () {
            Gryfon.back();
        };
        return DialogWithHistoryBackView;
    })(DialogView);
    Blitz.DialogWithHistoryBackView = DialogWithHistoryBackView;

    var JumpPageConfirmDialogView = (function (_super) {
        __extends(JumpPageConfirmDialogView, _super);
        function JumpPageConfirmDialogView(url, beaconOptions) {
            if (typeof beaconOptions === "undefined") { beaconOptions = {}; }
            _super.call(this, {
                message: Blitz.Language.getMessage('chat.dialog_content_move_out'),
                primary: Blitz.Language.getMessage('chat.yes'),
                secondary: Blitz.Language.getMessage('chat.no')
            });
            this.url = url;
            this.beaconOptions = beaconOptions;
        }
        JumpPageConfirmDialogView.prototype.events = function () {
            return {
                'click #primary': 'jump',
                'click #secondary': 'hide'
            };
        };

        JumpPageConfirmDialogView.prototype.jump = function () {
            this.linkTo(this.url, this.beaconOptions);
            this.hide();
        };
        return JumpPageConfirmDialogView;
    })(DialogView);
    Blitz.JumpPageConfirmDialogView = JumpPageConfirmDialogView;

    var SnsProfileDialogView = (function (_super) {
        __extends(SnsProfileDialogView, _super);
        function SnsProfileDialogView(user, showChatLink) {
            _super.call(this);
            this.user = user;
            this.showChatLink = showChatLink;
            this.template = new SNS.HBSTemplate('sns-profile-dialog.hbs');
            this.requestBtnTpl = new SNS.HBSTemplate('friend-request-button.hbs');
            this.requestOutgoingBtnTpl = new SNS.HBSTemplate('friend-request-outgoing-button.hbs');
            this.requestIncomingBtnTpl = new SNS.HBSTemplate('friend-request-incoming-button.hbs');
            this.jumpToChatBtnTpl = new SNS.HBSTemplate('jump-to-chat-button.hbs');
            this.jumpToProfileBtnTpl = new SNS.HBSTemplate('jump-to-profile-button.hbs');
            this.friendService = Blitz.FriendService.ofApi();
        }
        SnsProfileDialogView.prototype.events = function () {
            return {
                'click #do-link-request': 'sendLinkRequest',
                'click #confirm-link-request': 'confirmLinkRequest',
                'click #link-to-chat': 'jumpToChat',
                'click #link-to-profile': 'jumpToSnsProfile',
                'click .popBtnCloseWhite': 'hide'
            };
        };

        SnsProfileDialogView.prototype.show = function () {
            SNS.Analytics.event('profile_raise', 'chat_sns_profile_dialog');
            _super.prototype.show.call(this);
            return this;
        };

        SnsProfileDialogView.prototype.render = function () {
            this.$el.append(this.template.render({
                user: this.user
            }));
            this.$btnArea = this.$el.find('.itm');
            this.$btnArea.append(this.renderFriendButton(), this.renderChatButton(), this.renderProfileButton());
            return this;
        };

        SnsProfileDialogView.prototype.renderFriendButton = function () {
            var relationStatus = this.user.relation.get();
            switch (relationStatus) {
                case 1 /* RequestOutgoing */:
                    return this.requestOutgoingBtnTpl.render();
                    break;
                case 2 /* RequestIncoming */:
                    return this.requestIncomingBtnTpl.render();
                    break;
                case 3 /* Requestable */:
                    return this.requestBtnTpl.render();
                    break;
                case 0 /* AlreadyFriend */:
                case 4 /* NonFriendable */:
                    return '';
                    break;
                default:
                    debug('Invalid relation status: ' + relationStatus);
            }
        };

        SnsProfileDialogView.prototype.renderChatButton = function () {
            if (this.showChatLink && this.user.relation.enableChat()) {
                return this.jumpToChatBtnTpl.render();
            }
            return '';
        };

        SnsProfileDialogView.prototype.renderProfileButton = function () {
            return this.jumpToProfileBtnTpl.render();
        };

        SnsProfileDialogView.prototype.sendLinkRequest = function () {
            var _this = this;
            SNS.Analytics.event('send_request', 'chat_sns_profile_dialog');
            var $requestBtn = this.$btnArea.find('#do-link-request');
            var text = $requestBtn.html();
            this.showIndicator($requestBtn);
            this.friendService.sendLinkRequest(this.user).next(function (result) {
                _this.$btnArea.prepend(_this.requestOutgoingBtnTpl.render());
                $requestBtn.remove();
                IdentityService.Cache.deleteUserFromCache(_this.user.getIdentity());
            }).error(function (error) {
                _this.hideIndicator($requestBtn, text);
                _this.showError(error);
            });
        };

        SnsProfileDialogView.prototype.confirmLinkRequest = function () {
            var _this = this;
            SNS.Analytics.event('confirm', 'chat_sns_profile_dialog');
            var $confirmBtn = this.$btnArea.find('#confirm-link-request');
            var text = $confirmBtn.html();
            this.showIndicator($confirmBtn);
            this.friendService.confirmLinkRequest(this.user).next(function (result) {
                $confirmBtn.remove();
                IdentityService.Cache.deleteUserFromCache(_this.user.getIdentity());
            }).error(function (error) {
                _this.hideIndicator($confirmBtn, text);
                _this.showError(error);
            });
        };

        SnsProfileDialogView.prototype.showIndicator = function ($button) {
            $button.html('<span class="spr throbWhite18"></span>');
        };

        SnsProfileDialogView.prototype.hideIndicator = function ($button, text) {
            $button.html(text);
        };

        SnsProfileDialogView.prototype.jumpToChat = function () {
            SNS.Analytics.event('enter_chat', 'chat_sns_profile_dialog');
            this.linkTo('chat#view=chat_prepare&target_user_ref_key=' + this.user.getUserId());
        };

        SnsProfileDialogView.prototype.jumpToSnsProfile = function () {
            SNS.Analytics.event('see_profile', 'chat_sns_profile_dialog');
            this.linkTo(this.user.getProfileUrl());
        };
        return SnsProfileDialogView;
    })(DialogView);
    Blitz.SnsProfileDialogView = SnsProfileDialogView;

    var SnsProfileDialogWithReportView = (function (_super) {
        __extends(SnsProfileDialogWithReportView, _super);
        function SnsProfileDialogWithReportView(user, showChatLink, urn) {
            _super.call(this, user, showChatLink);
            this.urn = urn;
            this.jumpToReportBtnTpl = new SNS.HBSTemplate('jump-to-report-button.hbs');
        }
        SnsProfileDialogWithReportView.prototype.events = function () {
            return {
                'click #do-link-request': 'sendLinkRequest',
                'click #confirm-link-request': 'confirmLinkRequest',
                'click #link-to-chat': 'jumpToChat',
                'click #link-to-profile': 'jumpToSnsProfile',
                'click #link-to-report': 'jumpToReport',
                'click .popBtnCloseWhite': 'hide'
            };
        };

        SnsProfileDialogWithReportView.prototype.render = function () {
            _super.prototype.render.call(this);
            this.$btnArea.append(this.renderReportButton());
            return this;
        };

        SnsProfileDialogWithReportView.prototype.renderReportButton = function () {
            return this.jumpToReportBtnTpl.render();
        };

        SnsProfileDialogWithReportView.prototype.jumpToReport = function () {
            SNS.Analytics.event('report_do', 'report_confirm');
            this.linkTo(this.getReportURL());
        };

        SnsProfileDialogWithReportView.prototype.getReportURL = function () {
            if (SNS.Config.isPC()) {
                return SNS.Config.getGreeJpPatrolFormURL() + '&user_id=' + this.user.getUserId() + '&urn=' + this.urn;
            } else {
                return SNS.Config.getSNSDomain() + '?p#sb_content_type=7&target_user_id=' + this.user.getUserId() + '&urn=' + this.urn + '&view=moderation_add';
            }
        };
        return SnsProfileDialogWithReportView;
    })(SnsProfileDialogView);
    Blitz.SnsProfileDialogWithReportView = SnsProfileDialogWithReportView;

    var OfficialUserProfileDialogView = (function (_super) {
        __extends(OfficialUserProfileDialogView, _super);
        function OfficialUserProfileDialogView(delivery) {
            _super.call(this);
            this.delivery = delivery;
            this.template = new SNS.HBSTemplate('delivery/view/official-user-profile-dialog.hbs');
        }
        OfficialUserProfileDialogView.prototype.events = function () {
            return {
                'click #link-to-detail': 'jumpToDetailPage',
                'click .popBtnCloseWhite': 'hide'
            };
        };

        OfficialUserProfileDialogView.prototype.show = function () {
            SNS.Analytics.event('show', 'chat_official_user_profile_dialog');
            _super.prototype.show.call(this);
            return this;
        };

        OfficialUserProfileDialogView.prototype.render = function () {
            this.$el.append(this.template.render({
                user: this.delivery.publisher,
                isCommunity: this.delivery.isCommunity()
            }));
            return this;
        };

        OfficialUserProfileDialogView.prototype.jumpToDetailPage = function () {
            var beaconParam = {};
            var paramName = this.delivery.isCommunity() ? 'community_id' : 'user_id';
            beaconParam[paramName] = this.delivery.publisher.getUserId();
            SNS.Analytics.event('jump_detail_page', 'chat_official_user_profile_dialog', beaconParam);
            this.linkTo(this.delivery.publisher.getProfileUrl());
        };
        return OfficialUserProfileDialogView;
    })(DialogView);
    Blitz.OfficialUserProfileDialogView = OfficialUserProfileDialogView;

    var SuspendReceptionDialogView = (function (_super) {
        __extends(SuspendReceptionDialogView, _super);
        function SuspendReceptionDialogView(delivery) {
            _super.call(this);
            this.delivery = delivery;
            this.template = new SNS.HBSTemplate('delivery/view/suspend_reception_dialog.hbs');
            this.dialogModel = Blitz.SuspendReceptionDialogModel.Factory.apply(delivery);
        }
        SuspendReceptionDialogView.prototype.render = function () {
            this.$el.append(this.template.render(this.dialogModel.getParams()));
            return this;
        };

        SuspendReceptionDialogView.prototype.events = function () {
            return {
                'click .prim': 'jumpToDetailPage',
                'click .popBtnCloseWhite': 'hide'
            };
        };

        SuspendReceptionDialogView.prototype.show = function () {
            SNS.Analytics.event('show', 'chat_suspend_reception_dialog');
            _super.prototype.show.call(this);
            return this;
        };

        SuspendReceptionDialogView.prototype.jumpToDetailPage = function () {
            var beaconParam = {};
            var paramName = this.delivery.isCommunity() ? 'community_id' : 'user_id';
            beaconParam[paramName] = this.delivery.publisher.getUserId();
            SNS.Analytics.event('jump_detail_page', 'chat_suspend_reception_dialog', beaconParam);
            this.linkTo(this.dialogModel.getDetailPageLink());
        };
        return SuspendReceptionDialogView;
    })(DialogView);
    Blitz.SuspendReceptionDialogView = SuspendReceptionDialogView;

    var NotAllowSuspendReceptionDialogView = (function (_super) {
        __extends(NotAllowSuspendReceptionDialogView, _super);
        function NotAllowSuspendReceptionDialogView() {
            _super.call(this, {
                title: Blitz.Language.getMessage('chat.dialog_not_allow_suspend_reception_title'),
                message: Blitz.Language.getMessage('chat.dialog_not_allow_suspend_reception_description')
            });
        }
        NotAllowSuspendReceptionDialogView.prototype.show = function () {
            SNS.Analytics.event('show', 'chat_suspend_reception_dialog');
            _super.prototype.show.call(this);
            return this;
        };
        return NotAllowSuspendReceptionDialogView;
    })(DialogView);
    Blitz.NotAllowSuspendReceptionDialogView = NotAllowSuspendReceptionDialogView;

    var HideConversationHelpDialogView = (function (_super) {
        __extends(HideConversationHelpDialogView, _super);
        function HideConversationHelpDialogView(_primAction, _secondaryAction) {
            _super.call(this, {
                title: Blitz.Language.getMessage('chat.hide_conversation_help_dialog_title'),
                message: Blitz.Language.getMessage('chat.hide_conversation_help_dialog_body'),
                primary: Blitz.Language.getMessage('chat.hide_conversation_help_dialog_prim'),
                secondary: Blitz.Language.getMessage('chat.cancel')
            });
            this._primAction = _primAction;
            this._secondaryAction = _secondaryAction;
        }
        HideConversationHelpDialogView.prototype.events = function () {
            return {
                'click #primary': 'primAction',
                'click #secondary': 'secondaryAction'
            };
        };

        HideConversationHelpDialogView.prototype.primAction = function () {
            this.hide();
            this._primAction();
        };

        HideConversationHelpDialogView.prototype.secondaryAction = function () {
            this.hide();
            this._secondaryAction();
        };
        return HideConversationHelpDialogView;
    })(DialogView);
    Blitz.HideConversationHelpDialogView = HideConversationHelpDialogView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var AuthService = (function () {
        function AuthService() {
            this.domains = SNS.Config.getDomains();
        }
        AuthService.prototype.login = function (client) {
            var _this = this;
            var defer = new Deferred();

            var login = client.login({
                'serverAPIAddress': this.domains['cobitapi'],
                'serverAPIProxyAddress': this.domains['cobitapi'] + '/cors/cors.html',
                'data': {
                    'idToken': SNS.Config.getCobitToken(),
                    'clientTypeId': SNS.Config.getClientTypeId()
                }
            });

            login.next(function (response) {
                Blitz.Myself.create(response['user']['identity']);
                defer.call(response);
            });
            login.error(function (xhr) {
                _this.loginFailed(xhr);
                defer.fail(xhr);
            });
            return defer;
        };

        AuthService.prototype.connect = function (client, loginData) {
            var _this = this;
            var defer = new Deferred();
            var connect = client.connect({
                'serverSSEAddress': this.domains['cobitstream'],
                'serverAPIAddress': this.domains['cobitapi'],
                'serverSSEProxyAddress': this.domains['cobitstream'] + '/cors/cors.html',
                'serverAPIProxyAddress': this.domains['cobitapi'] + '/cors/cors.html',
                'webworkerHelperUri': SNS.Config.getWebworkerHelperUri(),
                'data': {
                    'user_id': loginData['user']['identity'],
                    'access_token': loginData['access_token'],
                    'authentication_method': 'query_string'
                }
            });

            connect.next(function (apiObj) {
                defer.call(apiObj);
            });
            connect.error(function (error) {
                _this.loginFailed(error);
                defer.fail(error);
            });
            return defer;
        };

        AuthService.prototype.loginFailed = function (response) {
            debug(response);
            AsyncStorage.clearLocalSettings();
        };
        return AuthService;
    })();
    Blitz.AuthService = AuthService;
})(Blitz || (Blitz = {}));
var Application = (function () {
    function Application() {
        this.blockUserRepository = Blitz.BlockUserRepository.ofApi();
    }
    Application.prototype.init = function (config) {
        var _this = this;
        if (Util.UA.isAndroid('2.2')) {
            location.hash = '#view=chat_nosupport';
        }
        if (location.hash == '') {
            location.hash = '#view=chat_list';
        }

        AsyncStorage.init();
        SNS.Config.init(config);
        Blitz.Myself.createAsGreeUser();
        this.theme = Blitz.Theme.createFrom(SNS.Config.getTheme());

        Gryfon.initWithDependencies(SNS.Config);

        this.initSNSAPI(config);

        this.blockUserRepository.storeFromConfig(config['blocking_user_ids']);

        i18n.addResource(window['message']);

        $(function () {
            return FastClick.attach(document.body);
        });

        Blitz.BadgeRepository.refreshByConfig(config['badges']);
        Blitz.FlagRepository.saveConfigFlags(config['flags']);

        if (SNS.Config.isChatDisabled()) {
            location.hash = '#view=chat_disabled';
            this.initRouting();
            return;
        }

        Blitz.DeliveryRepository.ofApi().storeListFromConfig(config['delivery_container']);

        this.initAsync().next(function () {
            _this.initRouting();
        });
    };

    Application.prototype.initRouting = function () {
        this.router = new fivefold.Router(new Blitz.BlitzRouteResolver(Blitz.Myself.getMe()));
        this.router.routes(Blitz.routes);
        this.router.errorRoutes(Blitz.errorRoutes);

        this.router.listen(function (route, options) {
            SNS.Analytics.autoSendPageBeacon(route.pattern, options);
        });
    };

    Application.prototype.setLocationHash = function (hash) {
        location.hash = hash;
    };

    Application.prototype.locationReload = function () {
        var _this = this;
        setTimeout(function () {
            return _this.router.reload();
        });
    };

    Application.prototype.initCobitSDK = function () {
        var defer = new Deferred();

        if (Util.UA.isAndroid('2.')) {
            CobitSDK.sse_timeout *= 2;
        }
        var authService = new Blitz.AuthService();
        var login = authService.login(new Cobit.AuthClient());
        login.next(function (loginData) {
            var connect = authService.connect(new Cobit.StreamClient(), loginData);
            connect.next(function (apiObj) {
                return defer.call(apiObj);
            });
            connect.error(function (error) {
                return debug(error);
            });
        });
        login.fail(function (xhr) {
            return debug(xhr);
        });
        return defer;
    };

    Application.prototype.initSNSAPI = function (config) {
        var param = {};
        param['appId'] = parseInt(config['config']['app']['id'], 10);
        if (config['sns_token']) {
            param['token'] = config['sns_token'];
            param['endpoint'] = {
                api: config['config']['domains']['snsapi']
            };
        } else {
            param['endpoint'] = {
                appId: config['config']['domains']['snsapi'],
                authorize: config['config']['domains']['open'] + config['config']['oauth2']['authorize'],
                tokeninfo: config['config']['domains']['open'] + config['config']['oauth2']['tokeninfo'],
                authCallback: config['config']['domains']['ssns'] + config['config']['oauth2']['callback'],
                authServer: config['config']['domains']['ssns'] + config['config']['oauth2']['server'],
                fallback: config['config']['domains']['id'] + '?action=logout_commit'
            };
        }
        gluon.initialize(param);
    };

    Application.prototype.initAsync = function () {
        var _this = this;
        var defer = new Deferred();
        if (SNS.Config.isAgeUnder13() || SNS.Config.isMaintenance() || !Blitz.Myself.getMe().permission.isChatReadable()) {
            setTimeout(function () {
                Cobit.StreamClient.serverSentEventListenerSet = [];
                _this.cobit = new Cobit.DeliveryOnlyApiClient();
                defer.call();
            });
        } else {
            this.initCobitSDK().next(function (api) {
                _this.cobit = new Cobit.ApiClient(api);
            }).next(function () {
                return _this.initMyConversation();
            }).next(function () {
                return defer.call();
            });
        }
        return defer;
    };

    Application.prototype.initMyConversation = function () {
        var defer = new Deferred();
        var key = 'MY_CONVERSATION';
        var cachedMyConversation = AsyncStorage.Local.getJson(key);
        if (_.isUndefined(cachedMyConversation)) {
            this.createMyConversation(key, function () {
                return defer.call();
            });
        } else {
            if (cachedMyConversation.userId === Blitz.Myself.getMe().getIdentity().getValue()) {
                setTimeout(function () {
                    return defer.call();
                });
            } else {
                AsyncStorage.Local.removeItem(key);
                this.createMyConversation(key, function () {
                    return defer.call();
                });
            }
        }
        return defer;
    };

    Application.prototype.createMyConversation = function (key, callback) {
        var _this = this;
        var conversationRepository = Blitz.ConversationRepository.ofApi(app.cobit);

        var conversationRefKey = [
            Blitz.MyConversation.prefixRefKey,
            Blitz.Myself.getMe().getIdentity().getValue()
        ].join('_');

        conversationRepository.getByRefKey(conversationRefKey).next(function (conversation) {
            return callback();
        }).error(function (error) {
            conversationRepository.createMyConversation(conversationRefKey).next(function (conversation) {
                _this.setMyConversationToStorage(key, conversation);
                callback();
            }).error(function (error) {
                debug(error.message);
                callback();
            });
        });
    };

    Application.prototype.setMyConversationToStorage = function (key, conversation) {
        AsyncStorage.Local.setItem(key, JSON.stringify({
            'timestamp': new Date().getTime(),
            'expires': 0,
            'data': {
                'conversationId': conversation.getIdentity().getValue(),
                'userId': Blitz.Myself.getMe().getIdentity().getValue()
            }
        }));
    };
    return Application;
})();
var Blitz;
(function (Blitz) {
    var ErrorView = (function (_super) {
        __extends(ErrorView, _super);
        function ErrorView(error, errorCode, errorCodeMessage) {
            if (typeof errorCode === "undefined") { errorCode = 500; }
            if (typeof errorCodeMessage === "undefined") { errorCodeMessage = "Internal Server<br>Error"; }
            _super.call(this, {
                className: 'contr'
            });
            this.errorCode = errorCode;
            this.errorCodeMessage = errorCodeMessage;
            this.template = new SNS.HBSTemplate('error.hbs');
            this.error = null;
            this.actionLabel = '前のページに戻る';
            this.error = error;
        }
        ErrorView.prototype.events = function () {
            var _this = this;
            return {
                'click .btn.lrg.prim': function () {
                    return _this.back();
                }
            };
        };

        ErrorView.prototype.render = function () {
            if (!_.isEmpty(this.$el.find('.popDlog')[0])) {
                return this;
            }

            this.$el.html(this.template.render({
                errorCode: this.errorCode,
                errorCodeMessage: this.errorCodeMessage,
                message: this.error.message,
                action: this.actionLabel
            }));
            this.delegateEvents();
            return this;
        };

        ErrorView.prototype.back = function () {
            Gryfon.back();
        };
        return ErrorView;
    })(SNS.SnsView);
    Blitz.ErrorView = ErrorView;

    var NotFoundRouteView = (function (_super) {
        __extends(NotFoundRouteView, _super);
        function NotFoundRouteView() {
            _super.call(this, {
                name: 'NotRouteFound',
                message: '指定されたページは存在しません。'
            }, 404, "Not Found");
            this.actionLabel = Blitz.Language.getMessage('chat.back_to_top');
        }
        NotFoundRouteView.prototype.back = function () {
            this.linkTo('chat#view=chat_list');
        };
        return NotFoundRouteView;
    })(ErrorView);
    Blitz.NotFoundRouteView = NotFoundRouteView;

    var NotFoundView = (function (_super) {
        __extends(NotFoundView, _super);
        function NotFoundView() {
            _super.call(this, {
                name: 'NotFound',
                message: 'チャットがありません。'
            }, 404, "Not Found");
        }
        NotFoundView.prototype.back = function () {
            this.linkTo('chat#view=chat_list');
        };
        return NotFoundView;
    })(ErrorView);
    Blitz.NotFoundView = NotFoundView;

    var TimeoutView = (function (_super) {
        __extends(TimeoutView, _super);
        function TimeoutView() {
            _super.call(this, {
                name: 'Timeout',
                message: 'ごめんなさい。もう一度試してみてね。'
            }, 408, "Request Timeout");
        }
        return TimeoutView;
    })(ErrorView);
    Blitz.TimeoutView = TimeoutView;

    var InternalErrorView = (function (_super) {
        __extends(InternalErrorView, _super);
        function InternalErrorView() {
            _super.call(this, {
                name: 'InternalError',
                message: 'ごめんなさい。もう一度試してみてね。'
            });
        }
        return InternalErrorView;
    })(ErrorView);
    Blitz.InternalErrorView = InternalErrorView;

    var InvalidParameterView = (function (_super) {
        __extends(InvalidParameterView, _super);
        function InvalidParameterView(message) {
            if (typeof message === "undefined") { message = '不正なパラメータです。'; }
            _super.call(this, {
                name: 'InvalidParameterView',
                message: message
            }, 400, "Bad Request");
        }
        return InvalidParameterView;
    })(ErrorView);
    Blitz.InvalidParameterView = InvalidParameterView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    (function (ActionError) {
        ActionError.NotFoundRoute = function (message) {
            if (typeof message === "undefined") { message = null; }
            return fivefold.actionFuture(function (promise) {
                promise.failure(new fivefold.ActionError('Blitz.NotFoundRoute', message));
            });
        };

        ActionError.NotFound = function (message) {
            if (typeof message === "undefined") { message = null; }
            return fivefold.actionFuture(function (promise) {
                promise.failure(new fivefold.ActionError('Blitz.NotFound', message));
            });
        };

        ActionError.InvalidParameter = function (message) {
            if (typeof message === "undefined") { message = "不正なパラメータです。"; }
            return fivefold.actionFuture(function (promise) {
                promise.failure(new fivefold.ActionError('Blitz.InvalidParameter', message));
            });
        };

        ActionError.Timeout = function (message) {
            if (typeof message === "undefined") { message = null; }
            return fivefold.actionFuture(function (promise) {
                promise.failure(new fivefold.ActionError('Blitz.Timeout', message));
            });
        };

        ActionError.InternalError = function (message) {
            if (typeof message === "undefined") { message = null; }
            return fivefold.actionFuture(function (promise) {
                promise.failure(new fivefold.ActionError('Blitz.InternalError', message));
            });
        };

        ActionError.DisabledAgeUnder13 = function (message) {
            if (typeof message === "undefined") { message = ''; }
            return fivefold.actionFuture(function (promise) {
                promise.failure(new fivefold.ActionError('Blitz.DisabledAgeUnder13', message));
            });
        };
    })(Blitz.ActionError || (Blitz.ActionError = {}));
    var ActionError = Blitz.ActionError;
})(Blitz || (Blitz = {}));
var SNS;
(function (SNS) {
    var SubNaviView = (function (_super) {
        __extends(SubNaviView, _super);
        function SubNaviView(tabParams) {
            _super.call(this, {
                tagName: 'ul',
                className: 'subnav'
            });
            this.tabParams = tabParams;
        }
        SubNaviView.prototype.render = function () {
            var $tabs = $.map(this.tabParams, function (tab) {
                return new SubNaviTab(tab).render().$el;
            });
            this.$el.append($tabs);
            return this;
        };
        return SubNaviView;
    })(SNS.SnsView);
    SNS.SubNaviView = SubNaviView;

    var SubNaviTab = (function (_super) {
        __extends(SubNaviTab, _super);
        function SubNaviTab(tabInfo) {
            _super.call(this, { tagName: 'li' });
            this.tabInfo = tabInfo;
        }
        SubNaviTab.prototype.render = function () {
            _super.prototype.render.call(this);
            if (this.tabInfo.current) {
                this.$el.toggleClass('cur');
            }
            this.$touchArea.append('<span class="subnavTxt ellp">' + this.tabInfo.tabName + '</span>');
            this.delegateEvents();
            return this;
        };

        SubNaviTab.prototype.onTouch = function (event) {
            this.linkTo(this.tabInfo.tabLink);
        };
        return SubNaviTab;
    })(SNS.TouchableView);
    SNS.SubNaviTab = SubNaviTab;
})(SNS || (SNS = {}));
var SNS;
(function (SNS) {
    var SubNaviLayout = (function (_super) {
        __extends(SubNaviLayout, _super);
        function SubNaviLayout(tabParams) {
            this.tabParams = tabParams;
            _super.call(this);
        }
        SubNaviLayout.defaultTabParams = function () {
            return [];
        };

        SubNaviLayout.create = function (params) {
            if (typeof params === "undefined") { params = this.defaultTabParams(); }
            return new this(params);
        };

        SubNaviLayout.createWithDefaultTab = function (tabNumber) {
            var params = this.defaultTabParams();
            if (params.length >= tabNumber && tabNumber != 0) {
                params[tabNumber - 1].current = true;
            }
            return this.create(params);
        };

        SubNaviLayout.prototype.initialize = function () {
            _super.prototype.initialize.call(this);
            this.$subNaviContainer.show();
            this.$subNaviContainer.html(new SNS.SubNaviView(this.tabParams).render().$el);
            this.$content = $('<div class="tab-content"></div>');
            $('#content-container').append(this.$content);
        };
        return SubNaviLayout;
    })(Blitz.BlitzLayout);
    SNS.SubNaviLayout = SubNaviLayout;

    var ChatSubNaviLayout = (function (_super) {
        __extends(ChatSubNaviLayout, _super);
        function ChatSubNaviLayout() {
            _super.apply(this, arguments);
        }
        ChatSubNaviLayout.defaultTabParams = function () {
            var tabParams = [
                {
                    tabName: this.getChatTabName(),
                    tabLink: 'chat#view=chat_list'
                }
            ];
            tabParams.push(this.getSecondTabParam());
            return tabParams;
        };

        ChatSubNaviLayout.addNewBadgeToChatListTab = function () {
            var $dom = $('.subnavTxt').first();
            var title = this.getChatTabName();
            this.appendNewBadge($dom, title);
        };

        ChatSubNaviLayout.restBadgeToChatListTab = function () {
            var $dom = $('.subnavTxt').first();
            var title = this.getChatTabName();
            $dom.html(title);
        };

        ChatSubNaviLayout.addNewBadgeToContactListTab = function () {
            var $dom = $('.subnavTxt').last();
            var title = Blitz.Language.getMessage('chat.tab_contact_list');
            this.appendNewBadge($dom, title);
        };

        ChatSubNaviLayout.resetBadgeToContactListTab = function () {
            var $dom = $('.subnavTxt').last();
            var title = Blitz.Language.getMessage('chat.tab_contact_list');
            $dom.html(title);
        };

        ChatSubNaviLayout.addNewBadgeToGameChatListTab = function () {
            var $dom = $('.subnavTxt').last();
            var title = Blitz.Language.getMessage('chat.tab_game_chat');
            this.appendNewBadge($dom, title);
        };

        ChatSubNaviLayout.resetBadgeToGameChatListTab = function () {
            var $dom = $('.subnavTxt').last();
            var title = Blitz.Language.getMessage('chat.tab_game_chat');
            $dom.html(title);
        };

        ChatSubNaviLayout.appendNewBadge = function ($dom, title) {
            var $badge = $('<span class="att fsT spaceL"></span>').text(Blitz.Language.getMessage('chat.new'));
            $dom.html(title).append($badge);
        };

        ChatSubNaviLayout.getChatTabName = function () {
            if (SNS.Config.isApp()) {
                return Blitz.Language.getMessage('chat.tab_conversation_list');
            } else {
                return Blitz.Language.getMessage('chat.tab_gree_chat');
            }
        };

        ChatSubNaviLayout.getSecondTabParam = function () {
            if (SNS.Config.isApp()) {
                return {
                    tabName: Blitz.Language.getMessage('chat.tab_contact_list'),
                    tabLink: 'chat#view=contact_list'
                };
            } else {
                return {
                    tabName: Blitz.Language.getMessage('chat.tab_game_chat'),
                    tabLink: SNS.Config.getGameChatURL()
                };
            }
        };
        return ChatSubNaviLayout;
    })(SubNaviLayout);
    SNS.ChatSubNaviLayout = ChatSubNaviLayout;
})(SNS || (SNS = {}));
var Blitz;
(function (Blitz) {
    var NewContactCollection = (function (_super) {
        __extends(NewContactCollection, _super);
        function NewContactCollection() {
            _super.call(this);
            this.userFactory = new Blitz.UserFactory();
            this.userRepository = Blitz.UserRepository.ofApi();
        }
        NewContactCollection.prototype.register = function (userList) {
            var _this = this;
            var contactList = this.userFactory.createUsers(userList);
            contactList.forEach(function (contact) {
                _this.userRepository.storeCache(contact.getIdentity(), contact);
            });
            this.addItems(contactList);
        };
        return NewContactCollection;
    })(SNS.Collection);
    Blitz.NewContactCollection = NewContactCollection;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ContactListViewModel = (function (_super) {
        __extends(ContactListViewModel, _super);
        function ContactListViewModel() {
            _super.call(this);
            this.contactCollection = new Blitz.ContactCollection();
            this.newContactCollection = new Blitz.NewContactCollection();
        }
        ContactListViewModel.prototype.getByRefKey = function (conversationRefKey) {
            var defer = new Deferred();

            var conversation = this.conversationRepo.getByRefKey(conversationRefKey);
            conversation.next(function (conversation) {
                return defer.call(conversation);
            });
            conversation.error(function (error) {
                return defer.fail(error);
            });

            return defer;
        };

        ContactListViewModel.prototype.createAndAdd = function (conversationRefKey, otherUserId) {
            var _this = this;
            var defer = new Deferred();

            this.conversationRepo.createAndAdd([otherUserId], conversationRefKey).next(function (conversation) {
                defer.call(conversation);
                _this.emit('createSucceed', conversation);
            }).error(function (error) {
                return defer.fail(error);
            });

            return defer;
        };
        return ContactListViewModel;
    })(Blitz.BlitzViewModel);
    Blitz.ContactListViewModel = ContactListViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ContactListSearchBoxView = (function () {
        function ContactListSearchBoxView() {
            this.searchBoxTemplate = new SNS.HBSTemplate('contact/search-box.tpl');
        }
        ContactListSearchBoxView.prototype.delegateEvents = function () {
        };

        ContactListSearchBoxView.prototype.render = function () {
            this.$el.append(this.renderSearchBox());
            this.delegateEvents();
            return this;
        };

        ContactListSearchBoxView.prototype.renderSearchBox = function () {
            return this.searchBoxTemplate.render();
        };
        return ContactListSearchBoxView;
    })();
    Blitz.ContactListSearchBoxView = ContactListSearchBoxView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ContactCollectionView = (function (_super) {
        __extends(ContactCollectionView, _super);
        function ContactCollectionView(viewModel, options) {
            if (typeof options === "undefined") { options = {}; }
            var _this = this;
            _super.call(this, viewModel, options);
            this.viewModel = viewModel;
            this.autoPagerize = true;
            this.template = new SNS.HBSTemplate('loadmore-collection.hbs');
            viewModel.on('collectionRendered', function (items) {
                return _this.collectionRendered(items);
            });
        }
        ContactCollectionView.prototype.collectionRendered = function (items) {
            if (items.length <= 3) {
                this.$el.append(new Blitz.FindFriendView().render().$el);
            }
        };

        ContactCollectionView.prototype.renderItem = function (item) {
            return new ContactItemView(item).render().$el;
        };

        ContactCollectionView.prototype.renderLoadMore = function () {
            this.loadMoreView = new SNS.LoadMoreView(this.viewModel, this.loadMoreTextKey, { selector: '.' + this.loadMoreClass, context: this.$el, className: 'cst' }).render();
            return this.loadMoreView.$el;
        };
        return ContactCollectionView;
    })(SNS.LoadMoreCollectionView);
    Blitz.ContactCollectionView = ContactCollectionView;

    var ContactItemView = (function (_super) {
        __extends(ContactItemView, _super);
        function ContactItemView(contact) {
            _super.call(this, {
                tagName: 'article',
                className: 'cst',
                id: contact.getIdentity().getValue().toString()
            });
            this.contact = contact;
            this.userInfoTemplate = new SNS.HBSTemplate('contact/user-info.hbs');
        }
        ContactItemView.prototype.events = function () {
            return {
                'click .ico36.tap.usr': 'showSnsProfileDialog'
            };
        };

        ContactItemView.prototype.render = function () {
            this.$el.html(this.userInfoTemplate.render({
                'userId': this.contact.getIdentity().getValue(),
                'profileImageUrl': this.contact.profileImageUrl,
                'nickname': this.contact.getNickname(),
                'isOnline': this.contact.isOnline
            }));
            return this;
        };

        ContactItemView.prototype.showSnsProfileDialog = function (event) {
            event.stopPropagation();
            new Blitz.SnsProfileDialogView(this.contact, true).show();
        };
        return ContactItemView;
    })(SNS.SnsView);
    Blitz.ContactItemView = ContactItemView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var NewContactCollectionView = (function (_super) {
        __extends(NewContactCollectionView, _super);
        function NewContactCollectionView(viewModel) {
            _super.call(this, viewModel);
            this.viewModel = viewModel;
        }
        NewContactCollectionView.prototype.renderItem = function (item) {
            return new Blitz.ContactItemView(item).render().$el;
        };
        return NewContactCollectionView;
    })(SNS.CollectionView);
    Blitz.NewContactCollectionView = NewContactCollectionView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ContactListUnitView = (function (_super) {
        __extends(ContactListUnitView, _super);
        function ContactListUnitView(viewModel) {
            var _this = this;
            _super.call(this, {
                tagName: 'section',
                className: 'unit'
            });
            this.viewModel = viewModel;
            this.searchBoxTemplate = new SNS.HBSTemplate('contact/search-box.hbs');
            this.listLabelTemplate = new SNS.HBSTemplate('contact/list-label.hbs');
            this.contactCollection = this.viewModel.contactCollection;
            this.newContactCollection = this.viewModel.newContactCollection;
            this.contactCollection.on('loadFailed', function (error) {
                return _this.loadFailed(error);
            });
        }
        ContactListUnitView.prototype.events = function () {
            return {
                'click .collection a.tap': 'jumpToChat'
            };
        };

        ContactListUnitView.prototype.render = function () {
            if (this.contactCollection.isEmpty() && this.newContactCollection.isEmpty()) {
                this.$el.append(new Blitz.FindFriendView().render().$el);
                return this;
            }

            if (!this.newContactCollection.isEmpty()) {
                this.$el.append(this.renderNewLabel(), this.renderNewContactCollection());
            }
            if (!this.contactCollection.isEmpty()) {
                this.$el.append(this.renderLabel(), this.renderContactCollection());
            }

            return this;
        };

        ContactListUnitView.prototype.renderSearchBox = function () {
            return this.searchBoxTemplate.render();
        };

        ContactListUnitView.prototype.renderNewLabel = function () {
            return this.listLabelTemplate.render({
                'class': 'cptn skPink',
                'title': Blitz.Language.getMessage('chat.contact_list_label_new_contacts'),
                'count': this.newContactCollection.items.length
            });
        };

        ContactListUnitView.prototype.renderNewContactCollection = function () {
            return new Blitz.NewContactCollectionView(this.newContactCollection).render().$collection;
        };

        ContactListUnitView.prototype.renderLabel = function () {
            return this.listLabelTemplate.render({
                'class': 'cptn',
                'title': Blitz.Language.getMessage('chat.contact_list_label_contacts'),
                'count': this.contactCollection.total
            });
        };

        ContactListUnitView.prototype.renderContactCollection = function () {
            return new Blitz.ContactCollectionView(this.contactCollection).render().$el.children();
        };

        ContactListUnitView.prototype.jumpToChat = function (event) {
            var _this = this;
            var myUserId = Blitz.Myself.getMe().getIdentity().getValue();
            var otherUserId = $(event.currentTarget).data('user-id');
            var conversationRefKey = Util.createConversationRefKey(myUserId, otherUserId);

            this.viewModel.getByRefKey(conversationRefKey).next(function (conversation) {
                var conversationId = conversation.getIdentity().getValue();
                _this.linkTo('chat#view=chat_view&id=' + conversationId);
                SNS.Analytics.event('enter_chat');
            }).error(function (error) {
                if (_this.hasPenalty() || !_this.isChatWritePermitted()) {
                    return;
                }

                _this.viewModel.createAndAdd(conversationRefKey, otherUserId).next(function (conversation) {
                    var conversationId = conversation.getIdentity().getValue();
                    _this.linkTo('chat#view=chat_view&id=' + conversationId);
                    SNS.Analytics.event('enter_chat');
                    SNS.Analytics.event('create_chat_1on1');
                }).error(function (error) {
                    return _this.showError(error);
                });
            });
        };

        ContactListUnitView.prototype.loadFailed = function (error) {
            this.showError(error);
        };
        return ContactListUnitView;
    })(Blitz.BlitzView);
    Blitz.ContactListUnitView = ContactListUnitView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ContactListView = (function (_super) {
        __extends(ContactListView, _super);
        function ContactListView(viewModel) {
            _super.call(this, viewModel, {
                className: 'contr'
            });
            this.viewModel = viewModel;
        }
        ContactListView.prototype.render = function () {
            this.$el.append(this.renderContactList());

            return this;
        };

        ContactListView.prototype.renderContactList = function () {
            return new Blitz.ContactListUnitView(this.viewModel).render().$el;
        };

        ContactListView.prototype.conversationCreatedEvent = function (event) {
            SNS.ChatSubNaviLayout.addNewBadgeToChatListTab();
        };

        ContactListView.prototype.userAddedEvent = function (event) {
            if (event.getEventContents().isContainMyself()) {
                SNS.ChatSubNaviLayout.addNewBadgeToChatListTab();
            }
        };
        return ContactListView;
    })(Blitz.SSEBaseView);
    Blitz.ContactListView = ContactListView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatPrepareView = (function (_super) {
        __extends(ChatPrepareView, _super);
        function ChatPrepareView(targetUserRefKey) {
            _super.call(this);
            this.targetUserRefKey = targetUserRefKey;
            this.prepareTemplate = new SNS.HBSTemplate('chat/chat-prepare.hbs');
            this.conversationRepository = Blitz.ConversationRepository.ofApi(app.cobit);
            this.conversationRefKey = this.createConversationRefKey(this.targetUserRefKey);
        }
        ChatPrepareView.prototype.events = function () {
            return {};
        };

        ChatPrepareView.prototype.render = function () {
            this.$el.append(this.prepareTemplate.render());
            this.prepare();
            return this;
        };

        ChatPrepareView.prototype.prepare = function () {
            var _this = this;
            var getConversation = this.conversationRepository.getByRefKey(this.conversationRefKey);
            getConversation.next(function (conversation) {
                _this.jumpToChat(conversation);
            });
            getConversation.error(function (error) {
                _this.createConversation();
            });
        };

        ChatPrepareView.prototype.createConversationRefKey = function (targetUserRefKey) {
            var myUserId = Blitz.Myself.getMe().getIdentity().getValue();
            return Util.createConversationRefKey(myUserId, targetUserRefKey);
        };

        ChatPrepareView.prototype.createConversation = function () {
            var _this = this;
            var createConversation = this.conversationRepository.createAndAdd([this.targetUserRefKey], this.conversationRefKey);
            createConversation.next(function (conversation) {
                _this.jumpToChat(conversation);
                _this.sendChatCreateBeacon(conversation);
            });
            createConversation.error(function (error) {
                _this.showAlertWithHistoryBack(error.message);
            });
        };

        ChatPrepareView.prototype.jumpToChat = function (conversation) {
            var conversationId = conversation.getIdentity().getValue();
            location.replace('chat#view=chat_view&id=' + conversationId);
        };

        ChatPrepareView.prototype.sendChatCreateBeacon = function (conversation) {
            if (conversation.isOneOnOne()) {
                SNS.Analytics.event('create_chat_1on1');
            } else {
                debug('Invalid conversation type: ' + conversation.getConversationType());
            }
        };
        return ChatPrepareView;
    })(Blitz.BlitzView);
    Blitz.ChatPrepareView = ChatPrepareView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatIntroView = (function (_super) {
        __extends(ChatIntroView, _super);
        function ChatIntroView() {
            _super.call(this, { className: 'contr' });
            this.maintenanceAnnounceTemplate = new SNS.HBSTemplate('chat/maintenance-announce.hbs');
        }
        ChatIntroView.prototype.events = function () {
            return {
                'click #exit-intro': 'jumpToChatList'
            };
        };

        ChatIntroView.prototype.render = function () {
            if (SNS.Config.isAgeUnder13()) {
                return this;
            }

            if (SNS.Config.willMaintenance()) {
                this.$el.append(this.renderMaintenanceAnnounce(Blitz.Language.getMessage('chat.intro_will_maintenance_head')));
            } else if (SNS.Config.isMaintenance()) {
                this.$el.append(this.renderMaintenanceAnnounce(Blitz.Language.getMessage('chat.intro_under_maintenance_head')));
            }
            return this;
        };

        ChatIntroView.prototype.renderMaintenanceAnnounce = function (head) {
            return this.maintenanceAnnounceTemplate.render({
                head: head,
                message: Blitz.Language.getMessage('chat.intro_maintenance_announce', {
                    span: SNS.Config.getMaintenanceSpan()
                }, false)
            });
        };

        ChatIntroView.prototype.jumpToChatList = function () {
            Gryfon.back();
        };
        return ChatIntroView;
    })(Blitz.BlitzView);
    Blitz.ChatIntroView = ChatIntroView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatNoSupportView = (function (_super) {
        __extends(ChatNoSupportView, _super);
        function ChatNoSupportView() {
            _super.apply(this, arguments);
            this.template = new SNS.HBSTemplate('chat/no-support.hbs');
        }
        ChatNoSupportView.prototype.events = function () {
            return {
                'click .btn': 'historyBack'
            };
        };

        ChatNoSupportView.prototype.render = function () {
            this.$el.append(this.template.render());
            return this;
        };

        ChatNoSupportView.prototype.historyBack = function () {
            Gryfon.back();
        };
        return ChatNoSupportView;
    })(Blitz.BlitzView);
    Blitz.ChatNoSupportView = ChatNoSupportView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var GroupSettingsView = (function (_super) {
        __extends(GroupSettingsView, _super);
        function GroupSettingsView(viewModel, conversationRepository) {
            var _this = this;
            _super.call(this, viewModel, {
                className: 'contr'
            });
            this.viewModel = viewModel;
            this.conversationRepository = conversationRepository;
            this.labelTemplate = new SNS.HBSTemplate('chat/group-settings/label.hbs');
            this.headerView = new Blitz.GroupSettingsHeaderView();
            this.participantCollection = viewModel.participantCollection;
            this.participantCollection.on('collectionRendered', function () {
                return _this.complementIdentities();
            });
            this.participantCollection.on('loadFailed', function (error) {
                return _this.showError(error);
            });
            this.participantCollection.on('addSucceed', function (event) {
                return _this.addSucceed(event);
            });
        }
        GroupSettingsView.prototype.events = function () {
            return {};
        };

        GroupSettingsView.prototype.render = function () {
            this.headerView.show();
            var $section = $('<section class="unit">').append(this.renderChatProfile(), this.renderLabel(), this.renderParticipantList());
            this.$el.show().html($section);
            this.$el.append(this.renderEditGroupNameModal());
            this.delegateEvents();
            return this;
        };

        GroupSettingsView.prototype.renderEditGroupNameModal = function () {
            var _this = this;
            this.editGroupNameModalView = new Blitz.EditGroupNameModalView(this.viewModel, this.conversationRepository);
            var $el = this.editGroupNameModalView.render().$el;
            $el.off('hideEditGroupNameModalView');
            $el.on('hideEditGroupNameModalView', function () {
                _this.hideEditGroupNameModalView();
            });
            return $el;
        };

        GroupSettingsView.prototype.renderChatProfile = function () {
            var _this = this;
            var view = new Blitz.GroupProfileView(this.viewModel);
            var $el = view.render().$el;
            $el.off('showEditGroupNameModal');
            $el.on('showEditGroupNameModal', function () {
                _this.showEditGroupNameModalView();
            });
            return $el;
        };

        GroupSettingsView.prototype.hideEditGroupNameModalView = function () {
            this.headerView.show();
            this.$el.find('.unit').show();
            this.editGroupNameModalView.hide();
        };

        GroupSettingsView.prototype.showEditGroupNameModalView = function () {
            var _this = this;
            this.headerView.hide();
            this.$el.find('.unit').hide();
            this.editGroupNameModalView.show();
            this.editGroupNameModalView.$el.off('saveConversationName');
            this.editGroupNameModalView.$el.on('saveConversationName', function () {
                _this.editGroupNameModalView.hide();
                app.locationReload();
            });
            this.editGroupNameModalView.setText(this.viewModel.conversation.name);
        };

        GroupSettingsView.prototype.renderLabel = function () {
            return this.labelTemplate.render({
                count: this.participantCollection.total
            });
        };

        GroupSettingsView.prototype.renderParticipantList = function () {
            var view = new Blitz.ParticipantCollectionView(this.participantCollection);
            return view.render().$el.children();
        };

        GroupSettingsView.prototype.addSucceed = function (event) {
            this.updateConversation(event);
        };

        GroupSettingsView.prototype.updateConversation = function (event) {
            var _this = this;
            var future = this.conversationRepository.getConversationFromApi(event.conversationIdentity.getValue());
            future.onSuccess(function (conversation) {
                _this.viewModel.conversation = conversation;
                _this.render();
            });
        };

        GroupSettingsView.prototype.offLine = function () {
            this.editGroupNameModalView.offLine();
        };
        return GroupSettingsView;
    })(Blitz.SSEBaseView);
    Blitz.GroupSettingsView = GroupSettingsView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var GroupSettingsViewModel = (function (_super) {
        __extends(GroupSettingsViewModel, _super);
        function GroupSettingsViewModel(conversation) {
            _super.call(this);
            this.conversation = conversation;
            this.participantCollection = new Blitz.ParticipantCollection(conversation);
        }
        return GroupSettingsViewModel;
    })(Blitz.BlitzViewModel);
    Blitz.GroupSettingsViewModel = GroupSettingsViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatController = (function (_super) {
        __extends(ChatController, _super);
        function ChatController() {
            _super.apply(this, arguments);
            this.eventFactory = new Blitz.EventFactory();
            this.relationalPermissionService = new Blitz.RelationalPermissionService();
            this.layout = new Blitz.BlitzLayout();
            this.hiddenFooterViews = ['chatView', 'chatDeliveryView'];
            this.enableWithoutCobitViews = [
                'chatList', 'chatHiddenList', 'chatDeliveryView', 'chatIntro', 'chatDisabled', 'chatDisabledOfficial', 'chatNoSupport',
                'notFound', 'timeout', 'internalError', 'invalidParameter', 'notFoundRoute', 'disabledAgeUnder13', 'deliveryOptout', 'chatUpgrade', 'themeSetting'
            ];
            this.disableThemeViews = [
                'chatSetting', 'deliveryOptout', 'themeSetting',
                'chatDisabled', 'chatDisabledOfficial', 'chatNoSupport', 'chatUpgrade',
                'notFoundRoute', 'notFound', 'timeout', 'internalError', 'invalidParameter', 'disabledAgeUnder13'
            ];
        }
        ChatController.prototype.dispatch = function (method, optionsOrError) {
            var _this = this;
            this.__before(method, optionsOrError);

            var redirect = this.getRedirectHash(method);
            if (redirect) {
                Blitz.BlitzLayout.showIndicator();
                this.redirect(redirect);
            }

            if (SNS.Config.isAgeUnder13() && !_.contains(this.enableWithoutCobitViews, method)) {
                return Blitz.ActionError.DisabledAgeUnder13();
            }

            var actionFuture = _super.prototype.dispatch.call(this, method, optionsOrError);
            actionFuture.onSuccess(function (view) {
                _this.__after(method, optionsOrError);
            });
            return actionFuture;
        };

        ChatController.prototype.__before = function (method, optionsOrError) {
            var _this = this;
            app.theme.foreach(function (theme) {
                if (theme.isApplicable() && !_.contains(_this.disableThemeViews, method)) {
                    _this.layout.setTheme(theme);
                } else {
                    _this.layout.clearTheme(theme);
                }
            });

            Gryfon.ready();
            Gryfon.startLoading();

            Cobit.StreamClient.clearAllSSETimer();
            if (optionsOrError) {
                this.logOriginPage(optionsOrError);
            }

            if (SNS.Config.isPC() && _.contains(this.hiddenFooterViews, method)) {
                this.layout.$commonFooter.addClass('hide');
            }
        };

        ChatController.prototype.__after = function (method, optionsOrError) {
            Gryfon.contentsReady();

            if (SNS.Config.isPC() && !_.contains(this.hiddenFooterViews, method)) {
                this.layout.$commonFooter.removeClass('hide');
            }
        };

        ChatController.prototype.redirect = function (url) {
            location.replace(url);
        };

        ChatController.prototype.getRedirectHash = function (method) {
            if (SNS.Config.isChatDisabled() && method !== 'chatDisabled') {
                return '#view=chat_disabled';
            }
            if (SNS.Config.isChatEnabled() && method === 'chatDisabled') {
                return '#view=chat_list';
            }

            if (SNS.Config.isMaintenance() && !_.contains(this.enableWithoutCobitViews, method)) {
                return "#view=chat_intro";
            }
            if (!SNS.Config.isMaintenance() && !SNS.Config.willMaintenance() && method === 'chatIntro') {
                return SNS.Config.getTopPageHash();
            }
        };

        ChatController.prototype.listenSSE = function (viewModel) {
            var _this = this;
            Cobit.StreamClient.setServerSentEventListener(function (sse) {
                var event = _this.eventFactory.create(sse);
                if (!_.isNull(event)) {
                    viewModel.newEventReceived(event);
                }
            });
        };

        ChatController.prototype.chatList = function (options) {
            var _this = this;
            this.setTabWithBadge(1);
            var chatListViewModel = new Blitz.ChatListViewModel(0 /* Visible */);
            this.resetOfflineListener(chatListViewModel);
            this.listenSSE(chatListViewModel);

            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.ChatListView(chatListViewModel));
            }).recoverWith(function (error) {
                return _this.showErrorView(error);
            });
        };

        ChatController.prototype.chatHiddenList = function (options) {
            var _this = this;
            var chatListViewModel = new Blitz.ChatListViewModel(1 /* Hidden */);
            this.resetOfflineListener(chatListViewModel);
            this.listenSSE(chatListViewModel);

            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.ChatHiddenListView(chatListViewModel));
            }).recoverWith(function (error) {
                return _this.showErrorView(error);
            });
        };

        ChatController.prototype.contactList = function () {
            var _this = this;
            this.setTabWithBadge(2);

            var contactListViewModel = new Blitz.ContactListViewModel();
            contactListViewModel.newContactCollection.register(SNS.Config.getNewContactList());

            this.resetOfflineListener(contactListViewModel);
            this.listenSSE(contactListViewModel);

            return contactListViewModel.contactCollection.loadFirst().map(function (r, p) {
                p.success(new Blitz.ContactListView(contactListViewModel));

                SNS.Analytics.sendPageBeaconAndUpdatePreviousView('chat_contact_list');
            }).recoverWith(function (error) {
                return _this.showErrorView(error);
            });
        };

        ChatController.prototype.chatSetting = function () {
            var _this = this;
            this.layout.appendMdlFootHClass();

            var chatSettingViewModel = new Blitz.ChatSettingViewModel();
            this.resetOfflineListener(chatSettingViewModel);
            this.listenSSE(chatSettingViewModel);

            var userRepository = Blitz.UserRepository.ofApi();
            return userRepository.getNotificationSetting().map(function (r, p) {
                p.success(new Blitz.ChatSettingView(r));
            }).recoverWith(function (error) {
                return _this.showErrorView(error);
            });
        };

        ChatController.prototype.checkNewBadge = function () {
            if (Blitz.Myself.getMe().permission.isChatReadable()) {
                var badgeService = Blitz.BadgeService.ofSnsApi();
                var badge = badgeService.get(0 /* GREE_CHAT */);
                badge.next(function () {
                    if (Blitz.BadgeRepository.hasUnread(0 /* GREE_CHAT */)) {
                        SNS.ChatSubNaviLayout.addNewBadgeToChatListTab();
                    } else {
                        SNS.ChatSubNaviLayout.restBadgeToChatListTab();
                    }
                });
            }
            if (!SNS.Config.isApp()) {
                if (Blitz.BadgeRepository.hasUnread(1 /* GAME_CHAT */)) {
                    SNS.ChatSubNaviLayout.addNewBadgeToGameChatListTab();
                } else {
                    SNS.ChatSubNaviLayout.resetBadgeToGameChatListTab();
                }
                return;
            }

            if (SNS.Config.getNewContactNum()) {
                SNS.ChatSubNaviLayout.addNewBadgeToContactListTab();
            } else {
                SNS.ChatSubNaviLayout.resetBadgeToContactListTab();
            }
        };

        ChatController.prototype.chatView = function (options) {
            var _this = this;
            this.layout.appendMdlFootHClass();
            this.layout.appendSkLightGrayClass();
            this.layout.hideGreeCommonFooter();

            var conversationId = options['id'];
            if (!conversationId) {
                return Blitz.ActionError.NotFound();
            }
            var conversationRepository = Blitz.ConversationRepository.ofApi(app.cobit);
            var chatViewViewModel;

            return conversationRepository.getConversation(conversationId).flatMap(function (conversation) {
                var eventCollection = new Blitz.EventCollection(conversation);
                chatViewViewModel = new Blitz.ChatViewViewModel(eventCollection);

                return _this.relationalPermissionService.create(conversation).map(function (permission, promise) {
                    promise.success(new Blitz.ChatViewView(chatViewViewModel, permission));
                    _this.resetOfflineListener(chatViewViewModel);
                    _this.listenSSE(chatViewViewModel);

                    _this.sendChatViewEventBeacon(conversation);
                    _this.clearBadge();
                });
            }).recoverWith(function (error) {
                return _this.showErrorView(error);
            });
        };

        ChatController.prototype.chatDeliveryView = function (options) {
            var _this = this;
            this.layout.appendMdlFootHClass();
            this.layout.appendSkLightGrayClass();
            this.layout.hideGreeCommonFooter();

            var deliveryIdStr = options['id'];
            if (_.isUndefined(deliveryIdStr)) {
                return Blitz.ActionError.NotFound();
            }
            var deliveryId = new Blitz.DeliveryIdentity(deliveryIdStr);

            var deliveryRepository = Blitz.DeliveryRepository.ofApi();
            var deliveryMessageViewModel;

            return deliveryRepository.get(deliveryId).map(function (delivery, promise) {
                var eventCollection = new Blitz.DeliveryMessageCollection(delivery);
                deliveryMessageViewModel = new Blitz.DeliveryMessagesViewModel(eventCollection);

                _this.resetOfflineListener(deliveryMessageViewModel);
                _this.listenSSE(deliveryMessageViewModel);

                promise.success(new Blitz.DeliveryView(deliveryMessageViewModel));
                _this.clearBadge();
                _this.sendDeliveryViewEventBeacon(delivery);
            }).recoverWith(function (error) {
                return _this.showErrorView(error);
            });
        };

        ChatController.prototype.deliveryOptout = function (options) {
            var _this = this;
            var officialUserIdNumber = options['official_user_id'];
            if (_.isUndefined(officialUserIdNumber)) {
                return Blitz.ActionError.InvalidParameter("official_user_idがありません。");
            }
            var officialUserId = new Blitz.SnsUserId(officialUserIdNumber);
            var optoutSettingRepository = Blitz.OptoutSettingRepository.ofApi();

            return optoutSettingRepository.get(officialUserId).map(function (optoutSetting, promise) {
                var view = optoutSetting.enablesOptout ? new Blitz.DeliveryOptoutView(optoutSetting) : new Blitz.InvalidParameterView(Blitz.Language.getMessage('chat.dialog_not_allow_suspend_reception_description'));
                promise.success(view);
            }).recoverWith(function (error) {
                return _this.showErrorView(error);
            });
        };

        ChatController.prototype.clearBadge = function () {
            var badgeService = Blitz.BadgeService.ofSnsApi();
            var badge = badgeService.update(0 /* GREE_CHAT */);
            badge.next(function () {
                Blitz.BadgeRepository.clear(0 /* GREE_CHAT */);
            });
        };

        ChatController.prototype.showErrorView = function (error) {
            if (error instanceof Cobit.NotParticipantOfConversationError || error instanceof Cobit.NotFoundResourceError || error instanceof SnsApi.ResourceNotFoundError) {
                return Blitz.ActionError.NotFound();
            } else if (error instanceof SnsApi.InvalidParameterError) {
                return Blitz.ActionError.InvalidParameter();
            } else {
                return Blitz.ActionError.Timeout();
            }
        };

        ChatController.prototype.sendChatViewEventBeacon = function (conversation) {
            var name = conversation.getTypeShortName();
            if (name != null) {
                SNS.Analytics.event(name);
            } else {
                debug('Invalid conversation type: ' + conversation.getConversationType());
            }
        };

        ChatController.prototype.sendDeliveryViewEventBeacon = function (delivery) {
            var params = {};
            var publisherId = delivery.publisher.getUserId();
            if (delivery.isCommunity()) {
                params['community_id'] = publisherId;
                SNS.Analytics.event('community', 'chat_delivery_view', params);
            } else {
                params['user_id'] = publisherId;
                SNS.Analytics.event('official', 'chat_delivery_view', params);
            }
        };

        ChatController.prototype.chatGroupSettings = function (options) {
            var _this = this;
            var conversationId = options['id'];
            if (!conversationId) {
                return Blitz.ActionError.NotFound();
            }

            var conversationRepository = Blitz.ConversationRepository.ofApi(app.cobit);
            return conversationRepository.getConversation(conversationId).map(function (r, p) {
                var groupSettingsViewModel = new Blitz.GroupSettingsViewModel(r);
                p.success(new Blitz.GroupSettingsView(groupSettingsViewModel, conversationRepository));
            }).recoverWith(function (error) {
                return _this.showErrorView(error);
            });
        };

        ChatController.prototype.chatPrepare = function (options) {
            var targetUserRefKey = options['target_user_ref_key'];
            if (!targetUserRefKey) {
                return Blitz.ActionError.NotFound();
            }
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.ChatPrepareView(targetUserRefKey));
            });
        };

        ChatController.prototype.chatIntro = function (options) {
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.ChatIntroView());
            });
        };

        ChatController.prototype.chatNoSupport = function (options) {
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.ChatNoSupportView());
            });
        };

        ChatController.prototype.chatDisabled = function (options) {
            this.setTabWithBadge(1);
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.DisabledView());
            });
        };

        ChatController.prototype.chatDisabledOfficial = function (options) {
            this.setTabWithBadge(1);
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.DisabledViewOfficial());
            });
        };

        ChatController.prototype.chatUpgrade = function (options) {
            if (!SNS.Config.isIOSApp()) {
                this.setTabWithBadge(1);
            }
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.UpgradeView(options));
            });
        };

        ChatController.prototype.themeSetting = function (options) {
            if (app.theme.isEmpty || !app.theme.get().term.isValid) {
                return Blitz.ActionError.NotFoundRoute();
            }

            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.ThemeSettingView(app.theme.get()));
            });
        };

        ChatController.prototype.logOriginPage = function (options) {
            if (options['from_ggpsns_chat']) {
                this.clickChatMenuFrom(options['from_ggpsns_chat']);
            } else if (options['from_ggpmenulist']) {
                this.clickChatMenuFrom('gm');
            } else if (options['from_gamechat']) {
                this.clickChatMenuFrom('gc');
            } else if (options['from_ggpfooter']) {
                this.clickChatMenuFrom('gf');
            } else if (options['from_chat_link']) {
                SNS.Analytics.event('click_chat_link', options['from_chat_link']);
            } else if (options['from_universalmenu'] || options['from_um']) {
                this.clickChatMenuFrom('um');
            }
        };

        ChatController.prototype.setTabWithBadge = function (tabIndex) {
            this.layout = SNS.ChatSubNaviLayout.createWithDefaultTab(tabIndex);
            this.checkNewBadge();
        };

        ChatController.prototype.clickChatMenuFrom = function (from) {
            SNS.Analytics.event('click_chat_menu', from);
        };

        ChatController.prototype.resetOfflineListener = function (viewModel) {
            Cobit.StreamClient.removeAllListeners('offline');
            Cobit.StreamClient.addListener('offline', function () {
                return viewModel.emit('offline');
            });
        };
        return ChatController;
    })(fivefold.Controller);
    Blitz.ChatController = ChatController;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ErrorController = (function (_super) {
        __extends(ErrorController, _super);
        function ErrorController() {
            _super.apply(this, arguments);
        }
        ErrorController.prototype.notFoundRoute = function (error) {
            if (typeof error === "undefined") { error = null; }
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.NotFoundRouteView());
            });
        };

        ErrorController.prototype.notFound = function (error) {
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.NotFoundView());
            });
        };

        ErrorController.prototype.timeout = function (error) {
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.TimeoutView());
            });
        };

        ErrorController.prototype.internalError = function (error) {
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.InternalErrorView());
            });
        };

        ErrorController.prototype.invalidParameter = function (error) {
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.InvalidParameterView(error.message));
            });
        };

        ErrorController.prototype.disabledAgeUnder13 = function (error) {
            return fivefold.actionFuture(function (promise) {
                promise.success(new Blitz.DisabledAgeUnder13View());
            });
        };
        return ErrorController;
    })(Blitz.ChatController);
    Blitz.ErrorController = ErrorController;
})(Blitz || (Blitz = {}));
Handlebars.registerHelper('selected', function (left, right) {
    return left == right ? 'selected=selected' : '';
});

Handlebars.registerHelper('ifx', (function (left, op, right, options) {
    var context;
    if (arguments.length === 2) {
        context = left;
        options = op;
    } else if (arguments.length === 4) {
        context = false;
        if (op === "==") {
            if (left == right) {
                context = true;
            }
        } else if (op === "!=") {
            if (left != right) {
                context = true;
            }
        } else if (op === "<") {
            if (left < right) {
                context = true;
            }
        } else if (op === "<=") {
            if (left <= right) {
                context = true;
            }
        } else if (op === ">") {
            if (left > right) {
                context = true;
            }
        } else if (op === ">=") {
            if (left >= right) {
                context = true;
            }
        } else if (op === "&&") {
            if (left && right) {
                context = true;
            }
        } else if (op === "||") {
            if (left || right) {
                context = true;
            }
        } else {
            return "";
        }
    } else {
        return "";
    }
    return Handlebars.helpers['if'].call(this, context, options);
}));

Handlebars.registerHelper('arrow', function () {
    return new Handlebars.SafeString(createArrowHtml());
    function createArrowHtml(itemCaret) {
        if (typeof itemCaret === "undefined") { itemCaret = true; }
        var arrow = '<span class="spr ia18_arw_r"></span>';
        return itemCaret ? '<div class="itmCaret">' + arrow + '</div>' : arrow;
    }
});

Handlebars.registerHelper('t', function (context, options) {
    if (context == null || !context.length) {
        debug('context required');
        return '';
    }
    return Blitz.Language.getMessage(context, options);
});

Handlebars.registerHelper('conversationIcon', function (participants) {
    var userIconList = [];
    participants.forEach(function (userInfo) {
        var userId = userInfo.getIdentity().getValue();
        userIconList[userId] = IdentityService.Cache.getUserIconUrl(userId);
    });

    var $element = $('<div class="wrapIco48">');
    if (participants.length === 3) {
        $element.append(createComplexIcon(userIconList));
    } else {
        $element.append(createSimpleIcon(userIconList));
    }
    return toString($element);

    function createComplexIcon(userIconList) {
        var $element = $('<div class="ico48 tap friend icoGrp">');
        var $elem;
        for (var userId in userIconList) {
            $elem = $('<span class="icoItm">').data('type', 'user:iconUrl').data('identity', userId);

            if (_.isUndefined(userIconList[userId])) {
                $elem.data('identity-cache', 'NOTFOUND');
            } else if (_.isEmpty(userIconList[userId])) {
            } else {
                $elem.css('background-image', 'url(' + userIconList[userId] + ')');
            }
            $element.append($elem);
        }
        return $element;
    }

    function createSimpleIcon(userIconList) {
        var $element = $('<div class="ico48 tap friend">');
        for (var userId in userIconList) {
            $element.data('type', 'user:iconUrl').data('identity', userId);

            if (_.isUndefined(userIconList[userId])) {
                $element.data('identity-cache', 'NOTFOUND');
            } else if (_.isEmpty(userIconList[userId])) {
            } else {
                $element.css('background-image', 'url(' + userIconList[userId] + ')');
            }
            break;
        }
        return $element;
    }

    function toString($element) {
        return $('<span>').html($element).html();
    }
});

Handlebars.registerHelper('anchorize', function (block) {
    var text = block.fn(this).string || block.fn(this);
    return new Handlebars.SafeString(anchorizeHelper(text));
});

function anchorizeHelper(text) {
    return sns.anchorize(text);
}
var Blitz;
(function (Blitz) {
    var ChatSettingViewModel = (function (_super) {
        __extends(ChatSettingViewModel, _super);
        function ChatSettingViewModel() {
            _super.call(this);
        }
        return ChatSettingViewModel;
    })(Blitz.BlitzViewModel);
    Blitz.ChatSettingViewModel = ChatSettingViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryMessageCollection = (function (_super) {
        __extends(DeliveryMessageCollection, _super);
        function DeliveryMessageCollection(delivery) {
            _super.call(this);
            this.delivery = delivery;
            this.DISPLAY_LIMIT = 9;
            this.deliveryId = delivery.getIdentity();
            this.dateSeparatorList = [];
            this.readPastAllMessage = false;
            this.deliveryMessageRepository = Blitz.DeliveryMessageRepository.ofApi();
            this.clonedDelivery = _.clone(delivery);
        }
        DeliveryMessageCollection.prototype.loadNext = function () {
            var _this = this;
            var range = new SNS.Range(this.DISPLAY_LIMIT + 1, this.offsetMessageId);
            var future = this.deliveryMessageRepository.getHistory(this.deliveryId, range);
            future.onSuccess(function (messages) {
                if (!_.isEmpty(messages)) {
                    _this.offsetMessageId = _.last(messages).getIdentity().getValue();
                }

                if (_.isEmpty(_this.items) && !_.isEmpty(messages)) {
                    _this.loadSucceedAtFirst(_.head(messages));
                }

                var sortedMessages = _.sortBy(messages, function (message) {
                    var ctime = message.meta.getCTime();
                    return -ctime;
                });

                var items = [];
                if (messages.length < range.limit) {
                    items = _this.convertEventToItemView(_.clone(sortedMessages));
                    _this.addItems(items);
                    _this.loadCompleted();
                } else {
                    var sliced = sortedMessages.slice(0, _this.DISPLAY_LIMIT);
                    items = _this.convertEventToItemView(_.clone(sliced));
                    _this.addItems(items);
                }
            });
            future.onFailure(function (error) {
                return _this.loadFailed(error);
            });
        };

        DeliveryMessageCollection.prototype.deleteDateSeparator = function (dateId) {
            this.emit('deleteDateSeparator', dateId);
        };

        DeliveryMessageCollection.prototype.createDateSeparatorItemView = function (message, dateId) {
            return new Blitz.DeliveryDateSeparatorItemView(message, dateId);
        };

        DeliveryMessageCollection.prototype.getDateSeparatorId = function (message) {
            var formattedDate = message.meta.getFormattedCTime(2 /* META_FORMATTED_STYLE_ROUNDED */);
            return 'dateSeparator_' + formattedDate.replace(/\//g, '');
        };

        DeliveryMessageCollection.prototype.convertEventToItemView = function (messages) {
            var _this = this;
            this.deleteDateSeparator(this.dateSeparatorList.pop());
            var checkedEvents = [];
            var dateIds = [];
            messages.reverse().forEach(function (message) {
                var dateId = _this.getDateSeparatorId(message);
                if (!_.contains(dateIds, dateId)) {
                    dateIds.unshift(dateId);
                    checkedEvents.push(_this.createDateSeparatorItemView(message, dateId));
                }
                checkedEvents.push(new Blitz.DeliveryMessageItemView(_this.clonedDelivery, message));
            });
            this.dateSeparatorList = this.dateSeparatorList.concat(dateIds);
            return checkedEvents.reverse();
        };

        DeliveryMessageCollection.prototype.loadSucceedAtFirst = function (latestMessage) {
            this.emit('loadSucceedAtFirst', latestMessage);
        };
        return DeliveryMessageCollection;
    })(SNS.LoadMoreCollection);
    Blitz.DeliveryMessageCollection = DeliveryMessageCollection;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryMessagesViewModel = (function (_super) {
        __extends(DeliveryMessagesViewModel, _super);
        function DeliveryMessagesViewModel(messageCollection) {
            _super.call(this);
            this.messageCollection = messageCollection;
            this.delivery = messageCollection.delivery;
        }
        return DeliveryMessagesViewModel;
    })(Blitz.BlitzViewModel);
    Blitz.DeliveryMessagesViewModel = DeliveryMessagesViewModel;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ParticipantCollection = (function (_super) {
        __extends(ParticipantCollection, _super);
        function ParticipantCollection(conversation) {
            _super.call(this);
            this.conversation = conversation;
            this.displayLimit = 10;
            this.total = conversation.participants.length;
            this.currentIndex = 0;
            this.conversationRepo = Blitz.ConversationRepository.ofApi(app.cobit);
        }
        ParticipantCollection.prototype.loadNext = function () {
            var _this = this;
            var end = this.currentIndex + this.displayLimit;
            var sliced = this.conversation.participants.slice(this.currentIndex, end);
            var participantIds = this.getParticipantGreeIds(sliced);
            var userRepository = Blitz.UserRepository.ofApi();

            userRepository.getUsersInfo(participantIds).next(function (usersInfo) {
                _this.currentIndex += usersInfo.length;
                _this.addItems(usersInfo);
                if (_this.isLoadComplete()) {
                    _this.loadCompleted();
                }
            }).error(function (error) {
                return _this.loadFailed(error);
            });
        };

        ParticipantCollection.prototype.getParticipantGreeIds = function (participants) {
            return participants.map(function (participant) {
                return participant.getIdentity().getValue();
            });
        };

        ParticipantCollection.prototype.addUserByRefKey = function (conversationId, targetUserRefKeys) {
            var _this = this;
            var conversation = this.conversationRepo.addUserByRefKey(conversationId, targetUserRefKeys);
            conversation.next(function (event) {
                _this.addUserToCollection(event);
            });
            conversation.error(function (error) {
                _this.emit('addFailed', error);
            });
        };

        ParticipantCollection.prototype.addUserToCollection = function (event) {
            var _this = this;
            var addedUserIds = event.getEventContents().getAddUsers().map(function (user) {
                return user.getIdentity().getValue();
            });
            var userRepository = Blitz.UserRepository.ofApi();
            userRepository.getUsersInfo(addedUserIds).next(function (usersInfo) {
                _this.addItems(usersInfo);
                _this.total += usersInfo.length;
                _this.allLoaded = false;
                _this.emit('addSucceed', event);
            }).error(function (error) {
                return _this.loadFailed(error);
            });
        };
        return ParticipantCollection;
    })(SNS.LoadMoreCollection);
    Blitz.ParticipantCollection = ParticipantCollection;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ChatSettingView = (function (_super) {
        __extends(ChatSettingView, _super);
        function ChatSettingView(notificationSetting) {
            _super.call(this, {
                tagName: 'section',
                className: 'contWrap'
            });
            this.notificationSetting = notificationSetting;
            this.settingNotificationTemplate = new SNS.HBSTemplate('chat/setting/notification.hbs');
            this.downloadLinkTemplate = new SNS.HBSTemplate('chat/setting/download-link.hbs');
            this.backToTopLinkTemplate = new SNS.HBSTemplate('chat/setting/back-to-top-link.hbs');
            this.userRepository = Blitz.UserRepository.ofApi();
            this._events = {
                'click #saveNotificationSettingBtn': 'updateNotificationSetting',
                'click #appStoreLink': 'openAppStorePage',
                'click #googlePlayLink': 'openGooglePlayPage',
                'click #backToChatTop': 'jumpToChatTop',
                'click #notificationSettingMail': 'toggleNotificationSettingMail'
            };
            this.refreshEvents();
        }
        ChatSettingView.prototype.refreshEvents = function () {
            var _this = this;
            this.events = function () {
                return _this._events;
            };
            this.delegateEvents();
        };

        ChatSettingView.prototype.render = function () {
            this.$el.append(this.renderSettingNotification());

            if (SNS.Config.isApp()) {
                this.$el.find('.contr').last().append(this.renderBackToTopLink());
            } else {
                this.$el.find('.contr').last().append(this.renderDownloadLink(), this.renderBackToTopLink());
            }

            this.$mailIntervalMenu = $('#mailIntervals', this.$el);
            if (!this.notificationSetting.notifiesMail()) {
                this.toDisableMailIntervalMenu();
            }

            this.$updateNotificationBtn = $('#saveNotificationSettingBtn', this.$el);

            return this;
        };

        ChatSettingView.prototype.toggleNotificationSettingMail = function () {
            this.$mailIntervalMenu.prop('disabled', function (_, val) {
                return !val;
            });
        };

        ChatSettingView.prototype.toDisableMailIntervalMenu = function () {
            this.$mailIntervalMenu.prop("disabled", true);
        };

        ChatSettingView.prototype.openAppStorePage = function () {
            SNS.Analytics.event('ios_app_download');
            this.linkTo('https://itunes.apple.com/jp/app/gree/id403482780?mt=8');
        };

        ChatSettingView.prototype.openGooglePlayPage = function () {
            SNS.Analytics.event('android_app_download');
            this.linkTo('https://play.google.com/store/apps/details?id=jp.gree.android.app');
        };

        ChatSettingView.prototype.jumpToChatTop = function () {
            SNS.Analytics.event('back_to_chat_from_setting');
            Gryfon.back();
        };

        ChatSettingView.prototype.showIndicatorInBtn = function () {
            this.$updateNotificationBtn.html('<span class="spr throbWhite24"></span>');
        };

        ChatSettingView.prototype.hideIndicatorInBtn = function () {
            this.$updateNotificationBtn.html('<span class="vaM">' + Blitz.Language.getMessage('chat.save') + '</span>');
        };

        ChatSettingView.prototype.disableUpdateNotificationBtn = function () {
            delete this._events['click #saveNotificationSettingBtn'];
            this.refreshEvents();
        };

        ChatSettingView.prototype.enableUpdateNotificationBtn = function () {
            this._events['click #saveNotificationSettingBtn'] = 'updateNotificationSetting';
            this.refreshEvents();
        };

        ChatSettingView.prototype.updateNotificationSetting = function () {
            var _this = this;
            this.disableUpdateNotificationBtn();
            SNS.Analytics.event('save_notification_setting');
            var pushes = $('#notificationSettingPush').prop("checked");
            var mails = $('#notificationSettingMail').prop("checked");
            var mailInterval = parseInt($('#mailIntervals', this.$el).val());
            this.showIndicatorInBtn();
            this.userRepository.updateNotificationSetting(new Blitz.NotificationSetting(pushes, mails, mailInterval, [])).onComplete(function (result) {
                _this.hideIndicatorInBtn();
                _this.enableUpdateNotificationBtn();
                result.match({
                    Success: function () {
                        _this.showSavedNotificationDialog(Blitz.Language.getMessage('chat.save_succeed'));
                    },
                    Failure: function (error) {
                        debug(error);
                        _this.showSavedNotificationDialog(Blitz.Language.getMessage('chat.save_failed'));
                    }
                });
            });
        };

        ChatSettingView.prototype.showSavedNotificationDialog = function (message) {
            new Blitz.DialogView({
                message: message
            }).show();
        };

        ChatSettingView.prototype.renderSettingNotification = function () {
            return this.settingNotificationTemplate.render({
                'notificationSetting': this.notificationSetting,
                'mailIntervals': this.createMailIntervalsObj()
            });
        };

        ChatSettingView.prototype.createMailIntervalsObj = function () {
            return _.map(this.notificationSetting.mailIntervalMinutesAll, function (minutes) {
                return {
                    minutes: minutes,
                    message: Blitz.Language.getMessage('chat.notification_setting_mail_interval_' + minutes)
                };
            });
        };

        ChatSettingView.prototype.renderDownloadLink = function () {
            return this.downloadLinkTemplate.render({ isIOS: SNS.Config.isIOS(), isAndroid: SNS.Config.isAndroid() });
        };

        ChatSettingView.prototype.renderBackToTopLink = function () {
            return this.backToTopLinkTemplate.render();
        };
        return ChatSettingView;
    })(Blitz.BlitzView);
    Blitz.ChatSettingView = ChatSettingView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var OptoutSetting = (function () {
        function OptoutSetting(snsUserId, nickname, isOptout, enablesOptout) {
            this.snsUserId = snsUserId;
            this.nickname = nickname;
            this.isOptout = isOptout;
            this.enablesOptout = enablesOptout;
        }
        return OptoutSetting;
    })();
    Blitz.OptoutSetting = OptoutSetting;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryReceiveService = (function () {
        function DeliveryReceiveService(client) {
            this.client = client;
        }
        DeliveryReceiveService.ofApi = function () {
            return new DeliveryReceiveService(new SnsApi.FriendClient());
        };

        DeliveryReceiveService.prototype.optout = function (userId) {
            var promise = new monapt.Promise();
            this.client.block(userId.getValue()).next(function (response) {
                promise.success(response);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        DeliveryReceiveService.prototype.optin = function (userId) {
            var promise = new monapt.Promise();
            this.client.unblock(userId.getValue()).next(function (response) {
                promise.success(response);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };
        return DeliveryReceiveService;
    })();
    Blitz.DeliveryReceiveService = DeliveryReceiveService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryOptoutView = (function (_super) {
        __extends(DeliveryOptoutView, _super);
        function DeliveryOptoutView(optoutSetting) {
            _super.call(this, {
                tagName: 'section',
                className: 'contWrap'
            });
            this.optoutSetting = optoutSetting;
            this.mainTemplate = new SNS.HBSTemplate('delivery/optout/main.hbs');
            this.cautionTemplate = new SNS.HBSTemplate('note.hbs');
            this._events = {
                'click #saveOptoutSettingBtn': 'updateOptoutSetting'
            };
            this.refreshEvents();
            this.deliveryReceiveService = Blitz.DeliveryReceiveService.ofApi();
            this.deliveryRepository = Blitz.DeliveryRepository.ofApi();
        }
        DeliveryOptoutView.prototype.refreshEvents = function () {
            var _this = this;
            this.events = function () {
                return _this._events;
            };
            this.delegateEvents();
        };

        DeliveryOptoutView.prototype.render = function () {
            this.$el.append(this.renderMainContents(), this.renderNote(), this.renderBlockingList(), this.renderBlockingHelp(), this.renderChatTopLink());

            this.$updateBtn = $('#saveOptoutSettingBtn', this.$el);

            return this;
        };

        DeliveryOptoutView.prototype.showIndicatorInBtn = function () {
            this.$updateBtn.html('<span class="spr throbWhite24"></span>');
        };

        DeliveryOptoutView.prototype.hideIndicatorInBtn = function () {
            this.$updateBtn.html('<span class="vaM">' + Blitz.Language.getMessage('chat.save') + '</span>');
        };

        DeliveryOptoutView.prototype.disableUpdateNotificationBtn = function () {
            delete this._events['click #saveOptoutSettingBtn'];
            this.refreshEvents();
        };

        DeliveryOptoutView.prototype.enableUpdateReceiveBtn = function () {
            this._events['click #saveOptoutSettingBtn'] = 'updateOptoutSetting';
            this.refreshEvents();
        };

        DeliveryOptoutView.prototype.toggleReceiveSetting = function (receivesDelivery) {
            return receivesDelivery ? this.deliveryReceiveService.optin(this.optoutSetting.snsUserId) : this.deliveryReceiveService.optout(this.optoutSetting.snsUserId);
        };

        DeliveryOptoutView.prototype.updateOptoutSetting = function () {
            var _this = this;
            this.disableUpdateNotificationBtn();
            SNS.Analytics.event('save_optout_setting');
            var receivesDelivery = $('#receiveDelivery').prop("checked");
            this.showIndicatorInBtn();
            this.toggleReceiveSetting(receivesDelivery).onComplete(function (result) {
                _this.hideIndicatorInBtn();
                _this.enableUpdateReceiveBtn();
                result.match({
                    Success: function () {
                        _this.deliveryRepository.clearIdsCache();

                        var actionName = receivesDelivery ? 'unblock' : 'block';
                        SNS.Analytics.event(actionName, '', { target_id: _this.optoutSetting.snsUserId.getValue(), is_official: 1 });
                        _this.showUpdatedReceiveSettingDialog(Blitz.Language.getMessage('chat.optout_setting_save_succeed'));
                    },
                    Failure: function (error) {
                        debug(error);
                        _this.showUpdatedReceiveSettingDialog(Blitz.Language.getMessage('chat.save_failed'));
                    }
                });
            });
        };

        DeliveryOptoutView.prototype.showUpdatedReceiveSettingDialog = function (message) {
            new Blitz.DialogView({ message: message }).show();
        };

        DeliveryOptoutView.prototype.renderMainContents = function () {
            return this.mainTemplate.render({
                'isOptout': this.optoutSetting.isOptout,
                'receiveMessage': Blitz.Language.getMessage('chat.optout_message', {
                    official_user_name: this.optoutSetting.nickname
                })
            });
        };

        DeliveryOptoutView.prototype.renderNote = function () {
            return $(this.cautionTemplate.render({
                message: Blitz.Language.getMessage('chat.optout_caution')
            }));
        };

        DeliveryOptoutView.prototype.renderBlockingList = function () {
            return new Blitz.ListItemLinkView([
                {
                    title: Blitz.Language.getMessage('chat.link_blocking_list'),
                    url: SNS.Config.getSnsBlockingListUrl()
                }
            ]).render().$el;
        };

        DeliveryOptoutView.prototype.renderBlockingHelp = function () {
            return new Blitz.ListItemLinkView([
                {
                    title: Blitz.Language.getMessage('chat.link_blocking_help'),
                    url: SNS.Config.getJaHelpBlocking()
                }
            ]).render().$el;
        };

        DeliveryOptoutView.prototype.renderChatTopLink = function () {
            return new Blitz.ListItemLinkView([
                {
                    title: Blitz.Language.getMessage('chat.back_to_top'),
                    url: SNS.Config.getTopPageHash()
                }
            ]).render().$el;
        };
        return DeliveryOptoutView;
    })(Blitz.BlitzView);
    Blitz.DeliveryOptoutView = DeliveryOptoutView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryHeaderView = (function (_super) {
        __extends(DeliveryHeaderView, _super);
        function DeliveryHeaderView(viewModel, delivery, backBtnUid) {
            _super.call(this);
            this.viewModel = viewModel;
            this.delivery = delivery;
            this.backBtnUid = backBtnUid;
            this.$commonHeader = $('#greeCommonHeader');
            this.$subHeader = $('#subHeader');
            this.template = new SNS.HBSTemplate('modal-header.hbs');
            var modalItems = [
                SNS.ModalItem.button2(Blitz.Language.getMessage('chat.back'), { cssClass: 'back-' + backBtnUid }),
                SNS.ModalItem.title(delivery.publisher.name)
            ];
            modalItems.push(SNS.ModalItem.buttonOption({ cssClass: 'option' }));
            this.items = modalItems;

            if (delivery.isCommunity()) {
                this.listenPulledNotificationEvent();
                this.listenToggleNotificationEvent();
            }
        }
        DeliveryHeaderView.prototype.show = function () {
            this.$el = this.$subHeader.show();
            this.$commonHeader.hide();
            this.render();
        };

        DeliveryHeaderView.prototype.hide = function () {
            this.undelegateAll();
            this.$subHeader.hide();
            this.$commonHeader.show();
        };

        DeliveryHeaderView.prototype.render = function () {
            this.$el.html(this.template.render({}));
            for (var i = 0, l = this.items.length; i < l; i++) {
                $('.mdl', this.$el).append(Blitz.$item(this.items[i]));
            }
            this.delegateEvents();
            return this;
        };

        DeliveryHeaderView.prototype.listenPulledNotificationEvent = function () {
            var _this = this;
            this.viewModel.on('pulledNotification', function (notifies) {
                var optionView = _this.$el.find('.option').parent();
                Blitz.$item(SNS.ModalItem.notificationIcon('ia18_minor_bell_off')).insertBefore(optionView);
                _this.toggleNotificationIcon(notifies);
            });
        };

        DeliveryHeaderView.prototype.listenToggleNotificationEvent = function () {
            var _this = this;
            this.viewModel.on('toggleNotification', function (notifies) {
                return _this.toggleNotificationIcon(notifies);
            });
        };

        DeliveryHeaderView.prototype.toggleNotificationIcon = function (notifies) {
            var $notificationIcon = $('#notificationIcon');
            if (notifies) {
                $notificationIcon.hide();
            } else {
                $notificationIcon.show();
            }
        };
        return DeliveryHeaderView;
    })(Blitz.BlitzView);
    Blitz.DeliveryHeaderView = DeliveryHeaderView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryMessageCollectionView = (function (_super) {
        __extends(DeliveryMessageCollectionView, _super);
        function DeliveryMessageCollectionView(collection, options) {
            if (typeof options === "undefined") { options = {}; }
            _super.call(this, collection, options);
            this.collection = collection;
            this.autoPagerize = true;
            this.sortType = 0 /* AscendingOrder */;
            this.template = new SNS.HBSTemplate('loadmore-history-collection.hbs');
        }
        DeliveryMessageCollectionView.prototype.events = function () {
            return {};
        };

        DeliveryMessageCollectionView.prototype.render = function () {
            _super.prototype.render.call(this);
            this.loadMoreView.loadMore();
            return this;
        };

        DeliveryMessageCollectionView.prototype.renderItem = function (messageItemView) {
            this.sendDeliveryMessageEventBeacon(messageItemView.message);
            return messageItemView.render().$el;
        };

        DeliveryMessageCollectionView.prototype.sendDeliveryMessageEventBeacon = function (message) {
            if (message.entryTextId <= 0) {
                return;
            }

            var params = {
                'room_id': message.roomId,
                'sender_id': message.sender.get().getDelightUserIdValue(),
                'entry_text_id': message.entryTextId
            };

            SNS.Analytics.event('delight_message', '', params);
        };
        return DeliveryMessageCollectionView;
    })(SNS.LoadMoreCollectionView);
    Blitz.DeliveryMessageCollectionView = DeliveryMessageCollectionView;

    var DeliveryMessageBaseItemView = (function (_super) {
        __extends(DeliveryMessageBaseItemView, _super);
        function DeliveryMessageBaseItemView(message, options) {
            _super.call(this, options);
            this.message = message;
        }
        return DeliveryMessageBaseItemView;
    })(Blitz.BlitzView);
    Blitz.DeliveryMessageBaseItemView = DeliveryMessageBaseItemView;

    var DeliveryMessageItemView = (function (_super) {
        __extends(DeliveryMessageItemView, _super);
        function DeliveryMessageItemView(delivery, message) {
            _super.call(this, message, {
                tagName: 'article',
                className: 'unit',
                id: 'item-' + message.getIdentity().getValue(),
                attributes: {
                    'data-event-identity': message.getIdentity().getValue()
                }
            });
            this.delivery = delivery;
            this.messageTemplate = new SNS.HBSTemplate('delivery/view/message.hbs');
            this.reportService = new Blitz.ReportService();
        }
        DeliveryMessageItemView.prototype.events = function () {
            var events = {
                'click .ico48.tap.friend': 'showOfficialUserProfileDialog'
            };
            if (Util.UA.isTouch()) {
                events['touchstart .wrapBllnL'] = 'report';
            } else {
                events['mousedown .wrapBllnL'] = 'report';
            }
            return events;
        };

        DeliveryMessageItemView.prototype.render = function () {
            this.$el.html(this.renderMessage(this.message));
            return this;
        };

        DeliveryMessageItemView.prototype.renderMessage = function (deliveryMessage) {
            var publisher = this.delivery.publisher;
            var publisherId = publisher.getDelightUserIdValue();
            var senderName = deliveryMessage.sender.map(function (e) {
                return e.name;
            }).getOrElse(function () {
                return '';
            });
            var senderId = deliveryMessage.sender.map(function (e) {
                return e.getUserId();
            }).getOrElse(function () {
                return 0;
            });
            var senderProfileUrl = deliveryMessage.sender.map(function (e) {
                return e.getProfileUrl();
            }).getOrElse(function () {
                return '';
            });

            return this.messageTemplate.render({
                'userIcon': this._getFormattedIconUrlElement(publisherId, publisher.profileImageUrl),
                'mark': new Blitz.DeliveryTypeMark(this.delivery).getElement(),
                'name': this._getFormattedNameElement(publisherId.toString(), publisher.name),
                'publisherId': publisherId,
                'body': deliveryMessage.isModerationNg ? Blitz.Language.getMessage('chat.message_censored') : this.convertToDisplayable(deliveryMessage),
                'createTime': deliveryMessage.meta.getFormattedCTime(3 /* META_FORMATTED_STYLE_TIMEAT */),
                'isCommunity': this.delivery.isCommunity(),
                'isModerationNg': deliveryMessage.isModerationNg,
                'senderName': senderName,
                'senderProfileUrl': senderProfileUrl,
                'senderId': senderId,
                'urn': deliveryMessage.urn
            });
        };

        DeliveryMessageItemView.prototype.convertToDisplayable = function (deliveryMessage) {
            if (this.delivery.isCommunity()) {
                return new Util.Text(deliveryMessage.body).escape().convertEmoji().text;
            } else {
                return new Util.Text(deliveryMessage.body).convertEmoji().text;
            }
        };

        DeliveryMessageItemView.prototype.showOfficialUserProfileDialog = function () {
            new Blitz.OfficialUserProfileDialogView(this.delivery).show();
        };

        DeliveryMessageItemView.prototype.report = function (event) {
            if (this.delivery.isCommunity()) {
                this.reportService.report(event);
            }
        };

        DeliveryMessageItemView.prototype.delegateEvents = function (events) {
            var _this = this;
            if (!this.exceedsReleaseDate()) {
                return this.delegateEventsStillReleaseDate(events);
            }

            _super.prototype.delegateEvents.call(this, events);
            this.$el.off('click.aTag');
            this.$el.on('click.aTag', 'a', function (event) {
                var url = $(event.currentTarget).attr('href');
                if (url) {
                    event.stopPropagation();
                    event.preventDefault();

                    if (_this.delivery.isCommunity()) {
                        new Blitz.JumpPageConfirmDialogView(url).show();
                    } else {
                        var beaconOptions = { publisher_id: _this.delivery.publisher.getUserId() };
                        _this.linkTo(url, beaconOptions);
                    }
                }
            });
            return this;
        };

        DeliveryMessageItemView.prototype.exceedsReleaseDate = function () {
            var releaseDate = new Date('2015/11/4 11:00:00');
            var now = new Date();

            return now > releaseDate;
        };

        DeliveryMessageItemView.prototype.delegateEventsStillReleaseDate = function (events) {
            var _this = this;
            _super.prototype.delegateEvents.call(this, events);
            this.$el.off('click.aTag');
            this.$el.on('click.aTag', 'a', function (event) {
                var url = $(event.currentTarget).attr('href');
                if (url) {
                    event.stopPropagation();
                    event.preventDefault();
                    var beaconOptions = _this.delivery.isCommunity() ? {} : { publisher_id: _this.delivery.publisher.getUserId() };
                    new Blitz.JumpPageConfirmDialogView(url, beaconOptions).show();
                }
            });
            return this;
        };
        return DeliveryMessageItemView;
    })(DeliveryMessageBaseItemView);
    Blitz.DeliveryMessageItemView = DeliveryMessageItemView;

    var DeliveryDateSeparatorItemView = (function (_super) {
        __extends(DeliveryDateSeparatorItemView, _super);
        function DeliveryDateSeparatorItemView(message, dateId) {
            _super.call(this, message, {
                tagName: 'div',
                id: dateId
            });
            this.eventTemplate = new SNS.HBSTemplate('chat/view/message-separator.hbs');
        }
        DeliveryDateSeparatorItemView.prototype.render = function () {
            this.$el.html(this.eventTemplate.render({
                'dateSeparator': this.message.meta.getFormattedCTime(1 /* META_FORMATTED_STYLE_LITERAL */)
            }));
            return this;
        };
        return DeliveryDateSeparatorItemView;
    })(DeliveryMessageBaseItemView);
    Blitz.DeliveryDateSeparatorItemView = DeliveryDateSeparatorItemView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryOptionView = (function (_super) {
        __extends(DeliveryOptionView, _super);
        function DeliveryOptionView(viewModel) {
            var _this = this;
            _super.call(this, {
                tagName: 'section',
                className: 'optionArea'
            });
            this.viewModel = viewModel;
            this.methodOnClickNotification = 'toggleNotification';
            this.receiveEvents = {
                'click #suspendReception': 'suspend',
                'click #notification': this.methodOnClickNotification
            };

            this.delivery = _.clone(this.viewModel.messageCollection.delivery);
            var optionTemplateName = this.delivery.isCommunity() ? 'delivery/view/option-community.hbs' : 'delivery/view/option.hbs';
            this.optionTemplate = new SNS.HBSTemplate(optionTemplateName);

            if (this.delivery.isCommunity()) {
                this.notificationRepository = Blitz.DeliveryNotificationRepository.ofApi();
                var future = this.notificationRepository.get(this.delivery.getIdentity());
                future.onSuccess(function (notifies) {
                    _this.notifies = notifies;
                    _this.removeIndicatorInNotificationBtn();
                    _this.toggleNotificationElement(notifies);
                    _this.viewModel.emit('pulledNotification', notifies);
                });
                future.onFailure(function (error) {
                    debug(error);
                    _this.removeIndicatorInNotificationBtn();
                });
            }

            this.$el.click(function (event) {
                if (!$(event.target).is('.notificationElement')) {
                    _this.hide();
                }
            });
        }
        DeliveryOptionView.prototype.render = function () {
            this.$el.append(this.optionTemplate.render());
            this.delegateEvents(this.receiveEvents);
            this.$notificationBtn = $('#notificationBtn', this.$el);
            return this;
        };

        DeliveryOptionView.prototype.refreshEvents = function () {
            var _this = this;
            this.events = function () {
                return _this.receiveEvents;
            };
            this.delegateEvents();
        };

        DeliveryOptionView.prototype.currentNotificationBtnClassName = function () {
            return this.notifies ? 'ia24_option_bell_off' : 'ia24_option_bell_on';
        };

        DeliveryOptionView.prototype.suspendNotificationBtn = function () {
            delete this.receiveEvents['click #notification'];
            this.refreshEvents();
        };

        DeliveryOptionView.prototype.resumeNotificationBtn = function () {
            this.receiveEvents['click #notification'] = this.methodOnClickNotification;
            this.refreshEvents();
        };

        DeliveryOptionView.prototype.toggleNotification = function () {
            var _this = this;
            SNS.Analytics.event('toggle_notification');
            this.suspendNotificationBtn();
            this.showIndicatorInNotificationBtn();
            var nextNotifies = !this.notifies;
            var future = this.notificationRepository.update(this.delivery.getIdentity(), nextNotifies);
            future.onComplete(function (result) {
                _this.resumeNotificationBtn();
                _this.removeIndicatorInNotificationBtn();
                result.match({
                    Success: function () {
                        _this.notifies = nextNotifies;
                        _this.toggleNotificationElement(nextNotifies);
                    },
                    Failure: function (error) {
                        debug(error);
                        _this.toggleNotificationElement(_this.notifies);
                    }
                });

                _this.viewModel.emit('toggleNotification', _this.notifies);
            });
        };

        DeliveryOptionView.prototype.removeIndicatorInNotificationBtn = function () {
            this.$notificationBtn.removeClass('throb24');
        };

        DeliveryOptionView.prototype.showIndicatorInNotificationBtn = function () {
            this.$notificationBtn.removeClass(this.currentNotificationBtnClassName());
            this.$notificationBtn.addClass('throb24');
        };

        DeliveryOptionView.prototype.toggleNotificationElement = function (nextNotifies) {
            if (nextNotifies) {
                var addClass = 'ia24_option_bell_off';
                var text = Blitz.Language.getMessage('chat.header_option_notify_to_off');
            } else {
                var addClass = 'ia24_option_bell_on';
                var text = Blitz.Language.getMessage('chat.header_option_notify_to_on');
            }

            var removeClass = this.currentNotificationBtnClassName();
            this.$notificationBtn.removeClass(removeClass);
            this.$notificationBtn.addClass(addClass);
            this.$notificationBtn.next('.txt').html(text);
        };

        DeliveryOptionView.prototype.suspend = function () {
            if (this.delivery.isCommunity()) {
                new Blitz.SuspendReceptionDialogView(this.delivery).show();
            } else if (this.delivery.mustRead) {
                new Blitz.NotAllowSuspendReceptionDialogView().show();
            } else {
                this.linkTo('chat#view=delivery_optout&official_user_id=' + this.delivery.publisher.getUserId());
            }
        };

        DeliveryOptionView.prototype.hide = function () {
            this.$el.hide();
        };
        return DeliveryOptionView;
    })(Blitz.BlitzView);
    Blitz.DeliveryOptionView = DeliveryOptionView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryView = (function (_super) {
        __extends(DeliveryView, _super);
        function DeliveryView(viewModel) {
            var _this = this;
            _super.call(this, viewModel, {
                className: 'contr'
            });
            this.viewModel = viewModel;
            this.footerAlertTemplate = new SNS.HBSTemplate('delivery/view/alert-message.hbs');
            this.headerEvents = {
                'click .option': 'toggleOption',
                'click .ntfBrd.brdT.tap': 'jumpToOtherChatViaNotification'
            };
            this.delivery = viewModel.messageCollection.delivery;
            this.messageCollection = viewModel.messageCollection;

            this.messageCollection.on('deleteDateSeparator', function (dateId) {
                return _this.deleteDateSeparator(dateId);
            });
            this.messageCollection.on('loadSucceedAtFirst', function (latestMessage) {
                return _this.loadSucceedAtFirst(latestMessage);
            });
            this.messageCollection.on('loadFailed', function (error) {
                return _this.loadFailed(error);
            });
            this.messageCollection.on('collectionRendered', function (items) {
                return _this.collectionRendered(items);
            });

            this.updateBadgeOnlyOnce = _.once(this.updateBadge);

            this.backBtnUid = Util.uid();
            this.headerView = new Blitz.DeliveryHeaderView(viewModel, this.delivery, this.backBtnUid);
            this.headerView.events = function () {
                _this.headerEvents['click .back-' + _this.backBtnUid] = 'back';
                return Blitz.mapHeaderEvents(_this.headerEvents, _this);
            };

            this.deliveryMessageService = Blitz.DeliveryMessageService.ofApi();
            this.deliveryMessageCollectionView = new Blitz.DeliveryMessageCollectionView(this.messageCollection);
        }
        DeliveryView.prototype.events = function () {
            return {
                'click #load-more-view': 'onClickLoadMore'
            };
        };

        DeliveryView.prototype.render = function () {
            this.headerView.show();
            this.renderChatOption();
            this.delegateEvents();
            this.$el.append(this.renderDeliveryMessageCollection(), this.renderFooterAlert());
            return this;
        };

        DeliveryView.prototype.onClickLoadMore = function () {
            if (SNS.Config.isIEUnder11()) {
                this.deliveryMessageCollectionView.loadMoreView.onClickLoadMore();
            }
            SNS.Analytics.event('load_history_delivery');
        };

        DeliveryView.prototype.renderDeliveryMessageCollection = function () {
            return this.deliveryMessageCollectionView.render().$el.children();
        };

        DeliveryView.prototype.renderFooterAlert = function () {
            return this.footerAlertTemplate.render({
                message: this.delivery.isCommunity() ? Blitz.Language.getMessage('chat.alert_send_delivery_community') : Blitz.Language.getMessage('chat.alert_send_delivery_user')
            });
        };

        DeliveryView.prototype.renderChatOption = function () {
            this.$option = new Blitz.DeliveryOptionView(this.viewModel).render();
            this.headerView.$el.after(this.$option.$el.hide());
        };

        DeliveryView.prototype.messageReceivedEvent = function (event) {
            this.notifyNewEventOfOtherConversation(event);
        };

        DeliveryView.prototype.notifyNewEventOfOtherConversation = function (event) {
            var _this = this;
            if (this.$notificationHeader && this.$notificationHeader.$el) {
                this.$notificationHeader.$el.remove();
                clearTimeout(this.notificationHeaderTimerId);
            }
            this.$notificationHeader = new Blitz.NotificationHeaderView(event);
            this.headerView.$el.append(this.$notificationHeader.render().$el);
            this.notificationHeaderTimerId = setTimeout(function () {
                _this.$notificationHeader.$el.remove();
            }, 5 * 1000);
        };

        DeliveryView.prototype.back = function () {
            this.headerView.hide();
            this.$option.$el.remove();
            Gryfon.back();
        };

        DeliveryView.prototype.toggleOption = function () {
            this.$option.$el.toggle();
        };

        DeliveryView.prototype.jumpToOtherChatViaNotification = function (event) {
            SNS.Analytics.event('notify_other');
            event.stopPropagation();
            this.$notificationHeader.$el.remove();
            this.linkTo('chat#view=chat_view&id=' + this.$notificationHeader.conversationId);
        };

        DeliveryView.prototype.collectionRendered = function (items) {
            var _this = this;
            var loaded = [];
            _.each(items, function (item) {
                var messageId = item.message.getIdentity().getValue();
                var element = $("#item-" + messageId);
                imagesLoaded(element, function () {
                    loaded.push(messageId);
                    if (loaded.length === items.length) {
                        _this.scrollToBottomOf(items);
                    }
                });
            });
        };

        DeliveryView.prototype.scrollToBottomOf = function (items) {
            var $firstItem = $('article').first();
            var latestEventId = items.length ? items[0].message.getIdentity().getValue() : '';
            var $lastItem = $('.collection .unit').filter('[data-event-identity="' + latestEventId + '"]');
            if ($firstItem.length && $lastItem.length) {
                window.scrollBy(0, $lastItem.offset().top - $firstItem.offset().top);
            }
        };

        DeliveryView.prototype.deleteDateSeparator = function (dateId) {
            var $dateSeparator = $('#' + dateId);
            if ($dateSeparator.length)
                $dateSeparator.remove();
        };

        DeliveryView.prototype.loadSucceedAtFirst = function (latestMessage) {
            var offsetMessageId = latestMessage.getIdentity();
            this.deliveryMessageService.readPast(this.delivery.getIdentity(), offsetMessageId);
            Gryfon.notify('read-past-message');
            this.updateBadgeOnlyOnce();
        };

        DeliveryView.prototype.loadFailed = function (error) {
            this.showError(error);
        };

        DeliveryView.prototype.updateBadge = function () {
            Gryfon.updateBadge('chat', true);
        };
        return DeliveryView;
    })(Blitz.SSEBaseView);
    Blitz.DeliveryView = DeliveryView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DisabledAgeUnder13View = (function (_super) {
        __extends(DisabledAgeUnder13View, _super);
        function DisabledAgeUnder13View() {
            _super.apply(this, arguments);
            this.template = new SNS.HBSTemplate('chat/disabled-cobit.hbs');
        }
        DisabledAgeUnder13View.prototype.render = function () {
            this.$el.append(this.template.render({
                disabled_message: Blitz.Language.getMessage('chat.sorry_age_under_13'),
                btnLabel: Blitz.Language.getMessage('chat.go_to_top')
            }));
            return this;
        };

        DisabledAgeUnder13View.prototype.events = function () {
            var _this = this;
            return {
                'click .btn.lrg.prim': function () {
                    return _this.linkTo('chat#view=chat_list');
                }
            };
        };
        return DisabledAgeUnder13View;
    })(Blitz.BlitzView);
    Blitz.DisabledAgeUnder13View = DisabledAgeUnder13View;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DisabledViewOfficial = (function (_super) {
        __extends(DisabledViewOfficial, _super);
        function DisabledViewOfficial() {
            _super.apply(this, arguments);
            this.template = new SNS.HBSTemplate('chat/disabled_official.hbs');
        }
        DisabledViewOfficial.prototype.render = function () {
            this.$el.append(this.template.render());
            return this;
        };
        return DisabledViewOfficial;
    })(Blitz.BlitzView);
    Blitz.DisabledViewOfficial = DisabledViewOfficial;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DisabledView = (function (_super) {
        __extends(DisabledView, _super);
        function DisabledView() {
            _super.apply(this, arguments);
            this.template = new SNS.HBSTemplate('chat/disabled.hbs');
        }
        DisabledView.prototype.render = function () {
            this.$el.append(this.template.render({
                disabled_message: SNS.Config.getChatDisabledMsg() || Blitz.Language.getMessage("chat.sorry_disabled_gree_chat")
            }));
            return this;
        };
        return DisabledView;
    })(Blitz.BlitzView);
    Blitz.DisabledView = DisabledView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EditGroupNameModalHeaderView = (function (_super) {
        __extends(EditGroupNameModalHeaderView, _super);
        function EditGroupNameModalHeaderView() {
            _super.call(this);
            this.$commonHeader = $('#greeCommonHeader');
            this.$subHeader = $('#subHeader');
            this.template = new SNS.HBSTemplate('modal-header.hbs');
            this.items = [
                SNS.ModalItem.button5(Blitz.Language.getMessage('chat.cancel'), { cssClass: 'cancel' }),
                SNS.ModalItem.title(Blitz.Language.getMessage('chat.group_settings_conversation_change_title')),
                SNS.ModalItem.button5(Blitz.Language.getMessage('chat.group_settings_save'), { cssClass: 'save disabled', primary: true })
            ];
        }
        EditGroupNameModalHeaderView.prototype.enableSendButton = function () {
            this.$el.find('.save').toggleClass('disabled', false);
        };

        EditGroupNameModalHeaderView.prototype.disableSendButton = function () {
            this.$el.find('.save').toggleClass('disabled', true);
        };

        EditGroupNameModalHeaderView.prototype.events = function () {
            return {
                'click .cancel': 'cancel',
                'click .save': 'save'
            };
        };

        EditGroupNameModalHeaderView.prototype.save = function () {
            this.$el.triggerHandler('saveGroupName');
        };

        EditGroupNameModalHeaderView.prototype.show = function () {
            this.$el = this.$subHeader.show();
            this.$commonHeader.hide();
            this.$subHeader.show();
            this.render();
        };

        EditGroupNameModalHeaderView.prototype.hide = function () {
            this.undelegateAll();
            this.$subHeader.hide();
            this.$commonHeader.show();
        };

        EditGroupNameModalHeaderView.prototype.render = function () {
            this.$el.html(this.template.render({}));
            for (var i = 0, l = this.items.length; i < l; i++) {
                $('.mdl', this.$el).append(Blitz.$item(this.items[i]));
            }
            this.delegateEvents();
            return this;
        };

        EditGroupNameModalHeaderView.prototype.cancel = function () {
            this.hide();
            this.$el.triggerHandler('hideEditGroupNameModalHeaderView');
        };
        return EditGroupNameModalHeaderView;
    })(Blitz.BlitzView);
    Blitz.EditGroupNameModalHeaderView = EditGroupNameModalHeaderView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var EditGroupNameModalView = (function (_super) {
        __extends(EditGroupNameModalView, _super);
        function EditGroupNameModalView(viewModel, conversationRepository) {
            _super.call(this, {
                tagName: 'section'
            });
            this.viewModel = viewModel;
            this.conversationRepository = conversationRepository;
            this.agreementMessageTemplate = new SNS.HBSTemplate('chat/view/agreement-message.hbs');
            this.errorMessageTemplate = new SNS.HBSTemplate('chat/view/error-message.hbs');
            this.template = new SNS.HBSTemplate('chat/group-settings/edit-name-modal.hbs');
            this.maxGroupNameLength = 80;
            this.isSendEnable = false;
            this.headerView = new Blitz.EditGroupNameModalHeaderView();

            var emojiPaletteViewModel = new Blitz.EmojiPaletteViewModel(SNS.Config.isEnabledEmojiPalette());
            emojiPaletteViewModel.onInputEmoji($.proxy(this.onClickedEmoji, this));
            emojiPaletteViewModel.onDeleteEmoji($.proxy(this.onDeletedEmoji, this));

            var paletteOption = new Blitz.PaletteOption(new monapt.Some(emojiPaletteViewModel), new monapt.None());
            this.emojiComponents = Blitz.PaletteComponentsFactory.create(this.$el, paletteOption);
            this.DRAFT_KEY = 'group-name-draft-' + this.viewModel.conversation.getConversationId();
        }
        EditGroupNameModalView.prototype.events = function () {
            var eventObject = {
                'keyup #modal-textarea': 'onInput',
                'propertychange #modal-textarea': 'onInput',
                'paste #modal-textarea': 'onInput',
                'input #modal-textarea': 'onInput',
                'click #modal-textarea': 'hideEmojiPalette',
                'click #emojiPaletteToggleButton': 'toggleEmojiPalette'
            };

            if (Util.UA.isAndroid('2.2')) {
                for (var key in eventObject) {
                    if (key.match(/^click/) || key.match(/^keyup/)) {
                        delete eventObject[key];
                    }
                }
            }

            return eventObject;
        };

        EditGroupNameModalView.prototype.render = function () {
            this.$el.html(this.template.render({}));
            this.$el.find('.contr').prepend(this.renderAgreementMessage(), this.renderErrorMessage());

            this.$textArea = this.$el.find('#modal-textarea');
            this.emojiPaletteDelegate = new Blitz.EmojiPaletteDelegate(this.$textArea);
            this.$counter = this.$el.find('#modal-textarea-count');
            this.$limit = this.$el.find('#modal-textarea-limit');
            this.$sendBtn = this.$el.find('.agreeSendBtn');

            this.$errorMessage = this.$el.find('#error-message').hide();

            this.$limit.text(this.maxGroupNameLength);
            this.$el.hide();
            this.setText(this.viewModel.conversation.name);
            this.restoreDraft();
            this.$el.find('.modalControl').after(this.emojiComponents.render());

            this.emojiComponents.show({
                modalControlEmojiTab: true
            });
            this.onInput();

            this.$el.find('#agreement-message a').on('click', function (event) {
                event.preventDefault();
                event.stopPropagation();
                var url = $(event.currentTarget).attr('href');
                new Blitz.JumpPageConfirmDialogView(url).show();
            });

            return this;
        };

        EditGroupNameModalView.prototype.show = function () {
            var _this = this;
            this.$el.show();
            this.headerView.show();
            this.headerView.$el.off('hideEditGroupNameModalHeaderView');
            this.headerView.$el.on('hideEditGroupNameModalHeaderView', function () {
                _this.$el.triggerHandler('hideEditGroupNameModalView');
            });
            this.headerView.$el.off('saveGroupName');
            this.headerView.$el.on('saveGroupName', function () {
                _this.save();
            });

            var textarea = this.$el.find('textarea');
            var val = textarea.val();
            textarea.val('');
            textarea.focus().val(val);

            $('.modalControlEmojiPalette').hide();
        };

        EditGroupNameModalView.prototype.toggleEmojiPalette = function () {
            $('.modalControlEmojiPalette').show();
            if (!this.emojiComponents.isPanelOpened()) {
                this.onInput();
            }
        };

        EditGroupNameModalView.prototype.onInput = function () {
            var inputText = this.$textArea.val();
            this.storeDraft(inputText);
            var inputCount = inputText.length;
            if (this.isValidInputLength(inputCount)) {
                this.enableSend();
                this.$counter.toggleClass('att', false);
            } else {
                this.disableSend();
                this.$counter.toggleClass('att', true);
            }
            this.$counter.text(inputCount);
        };

        EditGroupNameModalView.prototype.isValidInputLength = function (inputCount) {
            if (inputCount == 0) {
                return false;
            }
            return this.maxGroupNameLength >= inputCount;
        };

        EditGroupNameModalView.prototype.save = function () {
            var _this = this;
            if (!this.isSendEnable) {
                return;
            }
            if (!navigator.onLine) {
                this.offLine();
                return;
            }
            this.disableSend();
            this.emojiComponents.hidePalette();
            this.disableTextArea();
            this.showIndicator();

            $('<input type="checkbox">').appendTo(this.$textArea.parent()).focus().remove();
            this.conversationRepository.removeCache(this.viewModel.conversation.getIdentity());
            this.conversationRepository.updateName(this.viewModel.conversation, this.$textArea.val()).next(function (conversation) {
                _this.viewModel.conversation.name = conversation.name;
                _this.hide();
                _this.headerView.hide();
                _this.enableTextArea();
                _this.enableSend();
                _this.deleteDraft();
                _this.$el.triggerHandler('saveConversationName');
                SNS.Analytics.event('update_chat_name');
            });
        };

        EditGroupNameModalView.prototype.renderAgreementMessage = function () {
            return $(this.agreementMessageTemplate.render({
                message: Blitz.Language.getMessage('chat.send_moderation_consent', {
                    url: SNS.Config.getModerationConfirmUrl()
                })
            })).show();
        };

        EditGroupNameModalView.prototype.renderErrorMessage = function () {
            return this.errorMessageTemplate.render();
        };

        EditGroupNameModalView.prototype.enableTextArea = function () {
            this.$textArea.toggleClass('disabled', false);
            this.$textArea.removeAttr('disabled');
        };

        EditGroupNameModalView.prototype.disableTextArea = function () {
            this.$textArea.toggleClass('disabled', true);
            this.$textArea.attr('disabled', true);
        };

        EditGroupNameModalView.prototype.showIndicator = function () {
            this.$sendBtn.html('<span class="spr throbWhite18"></span>');
        };

        EditGroupNameModalView.prototype.enableSend = function () {
            this.headerView.enableSendButton();
            this.isSendEnable = true;
        };

        EditGroupNameModalView.prototype.disableSend = function () {
            this.headerView.disableSendButton();
            this.isSendEnable = false;
        };

        EditGroupNameModalView.prototype.storeDraft = function (draft) {
            AsyncStorage.Session.setItem(this.DRAFT_KEY, draft);
        };

        EditGroupNameModalView.prototype.restoreDraft = function () {
            var draft = AsyncStorage.Session.getItem(this.DRAFT_KEY);
            if (_.isString(draft)) {
                this.$textArea.val(draft);
            }
        };

        EditGroupNameModalView.prototype.onClickedEmoji = function (emojiId) {
            this.emojiPaletteDelegate.didInputEmoji(emojiId);
        };

        EditGroupNameModalView.prototype.onDeletedEmoji = function () {
            this.emojiPaletteDelegate.didDeleteEmoji();
        };

        EditGroupNameModalView.prototype.deleteDraft = function () {
            AsyncStorage.Session.removeItem(this.DRAFT_KEY);
        };

        EditGroupNameModalView.prototype.setText = function (text) {
            this.$textArea.val(text || '');
            this.$counter.text(text.length);
        };

        EditGroupNameModalView.prototype.hide = function () {
            this.$el.hide();
            this.headerView.$el.off('hideEditGroupNameModalHeaderView');
        };

        EditGroupNameModalView.prototype.showErrorMessage = function (message) {
            var _this = this;
            this.$errorMessage.find('.fsS').text(message);
            this.$errorMessage.show();
            setTimeout(function () {
                return _this.$errorMessage.hide();
            }, 3000);
        };

        EditGroupNameModalView.prototype.offLine = function () {
            this.showErrorMessage(Blitz.Language.getMessage('chat.error_send_offline'));
        };
        return EditGroupNameModalView;
    })(Blitz.BlitzView);
    Blitz.EditGroupNameModalView = EditGroupNameModalView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var GroupProfileView = (function (_super) {
        __extends(GroupProfileView, _super);
        function GroupProfileView(viewModel) {
            _super.call(this, {
                tagName: 'article',
                className: 'cst'
            });
            this.viewModel = viewModel;
            this.template = new SNS.HBSTemplate('chat/group-settings/chat-profile.hbs');
            this.conversation = viewModel.conversation;
            this.participantCollection = viewModel.participantCollection;
        }
        GroupProfileView.prototype.events = function () {
            return {
                'click #addChatGroupMembers': 'showAddMemberModal',
                'click .wrapBtnIco.vaT': 'showEditGroupNameModal'
            };
        };

        GroupProfileView.prototype.render = function () {
            this.$el.html(this.template.render({
                participants: this.conversation.getFilteredParticipants(),
                name: this.getChatName(this.conversation),
                isAndroid2: Util.UA.isAndroid('2.')
            }));
            return this;
        };

        GroupProfileView.prototype.getChatName = function (conversation) {
            if (conversation.name) {
                return (new Util.Text(conversation.name)).escape().convertEmoji().disableATag().text;
            }
            return this.getFormattedGroupConversationNameElement(conversation.participants);
        };

        GroupProfileView.prototype.showAddMemberModal = function () {
            SNS.Analytics.event('add_member');
            var collection = new Blitz.SelectableContactCollection(this.conversation);
            var modalItems = { items: [
                    SNS.ModalItem.button5(Blitz.Language.getMessage('chat.cancel'), { cssClass: 'cancel' }),
                    SNS.ModalItem.title(Blitz.Language.getMessage('chat.member_select_title')),
                    SNS.ModalItem.button5(Blitz.Language.getMessage('chat.member_select_add', { num: 0 }), { cssClass: 'execute disabled', primary: true })
                ] };
            new Blitz.AddMemberModalView(collection, modalItems, this.participantCollection).show();
        };

        GroupProfileView.prototype.showEditGroupNameModal = function () {
            this.$el.triggerHandler('showEditGroupNameModal');
        };
        return GroupProfileView;
    })(Blitz.BlitzView);
    Blitz.GroupProfileView = GroupProfileView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var GroupSettingsHeaderView = (function (_super) {
        __extends(GroupSettingsHeaderView, _super);
        function GroupSettingsHeaderView() {
            _super.call(this);
            this.$commonHeader = $('#greeCommonHeader');
            this.$subHeader = $('#subHeader');
            this.template = new SNS.HBSTemplate('modal-header.hbs');
            this.items = [
                SNS.ModalItem.button5(Blitz.Language.getMessage('chat.complete'), { cssClass: 'js-complete' }),
                SNS.ModalItem.title(Blitz.Language.getMessage('chat.group_settings_title')),
                SNS.ModalItem.dummyButton5()
            ];
        }
        GroupSettingsHeaderView.prototype.events = function () {
            return {
                'click .js-complete': 'complete'
            };
        };

        GroupSettingsHeaderView.prototype.show = function () {
            this.$el = this.$subHeader.show();
            this.$commonHeader.hide();
            this.render();
        };

        GroupSettingsHeaderView.prototype.hide = function () {
            this.undelegateAll();
            this.$subHeader.hide();
            this.$commonHeader.show();
        };

        GroupSettingsHeaderView.prototype.render = function () {
            this.$el.html(this.template.render({}));
            for (var i = 0, l = this.items.length; i < l; i++) {
                $('.mdl', this.$el).append(Blitz.$item(this.items[i]));
            }
            this.delegateEvents();
            return this;
        };

        GroupSettingsHeaderView.prototype.complete = function () {
            this.hide();
            Gryfon.back();
        };
        return GroupSettingsHeaderView;
    })(Blitz.BlitzView);
    Blitz.GroupSettingsHeaderView = GroupSettingsHeaderView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ParticipantCollectionView = (function (_super) {
        __extends(ParticipantCollectionView, _super);
        function ParticipantCollectionView(collection, options) {
            if (typeof options === "undefined") { options = {}; }
            var _this = this;
            _super.call(this, collection, options);
            this.autoPagerize = true;
            this.template = new SNS.HBSTemplate('loadmore-collection.hbs');
            collection.on('completed', function () {
                return _this.completed();
            });
        }
        ParticipantCollectionView.prototype.render = function () {
            _super.prototype.render.call(this);
            this.loadMoreView.loadMore();
            return this;
        };

        ParticipantCollectionView.prototype.renderItem = function (item) {
            return new ParticipantItemView(item).render().$el;
        };

        ParticipantCollectionView.prototype.completed = function () {
            $('#load-more-view', this.$el).remove();
        };
        return ParticipantCollectionView;
    })(SNS.LoadMoreCollectionView);
    Blitz.ParticipantCollectionView = ParticipantCollectionView;

    var ParticipantItemView = (function (_super) {
        __extends(ParticipantItemView, _super);
        function ParticipantItemView(participant) {
            _super.call(this, {
                tagName: 'article',
                className: 'cst'
            });
            this.participant = participant;
            this.template = new SNS.HBSTemplate('chat/group-settings/participant-item.hbs');
        }
        ParticipantItemView.prototype.events = function () {
            return {
                'click .tap': 'showSnsProfileDialog'
            };
        };

        ParticipantItemView.prototype.render = function () {
            this.$el.html(this.template.render({
                profileImageUrl: this.participant.profileImageUrl,
                nickname: this.participant.getNickname(),
                isOnline: this.participant.isOnline
            }));
            return this;
        };

        ParticipantItemView.prototype.showSnsProfileDialog = function () {
            new Blitz.SnsProfileDialogView(this.participant, true).show();
        };
        return ParticipantItemView;
    })(Blitz.BlitzView);
    Blitz.ParticipantItemView = ParticipantItemView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ThemeSettingView = (function (_super) {
        __extends(ThemeSettingView, _super);
        function ThemeSettingView(theme) {
            _super.call(this, {
                tagName: 'section',
                className: 'contWrap'
            });
            this.theme = theme;
            this.settingThemeTemplate = new SNS.HBSTemplate('chat/setting/theme.hbs');
            this.backToTopLinkTemplate = new SNS.HBSTemplate('chat/setting/back-to-top-link.hbs');
            this.themeSettingService = new Blitz.ThemeSettingService();
            this._events = {
                'click #saveSettingBtn': 'saveSetting',
                'click #backToChatTop': 'jumpToChatTop'
            };
            this.refreshEvents();
        }
        ThemeSettingView.prototype.refreshEvents = function () {
            var _this = this;
            this.events = function () {
                return _this._events;
            };
            this.delegateEvents();
        };

        ThemeSettingView.prototype.render = function () {
            this.$el.append(this.renderThemeSettingView());
            this.$el.find('.contr').last().append(this.renderBackToTopLink());
            this.$saveSettingBtn = $('#saveSettingBtn', this.$el);
            return this;
        };

        ThemeSettingView.prototype.jumpToChatTop = function () {
            SNS.Analytics.event('back_to_chat_from_setting');
            this.linkTo(SNS.Config.getTopPageHash());
        };

        ThemeSettingView.prototype.showIndicatorInBtn = function () {
            this.$saveSettingBtn.html('<span class="spr throbWhite24"></span>');
        };

        ThemeSettingView.prototype.hideIndicatorInBtn = function () {
            this.$saveSettingBtn.html('<span class="vaM">' + Blitz.Language.getMessage('chat.save') + '</span>');
        };

        ThemeSettingView.prototype.disableUpdateNotificationBtn = function () {
            delete this._events['click #saveSetting'];
            this.refreshEvents();
        };

        ThemeSettingView.prototype.enableUpdateNotificationBtn = function () {
            this._events['click #saveSettingBtn'] = 'saveSetting';
            this.refreshEvents();
        };

        ThemeSettingView.prototype.saveSetting = function () {
            var _this = this;
            this.disableUpdateNotificationBtn();
            var isUsed = $('#themeSetting').prop("checked");
            this.showIndicatorInBtn();
            this.themeSettingService.update(this.theme.id, isUsed).onComplete(function (result) {
                _this.hideIndicatorInBtn();
                _this.enableUpdateNotificationBtn();
                result.match({
                    Success: function () {
                        _this.showSavedDialog(Blitz.Language.getMessage('chat.save_succeed'));
                        _this.sendBeacon(isUsed);
                    },
                    Failure: function (error) {
                        debug(error);
                        _this.showSavedDialog(Blitz.Language.getMessage('chat.save_failed'));
                    }
                });
            });
        };

        ThemeSettingView.prototype.crateBeaconParams = function (isUsed) {
            var params = {};
            params['is_used'] = isUsed ? 1 : 0;
            params['theme_id'] = this.theme.id;
            params['theme_tag'] = this.theme.tag;
            return params;
        };

        ThemeSettingView.prototype.sendBeacon = function (isUsed) {
            SNS.Analytics.event('save', '', this.crateBeaconParams(isUsed));
        };

        ThemeSettingView.prototype.showSavedDialog = function (message) {
            var _this = this;
            new Blitz.DialogView({
                message: message,
                actionAfterHide: function () {
                    return setTimeout(function () {
                        Blitz.BlitzLayout.showIndicator();
                        _this.reload();
                    }, 1);
                }
            }).show();
        };

        ThemeSettingView.prototype.renderThemeSettingView = function () {
            if (this.theme.term.isValid) {
                return this.settingThemeTemplate.render({
                    'isUsed': this.theme.isUsed,
                    'itemDesc': Blitz.Language.getMessage('chat.theme_setting_item_desc', {
                        themeName: this.theme.name
                    }),
                    'optionalDesc': Blitz.Language.getMessage('chat.theme_setting_valid_term_desc', {
                        term: this.theme.term.asString()
                    })
                });
            }
        };

        ThemeSettingView.prototype.renderBackToTopLink = function () {
            return this.backToTopLinkTemplate.render();
        };
        return ThemeSettingView;
    })(Blitz.BlitzView);
    Blitz.ThemeSettingView = ThemeSettingView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var UpgradeView = (function (_super) {
        __extends(UpgradeView, _super);
        function UpgradeView(options) {
            _super.call(this);
            this.options = options;
            this.upgradeTpl = new SNS.HBSTemplate('error.hbs');
        }
        UpgradeView.prototype.events = function () {
            var _this = this;
            return {
                'click .js-action': function () {
                    return _this.linkTo(SNS.Config.getIdDomain() + 'upg/entry?target_grade=' + _this.options['targetGrade'] + '&backto=' + _this.options['callbackUrl']);
                }
            };
        };

        UpgradeView.prototype.render = function () {
            this.$el.html(this.upgradeTpl.render({
                message: Blitz.Language.getMessage('chat.upgrade_message'),
                action: Blitz.Language.getMessage('chat.to_upgrade')
            }));
            this.delegateEvents();
            return this;
        };
        return UpgradeView;
    })(Blitz.BlitzView);
    Blitz.UpgradeView = UpgradeView;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryMessage = (function (_super) {
        __extends(DeliveryMessage, _super);
        function DeliveryMessage(deliveryId, roomId, dstDeliveryId, entryTextId, body, isModerationNg, meta, sender, urn) {
            _super.call(this, deliveryId);
            this.roomId = roomId;
            this.dstDeliveryId = dstDeliveryId;
            this.entryTextId = entryTextId;
            this.body = body;
            this.isModerationNg = isModerationNg;
            this.meta = meta;
            this.sender = sender;
            this.urn = urn;
        }
        return DeliveryMessage;
    })(DDD.Entity);
    Blitz.DeliveryMessage = DeliveryMessage;

    var DeliveryMessageIdentity = (function (_super) {
        __extends(DeliveryMessageIdentity, _super);
        function DeliveryMessageIdentity(identity) {
            _super.call(this, identity);
        }
        return DeliveryMessageIdentity;
    })(DDD.Identity);
    Blitz.DeliveryMessageIdentity = DeliveryMessageIdentity;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryMessageFactory = (function () {
        function DeliveryMessageFactory() {
        }
        DeliveryMessageFactory.createList = function (params) {
            var _this = this;
            return params.map(function (e) {
                return _this.create(e);
            });
        };

        DeliveryMessageFactory.create = function (params) {
            var identity = new Blitz.DeliveryMessageIdentity(params.identity);
            var roomId = params.room_id;
            var dstDeliveryIdentity = new Blitz.DeliveryIdentity(params.dst_delivery_id);
            var entryTextIdentity = params.entry_text_id;
            var body = params.body;
            var isModerationNg = params.is_moderation_ng;

            var sender = _.isNull(params.sender) ? new monapt.None() : new monapt.Some(new Blitz.DelightUser(Blitz.SnsUserId.createFromString(params.sender.identity), params.sender.name, params.sender.profile_image_url));

            var meta = new Blitz.Meta(new Date(params.ctime).getTime(), null);
            var urn = params.urn;

            return new Blitz.DeliveryMessage(identity, roomId, dstDeliveryIdentity, entryTextIdentity, body, isModerationNg, meta, sender, urn);
        };
        return DeliveryMessageFactory;
    })();
    Blitz.DeliveryMessageFactory = DeliveryMessageFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryMessageRepository = (function () {
        function DeliveryMessageRepository(client) {
            this.client = client;
        }
        DeliveryMessageRepository.ofApi = function () {
            return new this(new SnsApi.DeliveryMessageClient());
        };

        DeliveryMessageRepository.prototype.getHistory = function (deliveryId, range) {
            var promise = new monapt.Promise();
            this.client.getHistory(deliveryId.getValue(), range).next(function (response) {
                var messagesAsJson = response['messages'];
                var deliveries = Blitz.DeliveryMessageFactory.createList(messagesAsJson);
                promise.success(deliveries);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };
        return DeliveryMessageRepository;
    })();
    Blitz.DeliveryMessageRepository = DeliveryMessageRepository;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryMessageService = (function () {
        function DeliveryMessageService(client) {
            this.client = client;
            this.deliveryRepository = Blitz.DeliveryRepository.ofApi();
        }
        DeliveryMessageService.ofApi = function () {
            return new this(new SnsApi.DeliveryMessageClient());
        };

        DeliveryMessageService.prototype.readPast = function (deliveryId, fromMessageId) {
            var _this = this;
            var promise = new monapt.Promise();
            this.client.readPast(deliveryId.getValue(), fromMessageId.getValue()).next(function (result) {
                promise.success(result);
                if (result) {
                    _this.deliveryRepository.get(deliveryId).onSuccess(function (delivery) {
                        var updated = delivery.readAllMessage();
                        _this.deliveryRepository.setCache(updated);
                    });
                }
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };
        return DeliveryMessageService;
    })();
    Blitz.DeliveryMessageService = DeliveryMessageService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var RelationalPermissionService = (function () {
        function RelationalPermissionService(client) {
            if (typeof client === "undefined") { client = new SnsApi.PermissionClient(); }
            this.client = client;
        }
        RelationalPermissionService.prototype.create = function (conversation) {
            var promise = new monapt.Promise();
            if (conversation.isOneOnOne()) {
                var c = conversation;
                var partnerId = c.getTargetUser().getIdentity().getValue();
                this.client.getSendMessagePermission(partnerId).next(function (response) {
                    return promise.success(Blitz.RelationalPermissionFactory.create(response));
                }).error(function (error) {
                    return promise.failure(error);
                });
            } else {
                promise.success(Blitz.RelationalPermissionFactory.withoutPermission());
            }
            return promise.future();
        };
        return RelationalPermissionService;
    })();
    Blitz.RelationalPermissionService = RelationalPermissionService;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var DeliveryNotificationRepository = (function () {
        function DeliveryNotificationRepository(client) {
            this.client = client;
        }
        DeliveryNotificationRepository.ofApi = function () {
            return new DeliveryNotificationRepository(new SnsApi.DeliveryNotificationClient());
        };

        DeliveryNotificationRepository.prototype.get = function (deliveryId) {
            var promise = new monapt.Promise();
            this.client.get(deliveryId.getValue()).next(function (response) {
                var notifies = response['notifies'];
                promise.success(notifies);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };

        DeliveryNotificationRepository.prototype.update = function (deliveryId, notifies) {
            var promise = new monapt.Promise();
            this.client.update(deliveryId.getValue(), notifies).next(function (result) {
                if (result) {
                    promise.success(result);
                } else {
                    promise.failure(new Error(Blitz.Language.getMessage('chat.error_failed')));
                }
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };
        return DeliveryNotificationRepository;
    })();
    Blitz.DeliveryNotificationRepository = DeliveryNotificationRepository;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var OptoutSettingFactory = (function () {
        function OptoutSettingFactory() {
        }
        OptoutSettingFactory.from = function (response) {
            var userId = new Blitz.SnsUserId(response['user_id']);
            return new Blitz.OptoutSetting(userId, response['nickname'], response['is_optout'], response['enables_optout']);
        };
        return OptoutSettingFactory;
    })();
    Blitz.OptoutSettingFactory = OptoutSettingFactory;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var OptoutSettingRepository = (function () {
        function OptoutSettingRepository(client) {
            this.client = client;
        }
        OptoutSettingRepository.ofApi = function () {
            return new OptoutSettingRepository(new SnsApi.OptoutSettingClient());
        };

        OptoutSettingRepository.prototype.get = function (userId) {
            var promise = new monapt.Promise();
            this.client.get(userId.getValue()).next(function (response) {
                var optoutSetting = Blitz.OptoutSettingFactory.from(response);
                promise.success(optoutSetting);
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };
        return OptoutSettingRepository;
    })();
    Blitz.OptoutSettingRepository = OptoutSettingRepository;
})(Blitz || (Blitz = {}));
var Blitz;
(function (Blitz) {
    var ThemeSettingService = (function () {
        function ThemeSettingService(client) {
            if (typeof client === "undefined") { client = new SnsApi.ThemeClient(); }
            this.client = client;
        }
        ThemeSettingService.prototype.nonUse = function (themeId) {
            return this.update(themeId, false);
        };

        ThemeSettingService.prototype.use = function (themeId) {
            return this.update(themeId, true);
        };

        ThemeSettingService.prototype.update = function (themeId, isUsed) {
            var promise = new monapt.Promise();
            this.client.updateSetting(themeId, isUsed).next(function (result) {
                if (result) {
                    promise.success(result);
                } else {
                    promise.failure(new Error(Blitz.Language.getMessage('chat.error_failed')));
                }
            }).error(function (error) {
                return promise.failure(error);
            });
            return promise.future();
        };
        return ThemeSettingService;
    })();
    Blitz.ThemeSettingService = ThemeSettingService;
})(Blitz || (Blitz = {}));
var Util;
(function (Util) {
    Util.xstrlen = function (str) {
        if (!str) {
            return 0;
        }

        var index = 0, length = str.length, count = 0;
        while (index < length) {
            var x = str.charCodeAt(index);
            if (isSurrogatePair(x)) {
                index += 2;
            } else if (isNeedsCheckSpecialChar(x)) {
                var sc = findSpecialCharacter(str, index);
                if (sc != null) {
                    index += 1 + sc.length;
                } else {
                    index += 1;
                }
            } else if (isEmojiTag(x)) {
                var emojiTag = str.slice(index).match(/^<emoji id=\"\d+\">/);
                if (emojiTag != null && emojiTag['index'] == 0) {
                    index += emojiTag[0].length;
                } else {
                    index += 1;
                }
            } else {
                index += 1;
            }
            count++;
        }

        return count;
    };

    Util.xsubstr = function (str, pos, len) {
        var str_index = 0;
        var str_length = str.length;

        var count = 0;
        while (str_index < str_length && count < pos) {
            var x = str.charCodeAt(str_index);

            if (isSurrogatePair(x)) {
                str_index += 2;
            } else if (isNeedsCheckSpecialChar(x)) {
                var sc = findSpecialCharacter(str, str_index);
                str_index += sc ? 1 + sc.length : 1;
            } else {
                str_index += 1;
            }
            count++;
        }

        var str_pos = str_index;

        var count = 0;
        while (str_index < str_length && count < len) {
            var x = str.charCodeAt(str_index);

            if (isSurrogatePair(x)) {
                str_index += 2;
            } else if (isNeedsCheckSpecialChar(x)) {
                var sc = findSpecialCharacter(str, str_index);
                str_index += sc ? 1 + sc.length : 1;
            } else {
                str_index += 1;
            }
            count++;
        }
        var str_len = str_index - str_pos;

        return str.substr(str_pos, str_len);
    };

    var isSurrogatePair = function (x) {
        return 0xD800 <= x && x < 0xDC00;
    };
    var isNeedsCheckSpecialChar = function (x) {
        return x == 0x0026;
    };
    var isEmojiTag = function (x) {
        return x == 0x3c;
    };

    var findSpecialCharacter = function (str, start) {
        var specialCharStart = str.indexOf('&', start);
        if (specialCharStart < 0) {
            return null;
        }

        var specialCharEnd = str.indexOf(';', specialCharStart);
        var lenght = specialCharEnd - specialCharStart;
        if (specialCharEnd >= 0 && lenght < 10) {
            return str.substr(specialCharStart, length);
        } else {
            return null;
        }
    };

    Util.truncateLine = function (text, maxLine, omitBy, separator) {
        if (typeof omitBy === "undefined") { omitBy = ''; }
        if (typeof separator === "undefined") { separator = "<br />"; }
        if (Util.canTruncate(text, maxLine, separator)) {
            return text.split(separator).slice(0, maxLine).join(separator) + omitBy;
        }
        return text;
    };

    Util.canTruncate = function (text, maxLine, separator) {
        if (typeof separator === "undefined") { separator = "<br />"; }
        var lines = text.split(separator);
        if (lines.length <= maxLine) {
            return false;
        }
        return true;
    };

    Util.filterText = function (text) {
        if (text == null) {
            return "";
        }
        return text.replace(/(\r\n|\n|\r)/g, "<br />");
    };

    Util.eraseSpace = function (text) {
        if (text == null) {
            return "";
        }
        return text.replace(/(\r\n|\n|\r)/g, "");
    };

    Util.strNormalize = function (text) {
        return text;
    };

    var URL = (function () {
        function URL(url) {
            this.url = url;
            this.$span = $('<span>');
            this.hash = this.getHashString();
            this.search = this.parseParams(this.getSearchString());
            this.protocol = this.getProtocolString();
            this.params = _.extend(_.clone(this.search), this.parseParams(this.hash));
            this.domain = this.getDomainString();
            this.path = this.getPathString();
        }
        URL.parse = function (url) {
            return new this(url);
        };

        URL.prototype.get = function () {
            return this.url;
        };

        URL.prototype.htmlspecialchars = function () {
            return this.$span.html(this.url).html();
        };

        URL.prototype.htmlspecialcharsDecode = function () {
            return this.$span.html(this.url).text();
        };

        URL.prototype.parseParams = function (parameterString) {
            return _.object(_.compact(_.map(parameterString.split('&'), function (item) {
                if (item) {
                    return item.split('=').map(function (k_or_v) {
                        return decodeURIComponent(k_or_v);
                    });
                }
                return;
            })));
        };

        URL.prototype.getDomainString = function () {
            var match = this.url.match(/^https?:\/\/[^\/]+/);
            return (match) ? match[0] : 'null';
        };
        URL.prototype.getHashString = function () {
            var matches = this.url.match(/#([^?]+)/);
            return this.valid(matches);
        };
        URL.prototype.getSearchString = function () {
            var matches = this.url.match(/\?([^#]+)/);
            return this.valid(matches);
        };
        URL.prototype.getProtocolString = function () {
            var matches = this.url.match(/^([^:]+):/);
            return this.valid(matches);
        };
        URL.prototype.getPathString = function () {
            var matches = this.url.match(/^https?:\/\/[^\/]+(\/[^\?^\#]+).*/);
            return this.valid(matches);
        };
        URL.prototype.valid = function (regexpMatches) {
            if (regexpMatches == null || regexpMatches.length < 2) {
                return "";
            }
            return regexpMatches[1];
        };
        URL.prototype.getViewName = function () {
            return this.params['view'] || '';
        };
        return URL;
    })();
    Util.URL = URL;
})(Util || (Util = {}));

silent = true;
fivefold.silent = true;
